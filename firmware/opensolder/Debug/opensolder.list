
opensolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ca8  08007adc  08007adc  00008adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  0000b19c  2**0
                  CONTENTS
  4 .ARM          00000000  08009784  08009784  0000b19c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009784  08009784  0000b19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009784  08009784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009788  08009788  0000a788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800978c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  2000019c  08009928  0000b19c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08009928  0000ba88  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b19c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b74  00000000  00000000  0000b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  00022d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  000264e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109e  00000000  00000000  000279f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c91a  00000000  00000000  00028a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c149  00000000  00000000  000453b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a6e  00000000  00000000  000614f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101f67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  00101fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00107100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000019c 	.word	0x2000019c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ac4 	.word	0x08007ac4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001a0 	.word	0x200001a0
 8000104:	08007ac4 	.word	0x08007ac4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_dmul>:
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	4657      	mov	r7, sl
 8000248:	46de      	mov	lr, fp
 800024a:	464e      	mov	r6, r9
 800024c:	4645      	mov	r5, r8
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	001f      	movs	r7, r3
 8000252:	030b      	lsls	r3, r1, #12
 8000254:	0b1b      	lsrs	r3, r3, #12
 8000256:	0016      	movs	r6, r2
 8000258:	469a      	mov	sl, r3
 800025a:	0fca      	lsrs	r2, r1, #31
 800025c:	004b      	lsls	r3, r1, #1
 800025e:	0004      	movs	r4, r0
 8000260:	4693      	mov	fp, r2
 8000262:	b087      	sub	sp, #28
 8000264:	0d5b      	lsrs	r3, r3, #21
 8000266:	d100      	bne.n	800026a <__aeabi_dmul+0x26>
 8000268:	e0d5      	b.n	8000416 <__aeabi_dmul+0x1d2>
 800026a:	4abb      	ldr	r2, [pc, #748]	@ (8000558 <__aeabi_dmul+0x314>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d100      	bne.n	8000272 <__aeabi_dmul+0x2e>
 8000270:	e0f8      	b.n	8000464 <__aeabi_dmul+0x220>
 8000272:	4651      	mov	r1, sl
 8000274:	0f42      	lsrs	r2, r0, #29
 8000276:	00c9      	lsls	r1, r1, #3
 8000278:	430a      	orrs	r2, r1
 800027a:	2180      	movs	r1, #128	@ 0x80
 800027c:	0409      	lsls	r1, r1, #16
 800027e:	4311      	orrs	r1, r2
 8000280:	00c2      	lsls	r2, r0, #3
 8000282:	4691      	mov	r9, r2
 8000284:	4ab5      	ldr	r2, [pc, #724]	@ (800055c <__aeabi_dmul+0x318>)
 8000286:	468a      	mov	sl, r1
 8000288:	189d      	adds	r5, r3, r2
 800028a:	2300      	movs	r3, #0
 800028c:	4698      	mov	r8, r3
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	033c      	lsls	r4, r7, #12
 8000292:	007b      	lsls	r3, r7, #1
 8000294:	0ffa      	lsrs	r2, r7, #31
 8000296:	0030      	movs	r0, r6
 8000298:	0b24      	lsrs	r4, r4, #12
 800029a:	0d5b      	lsrs	r3, r3, #21
 800029c:	9200      	str	r2, [sp, #0]
 800029e:	d100      	bne.n	80002a2 <__aeabi_dmul+0x5e>
 80002a0:	e096      	b.n	80003d0 <__aeabi_dmul+0x18c>
 80002a2:	4aad      	ldr	r2, [pc, #692]	@ (8000558 <__aeabi_dmul+0x314>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d031      	beq.n	800030c <__aeabi_dmul+0xc8>
 80002a8:	0f72      	lsrs	r2, r6, #29
 80002aa:	00e4      	lsls	r4, r4, #3
 80002ac:	4322      	orrs	r2, r4
 80002ae:	2480      	movs	r4, #128	@ 0x80
 80002b0:	0424      	lsls	r4, r4, #16
 80002b2:	4314      	orrs	r4, r2
 80002b4:	4aa9      	ldr	r2, [pc, #676]	@ (800055c <__aeabi_dmul+0x318>)
 80002b6:	00f0      	lsls	r0, r6, #3
 80002b8:	4694      	mov	ip, r2
 80002ba:	4463      	add	r3, ip
 80002bc:	195b      	adds	r3, r3, r5
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	9201      	str	r2, [sp, #4]
 80002c2:	4642      	mov	r2, r8
 80002c4:	2600      	movs	r6, #0
 80002c6:	2a0a      	cmp	r2, #10
 80002c8:	dc42      	bgt.n	8000350 <__aeabi_dmul+0x10c>
 80002ca:	465a      	mov	r2, fp
 80002cc:	9900      	ldr	r1, [sp, #0]
 80002ce:	404a      	eors	r2, r1
 80002d0:	4693      	mov	fp, r2
 80002d2:	4642      	mov	r2, r8
 80002d4:	2a02      	cmp	r2, #2
 80002d6:	dc32      	bgt.n	800033e <__aeabi_dmul+0xfa>
 80002d8:	3a01      	subs	r2, #1
 80002da:	2a01      	cmp	r2, #1
 80002dc:	d900      	bls.n	80002e0 <__aeabi_dmul+0x9c>
 80002de:	e149      	b.n	8000574 <__aeabi_dmul+0x330>
 80002e0:	2e02      	cmp	r6, #2
 80002e2:	d100      	bne.n	80002e6 <__aeabi_dmul+0xa2>
 80002e4:	e0ca      	b.n	800047c <__aeabi_dmul+0x238>
 80002e6:	2e01      	cmp	r6, #1
 80002e8:	d13d      	bne.n	8000366 <__aeabi_dmul+0x122>
 80002ea:	2300      	movs	r3, #0
 80002ec:	2400      	movs	r4, #0
 80002ee:	2200      	movs	r2, #0
 80002f0:	0010      	movs	r0, r2
 80002f2:	465a      	mov	r2, fp
 80002f4:	051b      	lsls	r3, r3, #20
 80002f6:	4323      	orrs	r3, r4
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4313      	orrs	r3, r2
 80002fc:	0019      	movs	r1, r3
 80002fe:	b007      	add	sp, #28
 8000300:	bcf0      	pop	{r4, r5, r6, r7}
 8000302:	46bb      	mov	fp, r7
 8000304:	46b2      	mov	sl, r6
 8000306:	46a9      	mov	r9, r5
 8000308:	46a0      	mov	r8, r4
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	4b92      	ldr	r3, [pc, #584]	@ (8000558 <__aeabi_dmul+0x314>)
 800030e:	4326      	orrs	r6, r4
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d100      	bne.n	8000318 <__aeabi_dmul+0xd4>
 8000316:	e0bb      	b.n	8000490 <__aeabi_dmul+0x24c>
 8000318:	2203      	movs	r2, #3
 800031a:	4641      	mov	r1, r8
 800031c:	4311      	orrs	r1, r2
 800031e:	465a      	mov	r2, fp
 8000320:	4688      	mov	r8, r1
 8000322:	9900      	ldr	r1, [sp, #0]
 8000324:	404a      	eors	r2, r1
 8000326:	2180      	movs	r1, #128	@ 0x80
 8000328:	0109      	lsls	r1, r1, #4
 800032a:	468c      	mov	ip, r1
 800032c:	0029      	movs	r1, r5
 800032e:	4461      	add	r1, ip
 8000330:	9101      	str	r1, [sp, #4]
 8000332:	4641      	mov	r1, r8
 8000334:	290a      	cmp	r1, #10
 8000336:	dd00      	ble.n	800033a <__aeabi_dmul+0xf6>
 8000338:	e233      	b.n	80007a2 <__aeabi_dmul+0x55e>
 800033a:	4693      	mov	fp, r2
 800033c:	2603      	movs	r6, #3
 800033e:	4642      	mov	r2, r8
 8000340:	2701      	movs	r7, #1
 8000342:	4097      	lsls	r7, r2
 8000344:	21a6      	movs	r1, #166	@ 0xa6
 8000346:	003a      	movs	r2, r7
 8000348:	00c9      	lsls	r1, r1, #3
 800034a:	400a      	ands	r2, r1
 800034c:	420f      	tst	r7, r1
 800034e:	d031      	beq.n	80003b4 <__aeabi_dmul+0x170>
 8000350:	9e02      	ldr	r6, [sp, #8]
 8000352:	2e02      	cmp	r6, #2
 8000354:	d100      	bne.n	8000358 <__aeabi_dmul+0x114>
 8000356:	e235      	b.n	80007c4 <__aeabi_dmul+0x580>
 8000358:	2e03      	cmp	r6, #3
 800035a:	d100      	bne.n	800035e <__aeabi_dmul+0x11a>
 800035c:	e1d2      	b.n	8000704 <__aeabi_dmul+0x4c0>
 800035e:	4654      	mov	r4, sl
 8000360:	4648      	mov	r0, r9
 8000362:	2e01      	cmp	r6, #1
 8000364:	d0c1      	beq.n	80002ea <__aeabi_dmul+0xa6>
 8000366:	9a01      	ldr	r2, [sp, #4]
 8000368:	4b7d      	ldr	r3, [pc, #500]	@ (8000560 <__aeabi_dmul+0x31c>)
 800036a:	4694      	mov	ip, r2
 800036c:	4463      	add	r3, ip
 800036e:	2b00      	cmp	r3, #0
 8000370:	dc00      	bgt.n	8000374 <__aeabi_dmul+0x130>
 8000372:	e0c0      	b.n	80004f6 <__aeabi_dmul+0x2b2>
 8000374:	0742      	lsls	r2, r0, #29
 8000376:	d009      	beq.n	800038c <__aeabi_dmul+0x148>
 8000378:	220f      	movs	r2, #15
 800037a:	4002      	ands	r2, r0
 800037c:	2a04      	cmp	r2, #4
 800037e:	d005      	beq.n	800038c <__aeabi_dmul+0x148>
 8000380:	1d02      	adds	r2, r0, #4
 8000382:	4282      	cmp	r2, r0
 8000384:	4180      	sbcs	r0, r0
 8000386:	4240      	negs	r0, r0
 8000388:	1824      	adds	r4, r4, r0
 800038a:	0010      	movs	r0, r2
 800038c:	01e2      	lsls	r2, r4, #7
 800038e:	d506      	bpl.n	800039e <__aeabi_dmul+0x15a>
 8000390:	4b74      	ldr	r3, [pc, #464]	@ (8000564 <__aeabi_dmul+0x320>)
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	401c      	ands	r4, r3
 8000396:	2380      	movs	r3, #128	@ 0x80
 8000398:	4694      	mov	ip, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	4463      	add	r3, ip
 800039e:	4a72      	ldr	r2, [pc, #456]	@ (8000568 <__aeabi_dmul+0x324>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	dc6b      	bgt.n	800047c <__aeabi_dmul+0x238>
 80003a4:	0762      	lsls	r2, r4, #29
 80003a6:	08c0      	lsrs	r0, r0, #3
 80003a8:	0264      	lsls	r4, r4, #9
 80003aa:	055b      	lsls	r3, r3, #21
 80003ac:	4302      	orrs	r2, r0
 80003ae:	0b24      	lsrs	r4, r4, #12
 80003b0:	0d5b      	lsrs	r3, r3, #21
 80003b2:	e79d      	b.n	80002f0 <__aeabi_dmul+0xac>
 80003b4:	2190      	movs	r1, #144	@ 0x90
 80003b6:	0089      	lsls	r1, r1, #2
 80003b8:	420f      	tst	r7, r1
 80003ba:	d163      	bne.n	8000484 <__aeabi_dmul+0x240>
 80003bc:	2288      	movs	r2, #136	@ 0x88
 80003be:	423a      	tst	r2, r7
 80003c0:	d100      	bne.n	80003c4 <__aeabi_dmul+0x180>
 80003c2:	e0d7      	b.n	8000574 <__aeabi_dmul+0x330>
 80003c4:	9b00      	ldr	r3, [sp, #0]
 80003c6:	46a2      	mov	sl, r4
 80003c8:	469b      	mov	fp, r3
 80003ca:	4681      	mov	r9, r0
 80003cc:	9602      	str	r6, [sp, #8]
 80003ce:	e7bf      	b.n	8000350 <__aeabi_dmul+0x10c>
 80003d0:	0023      	movs	r3, r4
 80003d2:	4333      	orrs	r3, r6
 80003d4:	d100      	bne.n	80003d8 <__aeabi_dmul+0x194>
 80003d6:	e07f      	b.n	80004d8 <__aeabi_dmul+0x294>
 80003d8:	2c00      	cmp	r4, #0
 80003da:	d100      	bne.n	80003de <__aeabi_dmul+0x19a>
 80003dc:	e1ad      	b.n	800073a <__aeabi_dmul+0x4f6>
 80003de:	0020      	movs	r0, r4
 80003e0:	f000 fa62 	bl	80008a8 <__clzsi2>
 80003e4:	0002      	movs	r2, r0
 80003e6:	0003      	movs	r3, r0
 80003e8:	3a0b      	subs	r2, #11
 80003ea:	201d      	movs	r0, #29
 80003ec:	0019      	movs	r1, r3
 80003ee:	1a82      	subs	r2, r0, r2
 80003f0:	0030      	movs	r0, r6
 80003f2:	3908      	subs	r1, #8
 80003f4:	40d0      	lsrs	r0, r2
 80003f6:	408c      	lsls	r4, r1
 80003f8:	4304      	orrs	r4, r0
 80003fa:	0030      	movs	r0, r6
 80003fc:	4088      	lsls	r0, r1
 80003fe:	4a5b      	ldr	r2, [pc, #364]	@ (800056c <__aeabi_dmul+0x328>)
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	4694      	mov	ip, r2
 8000404:	4463      	add	r3, ip
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	9201      	str	r2, [sp, #4]
 800040a:	4642      	mov	r2, r8
 800040c:	2600      	movs	r6, #0
 800040e:	2a0a      	cmp	r2, #10
 8000410:	dc00      	bgt.n	8000414 <__aeabi_dmul+0x1d0>
 8000412:	e75a      	b.n	80002ca <__aeabi_dmul+0x86>
 8000414:	e79c      	b.n	8000350 <__aeabi_dmul+0x10c>
 8000416:	4653      	mov	r3, sl
 8000418:	4303      	orrs	r3, r0
 800041a:	4699      	mov	r9, r3
 800041c:	d054      	beq.n	80004c8 <__aeabi_dmul+0x284>
 800041e:	4653      	mov	r3, sl
 8000420:	2b00      	cmp	r3, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_dmul+0x1e2>
 8000424:	e177      	b.n	8000716 <__aeabi_dmul+0x4d2>
 8000426:	4650      	mov	r0, sl
 8000428:	f000 fa3e 	bl	80008a8 <__clzsi2>
 800042c:	230b      	movs	r3, #11
 800042e:	425b      	negs	r3, r3
 8000430:	469c      	mov	ip, r3
 8000432:	0002      	movs	r2, r0
 8000434:	4484      	add	ip, r0
 8000436:	0011      	movs	r1, r2
 8000438:	4650      	mov	r0, sl
 800043a:	3908      	subs	r1, #8
 800043c:	4088      	lsls	r0, r1
 800043e:	231d      	movs	r3, #29
 8000440:	4680      	mov	r8, r0
 8000442:	4660      	mov	r0, ip
 8000444:	1a1b      	subs	r3, r3, r0
 8000446:	0020      	movs	r0, r4
 8000448:	40d8      	lsrs	r0, r3
 800044a:	0003      	movs	r3, r0
 800044c:	4640      	mov	r0, r8
 800044e:	4303      	orrs	r3, r0
 8000450:	469a      	mov	sl, r3
 8000452:	0023      	movs	r3, r4
 8000454:	408b      	lsls	r3, r1
 8000456:	4699      	mov	r9, r3
 8000458:	2300      	movs	r3, #0
 800045a:	4d44      	ldr	r5, [pc, #272]	@ (800056c <__aeabi_dmul+0x328>)
 800045c:	4698      	mov	r8, r3
 800045e:	1aad      	subs	r5, r5, r2
 8000460:	9302      	str	r3, [sp, #8]
 8000462:	e715      	b.n	8000290 <__aeabi_dmul+0x4c>
 8000464:	4652      	mov	r2, sl
 8000466:	4302      	orrs	r2, r0
 8000468:	4691      	mov	r9, r2
 800046a:	d126      	bne.n	80004ba <__aeabi_dmul+0x276>
 800046c:	2200      	movs	r2, #0
 800046e:	001d      	movs	r5, r3
 8000470:	2302      	movs	r3, #2
 8000472:	4692      	mov	sl, r2
 8000474:	3208      	adds	r2, #8
 8000476:	4690      	mov	r8, r2
 8000478:	9302      	str	r3, [sp, #8]
 800047a:	e709      	b.n	8000290 <__aeabi_dmul+0x4c>
 800047c:	2400      	movs	r4, #0
 800047e:	2200      	movs	r2, #0
 8000480:	4b35      	ldr	r3, [pc, #212]	@ (8000558 <__aeabi_dmul+0x314>)
 8000482:	e735      	b.n	80002f0 <__aeabi_dmul+0xac>
 8000484:	2300      	movs	r3, #0
 8000486:	2480      	movs	r4, #128	@ 0x80
 8000488:	469b      	mov	fp, r3
 800048a:	0324      	lsls	r4, r4, #12
 800048c:	4b32      	ldr	r3, [pc, #200]	@ (8000558 <__aeabi_dmul+0x314>)
 800048e:	e72f      	b.n	80002f0 <__aeabi_dmul+0xac>
 8000490:	2202      	movs	r2, #2
 8000492:	4641      	mov	r1, r8
 8000494:	4311      	orrs	r1, r2
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0112      	lsls	r2, r2, #4
 800049a:	4694      	mov	ip, r2
 800049c:	002a      	movs	r2, r5
 800049e:	4462      	add	r2, ip
 80004a0:	4688      	mov	r8, r1
 80004a2:	9201      	str	r2, [sp, #4]
 80004a4:	290a      	cmp	r1, #10
 80004a6:	dd00      	ble.n	80004aa <__aeabi_dmul+0x266>
 80004a8:	e752      	b.n	8000350 <__aeabi_dmul+0x10c>
 80004aa:	465a      	mov	r2, fp
 80004ac:	2000      	movs	r0, #0
 80004ae:	9900      	ldr	r1, [sp, #0]
 80004b0:	0004      	movs	r4, r0
 80004b2:	404a      	eors	r2, r1
 80004b4:	4693      	mov	fp, r2
 80004b6:	2602      	movs	r6, #2
 80004b8:	e70b      	b.n	80002d2 <__aeabi_dmul+0x8e>
 80004ba:	220c      	movs	r2, #12
 80004bc:	001d      	movs	r5, r3
 80004be:	2303      	movs	r3, #3
 80004c0:	4681      	mov	r9, r0
 80004c2:	4690      	mov	r8, r2
 80004c4:	9302      	str	r3, [sp, #8]
 80004c6:	e6e3      	b.n	8000290 <__aeabi_dmul+0x4c>
 80004c8:	2300      	movs	r3, #0
 80004ca:	469a      	mov	sl, r3
 80004cc:	3304      	adds	r3, #4
 80004ce:	4698      	mov	r8, r3
 80004d0:	3b03      	subs	r3, #3
 80004d2:	2500      	movs	r5, #0
 80004d4:	9302      	str	r3, [sp, #8]
 80004d6:	e6db      	b.n	8000290 <__aeabi_dmul+0x4c>
 80004d8:	4642      	mov	r2, r8
 80004da:	3301      	adds	r3, #1
 80004dc:	431a      	orrs	r2, r3
 80004de:	002b      	movs	r3, r5
 80004e0:	4690      	mov	r8, r2
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	9201      	str	r2, [sp, #4]
 80004e6:	4642      	mov	r2, r8
 80004e8:	2400      	movs	r4, #0
 80004ea:	2000      	movs	r0, #0
 80004ec:	2601      	movs	r6, #1
 80004ee:	2a0a      	cmp	r2, #10
 80004f0:	dc00      	bgt.n	80004f4 <__aeabi_dmul+0x2b0>
 80004f2:	e6ea      	b.n	80002ca <__aeabi_dmul+0x86>
 80004f4:	e72c      	b.n	8000350 <__aeabi_dmul+0x10c>
 80004f6:	2201      	movs	r2, #1
 80004f8:	1ad2      	subs	r2, r2, r3
 80004fa:	2a38      	cmp	r2, #56	@ 0x38
 80004fc:	dd00      	ble.n	8000500 <__aeabi_dmul+0x2bc>
 80004fe:	e6f4      	b.n	80002ea <__aeabi_dmul+0xa6>
 8000500:	2a1f      	cmp	r2, #31
 8000502:	dc00      	bgt.n	8000506 <__aeabi_dmul+0x2c2>
 8000504:	e12a      	b.n	800075c <__aeabi_dmul+0x518>
 8000506:	211f      	movs	r1, #31
 8000508:	4249      	negs	r1, r1
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	0021      	movs	r1, r4
 800050e:	40d9      	lsrs	r1, r3
 8000510:	000b      	movs	r3, r1
 8000512:	2a20      	cmp	r2, #32
 8000514:	d005      	beq.n	8000522 <__aeabi_dmul+0x2de>
 8000516:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <__aeabi_dmul+0x32c>)
 8000518:	9d01      	ldr	r5, [sp, #4]
 800051a:	4694      	mov	ip, r2
 800051c:	4465      	add	r5, ip
 800051e:	40ac      	lsls	r4, r5
 8000520:	4320      	orrs	r0, r4
 8000522:	1e42      	subs	r2, r0, #1
 8000524:	4190      	sbcs	r0, r2
 8000526:	4318      	orrs	r0, r3
 8000528:	2307      	movs	r3, #7
 800052a:	0019      	movs	r1, r3
 800052c:	2400      	movs	r4, #0
 800052e:	4001      	ands	r1, r0
 8000530:	4203      	tst	r3, r0
 8000532:	d00c      	beq.n	800054e <__aeabi_dmul+0x30a>
 8000534:	230f      	movs	r3, #15
 8000536:	4003      	ands	r3, r0
 8000538:	2b04      	cmp	r3, #4
 800053a:	d100      	bne.n	800053e <__aeabi_dmul+0x2fa>
 800053c:	e140      	b.n	80007c0 <__aeabi_dmul+0x57c>
 800053e:	1d03      	adds	r3, r0, #4
 8000540:	4283      	cmp	r3, r0
 8000542:	41a4      	sbcs	r4, r4
 8000544:	0018      	movs	r0, r3
 8000546:	4264      	negs	r4, r4
 8000548:	0761      	lsls	r1, r4, #29
 800054a:	0264      	lsls	r4, r4, #9
 800054c:	0b24      	lsrs	r4, r4, #12
 800054e:	08c2      	lsrs	r2, r0, #3
 8000550:	2300      	movs	r3, #0
 8000552:	430a      	orrs	r2, r1
 8000554:	e6cc      	b.n	80002f0 <__aeabi_dmul+0xac>
 8000556:	46c0      	nop			@ (mov r8, r8)
 8000558:	000007ff 	.word	0x000007ff
 800055c:	fffffc01 	.word	0xfffffc01
 8000560:	000003ff 	.word	0x000003ff
 8000564:	feffffff 	.word	0xfeffffff
 8000568:	000007fe 	.word	0x000007fe
 800056c:	fffffc0d 	.word	0xfffffc0d
 8000570:	0000043e 	.word	0x0000043e
 8000574:	4649      	mov	r1, r9
 8000576:	464a      	mov	r2, r9
 8000578:	0409      	lsls	r1, r1, #16
 800057a:	0c09      	lsrs	r1, r1, #16
 800057c:	000d      	movs	r5, r1
 800057e:	0c16      	lsrs	r6, r2, #16
 8000580:	0c02      	lsrs	r2, r0, #16
 8000582:	0400      	lsls	r0, r0, #16
 8000584:	0c00      	lsrs	r0, r0, #16
 8000586:	4345      	muls	r5, r0
 8000588:	46ac      	mov	ip, r5
 800058a:	0005      	movs	r5, r0
 800058c:	4375      	muls	r5, r6
 800058e:	46a8      	mov	r8, r5
 8000590:	0015      	movs	r5, r2
 8000592:	000f      	movs	r7, r1
 8000594:	4375      	muls	r5, r6
 8000596:	9200      	str	r2, [sp, #0]
 8000598:	9502      	str	r5, [sp, #8]
 800059a:	002a      	movs	r2, r5
 800059c:	9d00      	ldr	r5, [sp, #0]
 800059e:	436f      	muls	r7, r5
 80005a0:	4665      	mov	r5, ip
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	46a9      	mov	r9, r5
 80005a6:	4447      	add	r7, r8
 80005a8:	444f      	add	r7, r9
 80005aa:	45b8      	cmp	r8, r7
 80005ac:	d905      	bls.n	80005ba <__aeabi_dmul+0x376>
 80005ae:	0015      	movs	r5, r2
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	4690      	mov	r8, r2
 80005b6:	4445      	add	r5, r8
 80005b8:	9502      	str	r5, [sp, #8]
 80005ba:	0c3d      	lsrs	r5, r7, #16
 80005bc:	9503      	str	r5, [sp, #12]
 80005be:	4665      	mov	r5, ip
 80005c0:	042d      	lsls	r5, r5, #16
 80005c2:	043f      	lsls	r7, r7, #16
 80005c4:	0c2d      	lsrs	r5, r5, #16
 80005c6:	46ac      	mov	ip, r5
 80005c8:	003d      	movs	r5, r7
 80005ca:	4465      	add	r5, ip
 80005cc:	9504      	str	r5, [sp, #16]
 80005ce:	0c25      	lsrs	r5, r4, #16
 80005d0:	0424      	lsls	r4, r4, #16
 80005d2:	0c24      	lsrs	r4, r4, #16
 80005d4:	46ac      	mov	ip, r5
 80005d6:	0025      	movs	r5, r4
 80005d8:	4375      	muls	r5, r6
 80005da:	46a8      	mov	r8, r5
 80005dc:	4665      	mov	r5, ip
 80005de:	000f      	movs	r7, r1
 80005e0:	4369      	muls	r1, r5
 80005e2:	4441      	add	r1, r8
 80005e4:	4689      	mov	r9, r1
 80005e6:	4367      	muls	r7, r4
 80005e8:	0c39      	lsrs	r1, r7, #16
 80005ea:	4449      	add	r1, r9
 80005ec:	436e      	muls	r6, r5
 80005ee:	4588      	cmp	r8, r1
 80005f0:	d903      	bls.n	80005fa <__aeabi_dmul+0x3b6>
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	0252      	lsls	r2, r2, #9
 80005f6:	4690      	mov	r8, r2
 80005f8:	4446      	add	r6, r8
 80005fa:	0c0d      	lsrs	r5, r1, #16
 80005fc:	46a8      	mov	r8, r5
 80005fe:	0035      	movs	r5, r6
 8000600:	4445      	add	r5, r8
 8000602:	9505      	str	r5, [sp, #20]
 8000604:	9d03      	ldr	r5, [sp, #12]
 8000606:	043f      	lsls	r7, r7, #16
 8000608:	46a8      	mov	r8, r5
 800060a:	0c3f      	lsrs	r7, r7, #16
 800060c:	0409      	lsls	r1, r1, #16
 800060e:	19c9      	adds	r1, r1, r7
 8000610:	4488      	add	r8, r1
 8000612:	4645      	mov	r5, r8
 8000614:	9503      	str	r5, [sp, #12]
 8000616:	4655      	mov	r5, sl
 8000618:	042e      	lsls	r6, r5, #16
 800061a:	0c36      	lsrs	r6, r6, #16
 800061c:	0c2f      	lsrs	r7, r5, #16
 800061e:	0035      	movs	r5, r6
 8000620:	4345      	muls	r5, r0
 8000622:	4378      	muls	r0, r7
 8000624:	4681      	mov	r9, r0
 8000626:	0038      	movs	r0, r7
 8000628:	46a8      	mov	r8, r5
 800062a:	0c2d      	lsrs	r5, r5, #16
 800062c:	46aa      	mov	sl, r5
 800062e:	9a00      	ldr	r2, [sp, #0]
 8000630:	4350      	muls	r0, r2
 8000632:	4372      	muls	r2, r6
 8000634:	444a      	add	r2, r9
 8000636:	4452      	add	r2, sl
 8000638:	4591      	cmp	r9, r2
 800063a:	d903      	bls.n	8000644 <__aeabi_dmul+0x400>
 800063c:	2580      	movs	r5, #128	@ 0x80
 800063e:	026d      	lsls	r5, r5, #9
 8000640:	46a9      	mov	r9, r5
 8000642:	4448      	add	r0, r9
 8000644:	0c15      	lsrs	r5, r2, #16
 8000646:	46a9      	mov	r9, r5
 8000648:	4645      	mov	r5, r8
 800064a:	042d      	lsls	r5, r5, #16
 800064c:	0c2d      	lsrs	r5, r5, #16
 800064e:	46a8      	mov	r8, r5
 8000650:	4665      	mov	r5, ip
 8000652:	437d      	muls	r5, r7
 8000654:	0412      	lsls	r2, r2, #16
 8000656:	4448      	add	r0, r9
 8000658:	4490      	add	r8, r2
 800065a:	46a9      	mov	r9, r5
 800065c:	0032      	movs	r2, r6
 800065e:	4665      	mov	r5, ip
 8000660:	4362      	muls	r2, r4
 8000662:	436e      	muls	r6, r5
 8000664:	437c      	muls	r4, r7
 8000666:	0c17      	lsrs	r7, r2, #16
 8000668:	1936      	adds	r6, r6, r4
 800066a:	19bf      	adds	r7, r7, r6
 800066c:	42bc      	cmp	r4, r7
 800066e:	d903      	bls.n	8000678 <__aeabi_dmul+0x434>
 8000670:	2480      	movs	r4, #128	@ 0x80
 8000672:	0264      	lsls	r4, r4, #9
 8000674:	46a4      	mov	ip, r4
 8000676:	44e1      	add	r9, ip
 8000678:	9c02      	ldr	r4, [sp, #8]
 800067a:	9e03      	ldr	r6, [sp, #12]
 800067c:	46a4      	mov	ip, r4
 800067e:	9d05      	ldr	r5, [sp, #20]
 8000680:	4466      	add	r6, ip
 8000682:	428e      	cmp	r6, r1
 8000684:	4189      	sbcs	r1, r1
 8000686:	46ac      	mov	ip, r5
 8000688:	0412      	lsls	r2, r2, #16
 800068a:	043c      	lsls	r4, r7, #16
 800068c:	0c12      	lsrs	r2, r2, #16
 800068e:	18a2      	adds	r2, r4, r2
 8000690:	4462      	add	r2, ip
 8000692:	4249      	negs	r1, r1
 8000694:	1854      	adds	r4, r2, r1
 8000696:	4446      	add	r6, r8
 8000698:	46a4      	mov	ip, r4
 800069a:	4546      	cmp	r6, r8
 800069c:	41a4      	sbcs	r4, r4
 800069e:	4682      	mov	sl, r0
 80006a0:	4264      	negs	r4, r4
 80006a2:	46a0      	mov	r8, r4
 80006a4:	42aa      	cmp	r2, r5
 80006a6:	4192      	sbcs	r2, r2
 80006a8:	458c      	cmp	ip, r1
 80006aa:	4189      	sbcs	r1, r1
 80006ac:	44e2      	add	sl, ip
 80006ae:	44d0      	add	r8, sl
 80006b0:	4249      	negs	r1, r1
 80006b2:	4252      	negs	r2, r2
 80006b4:	430a      	orrs	r2, r1
 80006b6:	45a0      	cmp	r8, r4
 80006b8:	41a4      	sbcs	r4, r4
 80006ba:	4582      	cmp	sl, r0
 80006bc:	4189      	sbcs	r1, r1
 80006be:	4264      	negs	r4, r4
 80006c0:	4249      	negs	r1, r1
 80006c2:	430c      	orrs	r4, r1
 80006c4:	4641      	mov	r1, r8
 80006c6:	0c3f      	lsrs	r7, r7, #16
 80006c8:	19d2      	adds	r2, r2, r7
 80006ca:	1912      	adds	r2, r2, r4
 80006cc:	0dcc      	lsrs	r4, r1, #23
 80006ce:	9904      	ldr	r1, [sp, #16]
 80006d0:	0270      	lsls	r0, r6, #9
 80006d2:	4308      	orrs	r0, r1
 80006d4:	1e41      	subs	r1, r0, #1
 80006d6:	4188      	sbcs	r0, r1
 80006d8:	4641      	mov	r1, r8
 80006da:	444a      	add	r2, r9
 80006dc:	0df6      	lsrs	r6, r6, #23
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	4330      	orrs	r0, r6
 80006e2:	0249      	lsls	r1, r1, #9
 80006e4:	4314      	orrs	r4, r2
 80006e6:	4308      	orrs	r0, r1
 80006e8:	01d2      	lsls	r2, r2, #7
 80006ea:	d535      	bpl.n	8000758 <__aeabi_dmul+0x514>
 80006ec:	2201      	movs	r2, #1
 80006ee:	0843      	lsrs	r3, r0, #1
 80006f0:	4002      	ands	r2, r0
 80006f2:	4313      	orrs	r3, r2
 80006f4:	07e0      	lsls	r0, r4, #31
 80006f6:	4318      	orrs	r0, r3
 80006f8:	0864      	lsrs	r4, r4, #1
 80006fa:	e634      	b.n	8000366 <__aeabi_dmul+0x122>
 80006fc:	9b00      	ldr	r3, [sp, #0]
 80006fe:	46a2      	mov	sl, r4
 8000700:	469b      	mov	fp, r3
 8000702:	4681      	mov	r9, r0
 8000704:	2480      	movs	r4, #128	@ 0x80
 8000706:	4653      	mov	r3, sl
 8000708:	0324      	lsls	r4, r4, #12
 800070a:	431c      	orrs	r4, r3
 800070c:	0324      	lsls	r4, r4, #12
 800070e:	464a      	mov	r2, r9
 8000710:	4b2e      	ldr	r3, [pc, #184]	@ (80007cc <__aeabi_dmul+0x588>)
 8000712:	0b24      	lsrs	r4, r4, #12
 8000714:	e5ec      	b.n	80002f0 <__aeabi_dmul+0xac>
 8000716:	f000 f8c7 	bl	80008a8 <__clzsi2>
 800071a:	2315      	movs	r3, #21
 800071c:	469c      	mov	ip, r3
 800071e:	4484      	add	ip, r0
 8000720:	0002      	movs	r2, r0
 8000722:	4663      	mov	r3, ip
 8000724:	3220      	adds	r2, #32
 8000726:	2b1c      	cmp	r3, #28
 8000728:	dc00      	bgt.n	800072c <__aeabi_dmul+0x4e8>
 800072a:	e684      	b.n	8000436 <__aeabi_dmul+0x1f2>
 800072c:	2300      	movs	r3, #0
 800072e:	4699      	mov	r9, r3
 8000730:	0023      	movs	r3, r4
 8000732:	3808      	subs	r0, #8
 8000734:	4083      	lsls	r3, r0
 8000736:	469a      	mov	sl, r3
 8000738:	e68e      	b.n	8000458 <__aeabi_dmul+0x214>
 800073a:	f000 f8b5 	bl	80008a8 <__clzsi2>
 800073e:	0002      	movs	r2, r0
 8000740:	0003      	movs	r3, r0
 8000742:	3215      	adds	r2, #21
 8000744:	3320      	adds	r3, #32
 8000746:	2a1c      	cmp	r2, #28
 8000748:	dc00      	bgt.n	800074c <__aeabi_dmul+0x508>
 800074a:	e64e      	b.n	80003ea <__aeabi_dmul+0x1a6>
 800074c:	0002      	movs	r2, r0
 800074e:	0034      	movs	r4, r6
 8000750:	3a08      	subs	r2, #8
 8000752:	2000      	movs	r0, #0
 8000754:	4094      	lsls	r4, r2
 8000756:	e652      	b.n	80003fe <__aeabi_dmul+0x1ba>
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	e604      	b.n	8000366 <__aeabi_dmul+0x122>
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <__aeabi_dmul+0x58c>)
 800075e:	0021      	movs	r1, r4
 8000760:	469c      	mov	ip, r3
 8000762:	0003      	movs	r3, r0
 8000764:	9d01      	ldr	r5, [sp, #4]
 8000766:	40d3      	lsrs	r3, r2
 8000768:	4465      	add	r5, ip
 800076a:	40a9      	lsls	r1, r5
 800076c:	4319      	orrs	r1, r3
 800076e:	0003      	movs	r3, r0
 8000770:	40ab      	lsls	r3, r5
 8000772:	1e58      	subs	r0, r3, #1
 8000774:	4183      	sbcs	r3, r0
 8000776:	4319      	orrs	r1, r3
 8000778:	0008      	movs	r0, r1
 800077a:	40d4      	lsrs	r4, r2
 800077c:	074b      	lsls	r3, r1, #29
 800077e:	d009      	beq.n	8000794 <__aeabi_dmul+0x550>
 8000780:	230f      	movs	r3, #15
 8000782:	400b      	ands	r3, r1
 8000784:	2b04      	cmp	r3, #4
 8000786:	d005      	beq.n	8000794 <__aeabi_dmul+0x550>
 8000788:	1d0b      	adds	r3, r1, #4
 800078a:	428b      	cmp	r3, r1
 800078c:	4180      	sbcs	r0, r0
 800078e:	4240      	negs	r0, r0
 8000790:	1824      	adds	r4, r4, r0
 8000792:	0018      	movs	r0, r3
 8000794:	0223      	lsls	r3, r4, #8
 8000796:	d400      	bmi.n	800079a <__aeabi_dmul+0x556>
 8000798:	e6d6      	b.n	8000548 <__aeabi_dmul+0x304>
 800079a:	2301      	movs	r3, #1
 800079c:	2400      	movs	r4, #0
 800079e:	2200      	movs	r2, #0
 80007a0:	e5a6      	b.n	80002f0 <__aeabi_dmul+0xac>
 80007a2:	290f      	cmp	r1, #15
 80007a4:	d1aa      	bne.n	80006fc <__aeabi_dmul+0x4b8>
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	4652      	mov	r2, sl
 80007aa:	031b      	lsls	r3, r3, #12
 80007ac:	421a      	tst	r2, r3
 80007ae:	d0a9      	beq.n	8000704 <__aeabi_dmul+0x4c0>
 80007b0:	421c      	tst	r4, r3
 80007b2:	d1a7      	bne.n	8000704 <__aeabi_dmul+0x4c0>
 80007b4:	431c      	orrs	r4, r3
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	0002      	movs	r2, r0
 80007ba:	469b      	mov	fp, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <__aeabi_dmul+0x588>)
 80007be:	e597      	b.n	80002f0 <__aeabi_dmul+0xac>
 80007c0:	2400      	movs	r4, #0
 80007c2:	e6c1      	b.n	8000548 <__aeabi_dmul+0x304>
 80007c4:	2400      	movs	r4, #0
 80007c6:	4b01      	ldr	r3, [pc, #4]	@ (80007cc <__aeabi_dmul+0x588>)
 80007c8:	0022      	movs	r2, r4
 80007ca:	e591      	b.n	80002f0 <__aeabi_dmul+0xac>
 80007cc:	000007ff 	.word	0x000007ff
 80007d0:	0000041e 	.word	0x0000041e

080007d4 <__aeabi_d2iz>:
 80007d4:	000b      	movs	r3, r1
 80007d6:	0002      	movs	r2, r0
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	4d16      	ldr	r5, [pc, #88]	@ (8000834 <__aeabi_d2iz+0x60>)
 80007dc:	030c      	lsls	r4, r1, #12
 80007de:	b082      	sub	sp, #8
 80007e0:	0049      	lsls	r1, r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	9200      	str	r2, [sp, #0]
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	0b24      	lsrs	r4, r4, #12
 80007ea:	0d49      	lsrs	r1, r1, #21
 80007ec:	0fde      	lsrs	r6, r3, #31
 80007ee:	42a9      	cmp	r1, r5
 80007f0:	dd04      	ble.n	80007fc <__aeabi_d2iz+0x28>
 80007f2:	4811      	ldr	r0, [pc, #68]	@ (8000838 <__aeabi_d2iz+0x64>)
 80007f4:	4281      	cmp	r1, r0
 80007f6:	dd03      	ble.n	8000800 <__aeabi_d2iz+0x2c>
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <__aeabi_d2iz+0x68>)
 80007fa:	18f0      	adds	r0, r6, r3
 80007fc:	b002      	add	sp, #8
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	2080      	movs	r0, #128	@ 0x80
 8000802:	0340      	lsls	r0, r0, #13
 8000804:	4320      	orrs	r0, r4
 8000806:	4c0e      	ldr	r4, [pc, #56]	@ (8000840 <__aeabi_d2iz+0x6c>)
 8000808:	1a64      	subs	r4, r4, r1
 800080a:	2c1f      	cmp	r4, #31
 800080c:	dd08      	ble.n	8000820 <__aeabi_d2iz+0x4c>
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <__aeabi_d2iz+0x70>)
 8000810:	1a5b      	subs	r3, r3, r1
 8000812:	40d8      	lsrs	r0, r3
 8000814:	0003      	movs	r3, r0
 8000816:	4258      	negs	r0, r3
 8000818:	2e00      	cmp	r6, #0
 800081a:	d1ef      	bne.n	80007fc <__aeabi_d2iz+0x28>
 800081c:	0018      	movs	r0, r3
 800081e:	e7ed      	b.n	80007fc <__aeabi_d2iz+0x28>
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <__aeabi_d2iz+0x74>)
 8000822:	9a00      	ldr	r2, [sp, #0]
 8000824:	469c      	mov	ip, r3
 8000826:	0003      	movs	r3, r0
 8000828:	4461      	add	r1, ip
 800082a:	408b      	lsls	r3, r1
 800082c:	40e2      	lsrs	r2, r4
 800082e:	4313      	orrs	r3, r2
 8000830:	e7f1      	b.n	8000816 <__aeabi_d2iz+0x42>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	000003fe 	.word	0x000003fe
 8000838:	0000041d 	.word	0x0000041d
 800083c:	7fffffff 	.word	0x7fffffff
 8000840:	00000433 	.word	0x00000433
 8000844:	00000413 	.word	0x00000413
 8000848:	fffffbed 	.word	0xfffffbed

0800084c <__aeabi_i2d>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	2800      	cmp	r0, #0
 8000850:	d016      	beq.n	8000880 <__aeabi_i2d+0x34>
 8000852:	17c3      	asrs	r3, r0, #31
 8000854:	18c5      	adds	r5, r0, r3
 8000856:	405d      	eors	r5, r3
 8000858:	0fc4      	lsrs	r4, r0, #31
 800085a:	0028      	movs	r0, r5
 800085c:	f000 f824 	bl	80008a8 <__clzsi2>
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <__aeabi_i2d+0x58>)
 8000862:	1a1b      	subs	r3, r3, r0
 8000864:	055b      	lsls	r3, r3, #21
 8000866:	0d5b      	lsrs	r3, r3, #21
 8000868:	280a      	cmp	r0, #10
 800086a:	dc14      	bgt.n	8000896 <__aeabi_i2d+0x4a>
 800086c:	0002      	movs	r2, r0
 800086e:	002e      	movs	r6, r5
 8000870:	3215      	adds	r2, #21
 8000872:	4096      	lsls	r6, r2
 8000874:	220b      	movs	r2, #11
 8000876:	1a12      	subs	r2, r2, r0
 8000878:	40d5      	lsrs	r5, r2
 800087a:	032d      	lsls	r5, r5, #12
 800087c:	0b2d      	lsrs	r5, r5, #12
 800087e:	e003      	b.n	8000888 <__aeabi_i2d+0x3c>
 8000880:	2400      	movs	r4, #0
 8000882:	2300      	movs	r3, #0
 8000884:	2500      	movs	r5, #0
 8000886:	2600      	movs	r6, #0
 8000888:	051b      	lsls	r3, r3, #20
 800088a:	432b      	orrs	r3, r5
 800088c:	07e4      	lsls	r4, r4, #31
 800088e:	4323      	orrs	r3, r4
 8000890:	0030      	movs	r0, r6
 8000892:	0019      	movs	r1, r3
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	380b      	subs	r0, #11
 8000898:	4085      	lsls	r5, r0
 800089a:	032d      	lsls	r5, r5, #12
 800089c:	2600      	movs	r6, #0
 800089e:	0b2d      	lsrs	r5, r5, #12
 80008a0:	e7f2      	b.n	8000888 <__aeabi_i2d+0x3c>
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	0000041e 	.word	0x0000041e

080008a8 <__clzsi2>:
 80008a8:	211c      	movs	r1, #28
 80008aa:	2301      	movs	r3, #1
 80008ac:	041b      	lsls	r3, r3, #16
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d301      	bcc.n	80008b6 <__clzsi2+0xe>
 80008b2:	0c00      	lsrs	r0, r0, #16
 80008b4:	3910      	subs	r1, #16
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	4298      	cmp	r0, r3
 80008ba:	d301      	bcc.n	80008c0 <__clzsi2+0x18>
 80008bc:	0a00      	lsrs	r0, r0, #8
 80008be:	3908      	subs	r1, #8
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d301      	bcc.n	80008ca <__clzsi2+0x22>
 80008c6:	0900      	lsrs	r0, r0, #4
 80008c8:	3904      	subs	r1, #4
 80008ca:	a202      	add	r2, pc, #8	@ (adr r2, 80008d4 <__clzsi2+0x2c>)
 80008cc:	5c10      	ldrb	r0, [r2, r0]
 80008ce:	1840      	adds	r0, r0, r1
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	02020304 	.word	0x02020304
 80008d8:	01010101 	.word	0x01010101
	...

080008e4 <button_init>:
 */

#include "button.h"

/******    functions    ******/
void button_init(button *const self, GPIO_TypeDef *port, uint16_t pin, uint8_t polarity) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	0019      	movs	r1, r3
 80008f0:	1dbb      	adds	r3, r7, #6
 80008f2:	801a      	strh	r2, [r3, #0]
 80008f4:	1d7b      	adds	r3, r7, #5
 80008f6:	1c0a      	adds	r2, r1, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	self->port = port;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	601a      	str	r2, [r3, #0]
	self->pin = pin;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	1dba      	adds	r2, r7, #6
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	809a      	strh	r2, [r3, #4]
	self->polarity = polarity;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1d7a      	adds	r2, r7, #5
 800090c:	7812      	ldrb	r2, [r2, #0]
 800090e:	719a      	strb	r2, [r3, #6]
	self->counter = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	71da      	strb	r2, [r3, #7]
	self->state = NO_PRESS;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2200      	movs	r2, #0
 800091a:	721a      	strb	r2, [r3, #8]
	self->release_state = NO_PRESS;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	2200      	movs	r2, #0
 8000920:	725a      	strb	r2, [r3, #9]
	self->release_flag = RESET;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	729a      	strb	r2, [r3, #10]
	self->long_press_ticks = 0;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2200      	movs	r2, #0
 800092c:	819a      	strh	r2, [r3, #12]
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}

08000936 <button_event>:

uint8_t button_event(button *const self) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	uint8_t event = NO_PRESS;
 800093e:	210f      	movs	r1, #15
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
	if (self->release_flag) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7a9b      	ldrb	r3, [r3, #10]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d009      	beq.n	8000964 <button_event+0x2e>
		event = self->release_state;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	7a52      	ldrb	r2, [r2, #9]
 8000956:	701a      	strb	r2, [r3, #0]
		self->release_state = NO_PRESS;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	725a      	strb	r2, [r3, #9]
		self->release_flag = RESET;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	729a      	strb	r2, [r3, #10]
	}
	return event;
 8000964:	230f      	movs	r3, #15
 8000966:	18fb      	adds	r3, r7, r3
 8000968:	781b      	ldrb	r3, [r3, #0]
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}

08000972 <button_state>:

uint8_t button_state(button *const self) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	return self->state;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	b2db      	uxtb	r3, r3
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}

08000988 <button_scan>:

void button_scan(button *const self) {
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uint8_t button_pressed = HAL_GPIO_ReadPin(self->port, self->pin);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	889b      	ldrh	r3, [r3, #4]
 8000998:	250f      	movs	r5, #15
 800099a:	197c      	adds	r4, r7, r5
 800099c:	0019      	movs	r1, r3
 800099e:	0010      	movs	r0, r2
 80009a0:	f003 fc32 	bl	8004208 <HAL_GPIO_ReadPin>
 80009a4:	0003      	movs	r3, r0
 80009a6:	7023      	strb	r3, [r4, #0]

	if (self->polarity == INVERTED) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	799b      	ldrb	r3, [r3, #6]
 80009ac:	2b64      	cmp	r3, #100	@ 0x64
 80009ae:	d106      	bne.n	80009be <button_scan+0x36>
		button_pressed = !button_pressed;
 80009b0:	197b      	adds	r3, r7, r5
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	425a      	negs	r2, r3
 80009b6:	4153      	adcs	r3, r2
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	197b      	adds	r3, r7, r5
 80009bc:	701a      	strb	r2, [r3, #0]
	}

	if (button_pressed) {
 80009be:	230f      	movs	r3, #15
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d020      	beq.n	8000a0a <button_scan+0x82>
		if (self->counter == DEBOUNCE_TICKS) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	79db      	ldrb	r3, [r3, #7]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d113      	bne.n	80009fa <button_scan+0x72>
			if (self->long_press_ticks == LONG_PRESS_TICKS) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	899b      	ldrh	r3, [r3, #12]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	2b32      	cmp	r3, #50	@ 0x32
 80009da:	d103      	bne.n	80009e4 <button_scan+0x5c>
				self->state = LONG_PRESS;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2202      	movs	r2, #2
 80009e0:	721a      	strb	r2, [r3, #8]
			}
		} else {
			self->counter--;
		}
	}
}
 80009e2:	e032      	b.n	8000a4a <button_scan+0xc2>
				self->state = SHORT_PRESS;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	721a      	strb	r2, [r3, #8]
				self->long_press_ticks++;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	899b      	ldrh	r3, [r3, #12]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3301      	adds	r3, #1
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	819a      	strh	r2, [r3, #12]
}
 80009f8:	e027      	b.n	8000a4a <button_scan+0xc2>
			self->counter++;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	79db      	ldrb	r3, [r3, #7]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	71da      	strb	r2, [r3, #7]
}
 8000a08:	e01f      	b.n	8000a4a <button_scan+0xc2>
		if (self->counter == 0) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	79db      	ldrb	r3, [r3, #7]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d113      	bne.n	8000a3c <button_scan+0xb4>
			self->long_press_ticks = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	819a      	strh	r2, [r3, #12]
			if (self->state != NO_PRESS) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7a1b      	ldrb	r3, [r3, #8]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d012      	beq.n	8000a4a <button_scan+0xc2>
				self->release_flag = SET;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2201      	movs	r2, #1
 8000a28:	729a      	strb	r2, [r3, #10]
				self->release_state = self->state;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7a1b      	ldrb	r3, [r3, #8]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	725a      	strb	r2, [r3, #9]
				self->state = NO_PRESS;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	721a      	strb	r2, [r3, #8]
}
 8000a3a:	e006      	b.n	8000a4a <button_scan+0xc2>
			self->counter--;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	79db      	ldrb	r3, [r3, #7]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	71da      	strb	r2, [r3, #7]
}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bdb0      	pop	{r4, r5, r7, pc}

08000a52 <encoder_init>:
 */

#include "encoder.h"

/******    functions    ******/
void encoder_init(encoder *const self, TIM_TypeDef *timer) {
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
	self->timer = timer;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	601a      	str	r2, [r3, #0]
	self->state = NO_CHANGE;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2233      	movs	r2, #51	@ 0x33
 8000a66:	711a      	strb	r2, [r3, #4]
	self->flag = RESET;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	715a      	strb	r2, [r3, #5]
	self->delta = 0;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
	self->value = ((self->timer->ARR + 1) / 2);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	085a      	lsrs	r2, r3, #1
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	609a      	str	r2, [r3, #8]
	self->timer->CNT = self->value;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	6892      	ldr	r2, [r2, #8]
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
	self->timer->SR &= ~(1); // Clear SR_UIF (update interrupt flag)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2101      	movs	r1, #1
 8000a98:	438a      	bics	r2, r1
 8000a9a:	611a      	str	r2, [r3, #16]
}
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <encoder_event>:

uint8_t encoder_event(encoder *const self) {
 8000aa4:	b5b0      	push	{r4, r5, r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	uint32_t tmp_CNT = self->timer->CNT;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab2:	60fb      	str	r3, [r7, #12]
	if (tmp_CNT != self->value) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d032      	beq.n	8000b24 <encoder_event+0x80>
		uint8_t overflow_state = encoder_overflow_check(self);
 8000abe:	250b      	movs	r5, #11
 8000ac0:	197c      	adds	r4, r7, r5
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 f84d 	bl	8000b64 <encoder_overflow_check>
 8000aca:	0003      	movs	r3, r0
 8000acc:	7023      	strb	r3, [r4, #0]
		if (overflow_state == OVERFLOW) {
 8000ace:	197b      	adds	r3, r7, r5
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b35      	cmp	r3, #53	@ 0x35
 8000ad4:	d103      	bne.n	8000ade <encoder_event+0x3a>
			self->state = INCREASE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2232      	movs	r2, #50	@ 0x32
 8000ada:	711a      	strb	r2, [r3, #4]
 8000adc:	e014      	b.n	8000b08 <encoder_event+0x64>
		} else if (overflow_state == UNDERFLOW) {
 8000ade:	230b      	movs	r3, #11
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b36      	cmp	r3, #54	@ 0x36
 8000ae6:	d103      	bne.n	8000af0 <encoder_event+0x4c>
			self->state = DECREASE;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2234      	movs	r2, #52	@ 0x34
 8000aec:	711a      	strb	r2, [r3, #4]
 8000aee:	e00b      	b.n	8000b08 <encoder_event+0x64>
		} else {
			if (tmp_CNT > self->value) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d903      	bls.n	8000b02 <encoder_event+0x5e>
				self->state = INCREASE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2232      	movs	r2, #50	@ 0x32
 8000afe:	711a      	strb	r2, [r3, #4]
 8000b00:	e002      	b.n	8000b08 <encoder_event+0x64>
			} else {
				self->state = DECREASE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2234      	movs	r2, #52	@ 0x34
 8000b06:	711a      	strb	r2, [r3, #4]
			}
		}
		self->delta = tmp_CNT - self->value;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	001a      	movs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60da      	str	r2, [r3, #12]
		self->value = tmp_CNT;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	609a      	str	r2, [r3, #8]
		self->flag = SET;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	715a      	strb	r2, [r3, #5]
 8000b22:	e002      	b.n	8000b2a <encoder_event+0x86>
	} else {
		self->state = NO_CHANGE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2233      	movs	r2, #51	@ 0x33
 8000b28:	711a      	strb	r2, [r3, #4]
	}
	return self->state;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	b2db      	uxtb	r3, r3
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b004      	add	sp, #16
 8000b36:	bdb0      	pop	{r4, r5, r7, pc}

08000b38 <get_encoder_delta>:

uint32_t get_encoder_value(encoder *const self) {
	return self->value;
}

int32_t get_encoder_delta(encoder *const self) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	int32_t delta = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
	if (self->flag) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d005      	beq.n	8000b5a <get_encoder_delta+0x22>
		delta = self->delta;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	60fb      	str	r3, [r7, #12]
		self->flag = RESET;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	715a      	strb	r2, [r3, #5]
	}
	return delta;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <encoder_overflow_check>:

uint8_t encoder_overflow_check(encoder *const self) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	uint8_t overflow_state = 0;
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
	if (self->timer->SR & 1) {							  // Check if SR_UIF (update interrupt flag) is set
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	d018      	beq.n	8000bb2 <encoder_overflow_check+0x4e>
		if (self->timer->CNT <= (self->timer->ARR / 2)) { // Check if counter is under or over the half point of timer ARR
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8c:	085b      	lsrs	r3, r3, #1
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d803      	bhi.n	8000b9a <encoder_overflow_check+0x36>
			overflow_state = OVERFLOW;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2235      	movs	r2, #53	@ 0x35
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e003      	b.n	8000ba2 <encoder_overflow_check+0x3e>
		} else {
			overflow_state = UNDERFLOW;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	2236      	movs	r2, #54	@ 0x36
 8000ba0:	701a      	strb	r2, [r3, #0]
		}
		self->timer->SR &= ~(1); // Clear SR_UIF (update interrupt flag)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	438a      	bics	r2, r1
 8000bb0:	611a      	str	r2, [r3, #16]
	}
	return overflow_state;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	781b      	ldrb	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b004      	add	sp, #16
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <init_display>:
static ssd1306_string power_bar_text = {PB_TEXT_X, PB_TEXT_Y, &Font_6x8, White, "\0", PB_TEXT_MAX_LEN};
static ssd1306_string message_text = {MSG_TEXT_X, MSG_TEXT_Y, &Font_7x10, White, "\0", MSG_TEXT_MAX_LEN};

/******    Functions    ******/
// Draw the default display image
void init_display(uint16_t timeout) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	801a      	strh	r2, [r3, #0]
	ssd1306_Init();
 8000bcc:	f001 f896 	bl	8001cfc <ssd1306_Init>
	ssd1306_SetContrast(DISPLAY_BRIGHTNESS);
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	f001 fbad 	bl	8002330 <ssd1306_SetContrast>
	draw_init_display();
 8000bd6:	f000 f809 	bl	8000bec <draw_init_display>
	HAL_Delay(timeout);
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f002 fa70 	bl	80030c4 <HAL_Delay>
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <draw_init_display>:

// Draw the splash screen during initialization
void draw_init_display(void) {
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af04      	add	r7, sp, #16
	ssd1306_Fill(Black);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f001 f8ee 	bl	8001dd4 <ssd1306_Fill>
	ssd1306_DrawRectangle(INIT_R_X1, INIT_R_Y1, INIT_R_X2, INIT_R_Y2, White);
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	231e      	movs	r3, #30
 8000bfe:	227d      	movs	r2, #125	@ 0x7d
 8000c00:	2102      	movs	r1, #2
 8000c02:	2002      	movs	r0, #2
 8000c04:	f001 fb0a 	bl	800221c <ssd1306_DrawRectangle>
	write_string(s_opensolder);
 8000c08:	4b20      	ldr	r3, [pc, #128]	@ (8000c8c <draw_init_display+0xa0>)
 8000c0a:	466a      	mov	r2, sp
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	001a      	movs	r2, r3
 8000c10:	3210      	adds	r2, #16
 8000c12:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000c14:	c131      	stmia	r1!, {r0, r4, r5}
 8000c16:	6812      	ldr	r2, [r2, #0]
 8000c18:	600a      	str	r2, [r1, #0]
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	6859      	ldr	r1, [r3, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f000 f83d 	bl	8000ca0 <write_string>

	// Read ambient temperature and concaternate to s_ambient.string
	char s_buffer[STR_ARRAY_MAX_LEN];
	snprintf(s_buffer, sizeof(s_buffer), "%d'C", read_pcb_temperature());
 8000c26:	f002 f905 	bl	8002e34 <read_pcb_temperature>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <draw_init_display+0xa4>)
 8000c2e:	0038      	movs	r0, r7
 8000c30:	2116      	movs	r1, #22
 8000c32:	f006 fa87 	bl	8007144 <sniprintf>
	strcat(s_ambient.string, s_buffer);
 8000c36:	003a      	movs	r2, r7
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <draw_init_display+0xa8>)
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f006 fabd 	bl	80071bc <strcat>

	write_string(s_firmware);
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <draw_init_display+0xac>)
 8000c44:	466a      	mov	r2, sp
 8000c46:	0011      	movs	r1, r2
 8000c48:	001a      	movs	r2, r3
 8000c4a:	3210      	adds	r2, #16
 8000c4c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000c4e:	c131      	stmia	r1!, {r0, r4, r5}
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	600a      	str	r2, [r1, #0]
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f000 f820 	bl	8000ca0 <write_string>
	write_string(s_ambient);
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <draw_init_display+0xb0>)
 8000c62:	466a      	mov	r2, sp
 8000c64:	0011      	movs	r1, r2
 8000c66:	001a      	movs	r2, r3
 8000c68:	3210      	adds	r2, #16
 8000c6a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000c6c:	c131      	stmia	r1!, {r0, r4, r5}
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	600a      	str	r2, [r1, #0]
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	6859      	ldr	r1, [r3, #4]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	f000 f811 	bl	8000ca0 <write_string>
	ssd1306_UpdateScreen();
 8000c7e:	f001 f8cd 	bl	8001e1c <ssd1306_UpdateScreen>
}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b006      	add	sp, #24
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	08007adc 	.word	0x08007adc
 8000c94:	20000049 	.word	0x20000049
 8000c98:	20000020 	.word	0x20000020
 8000c9c:	20000040 	.word	0x20000040

08000ca0 <write_string>:

void write_string(ssd1306_string string) {
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	b5b0      	push	{r4, r5, r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	2518      	movs	r5, #24
 8000caa:	197c      	adds	r4, r7, r5
 8000cac:	6020      	str	r0, [r4, #0]
 8000cae:	6061      	str	r1, [r4, #4]
 8000cb0:	60a2      	str	r2, [r4, #8]
 8000cb2:	60e3      	str	r3, [r4, #12]
	// Pad string.string if shorter than string.length to clear previous characters
	ssd1306_SetCursor(string.x, string.y);
 8000cb4:	002c      	movs	r4, r5
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	785b      	ldrb	r3, [r3, #1]
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f001 fa0b 	bl	80020dc <ssd1306_SetCursor>
	if (strlen(string.string) < string.length) {
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	3309      	adds	r3, #9
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fa1c 	bl	8000108 <strlen>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	7fdb      	ldrb	r3, [r3, #31]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d227      	bcs.n	8000d2c <write_string+0x8c>
		for (uint8_t i = strlen(string.string); i < string.length; i++) {
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	3309      	adds	r3, #9
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fa11 	bl	8000108 <strlen>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e016      	b.n	8000d1c <write_string+0x7c>
			strcat(string.string, " ");
 8000cee:	2418      	movs	r4, #24
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	3309      	adds	r3, #9
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fa07 	bl	8000108 <strlen>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	3309      	adds	r3, #9
 8000d02:	189a      	adds	r2, r3, r2
 8000d04:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <write_string+0xec>)
 8000d06:	0010      	movs	r0, r2
 8000d08:	0019      	movs	r1, r3
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	f006 fa8f 	bl	8007230 <memcpy>
		for (uint8_t i = strlen(string.string); i < string.length; i++) {
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	3201      	adds	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	2318      	movs	r3, #24
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	7fdb      	ldrb	r3, [r3, #31]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3e1      	bcc.n	8000cee <write_string+0x4e>
 8000d2a:	e012      	b.n	8000d52 <write_string+0xb2>
		}
	} else if (strlen(string.string) > string.length) {
 8000d2c:	2418      	movs	r4, #24
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	3309      	adds	r3, #9
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff f9e8 	bl	8000108 <strlen>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	0021      	movs	r1, r4
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	7fdb      	ldrb	r3, [r3, #31]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d906      	bls.n	8000d52 <write_string+0xb2>
		string.string[string.length] = '\0';
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	7fdb      	ldrb	r3, [r3, #31]
 8000d48:	001a      	movs	r2, r3
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	189b      	adds	r3, r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	725a      	strb	r2, [r3, #9]
	}

	// Write new string
	ssd1306_SetCursor(string.x, string.y);
 8000d52:	2418      	movs	r4, #24
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f001 f9bc 	bl	80020dc <ssd1306_SetCursor>
	ssd1306_WriteString(string.string, *string.font, string.color);
 8000d64:	0020      	movs	r0, r4
 8000d66:	183b      	adds	r3, r7, r0
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	7a19      	ldrb	r1, [r3, #8]
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	3309      	adds	r3, #9
 8000d72:	0018      	movs	r0, r3
 8000d74:	000b      	movs	r3, r1
 8000d76:	6811      	ldr	r1, [r2, #0]
 8000d78:	6852      	ldr	r2, [r2, #4]
 8000d7a:	f001 f985 	bl	8002088 <ssd1306_WriteString>
}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bcb0      	pop	{r4, r5, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	b004      	add	sp, #16
 8000d8a:	4718      	bx	r3
 8000d8c:	08007ae4 	.word	0x08007ae4

08000d90 <draw_default_display>:

void draw_default_display(void) {
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af04      	add	r7, sp, #16
	ssd1306_Fill(Black);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f001 f81c 	bl	8001dd4 <ssd1306_Fill>
	ssd1306_DrawRectangle(SET_R_X1, SET_R_Y1, SET_R_X2, SET_R_Y2, White);
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	232d      	movs	r3, #45	@ 0x2d
 8000da2:	223e      	movs	r2, #62	@ 0x3e
 8000da4:	2102      	movs	r1, #2
 8000da6:	2002      	movs	r0, #2
 8000da8:	f001 fa38 	bl	800221c <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(TIP_R_X1, TIP_R_Y1, TIP_R_X2, TIP_R_Y2, White);
 8000dac:	2301      	movs	r3, #1
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	232d      	movs	r3, #45	@ 0x2d
 8000db2:	227d      	movs	r2, #125	@ 0x7d
 8000db4:	2102      	movs	r1, #2
 8000db6:	2041      	movs	r0, #65	@ 0x41
 8000db8:	f001 fa30 	bl	800221c <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(PB_R_X1, PB_R_Y1, PB_R_X2, PB_R_Y2, White);
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	233d      	movs	r3, #61	@ 0x3d
 8000dc2:	227d      	movs	r2, #125	@ 0x7d
 8000dc4:	2130      	movs	r1, #48	@ 0x30
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f001 fa28 	bl	800221c <ssd1306_DrawRectangle>
	write_string(set_temp_text);
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <draw_default_display+0xc0>)
 8000dce:	466a      	mov	r2, sp
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	3210      	adds	r2, #16
 8000dd6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000dd8:	c131      	stmia	r1!, {r0, r4, r5}
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	600a      	str	r2, [r1, #0]
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	6859      	ldr	r1, [r3, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f7ff ff5b 	bl	8000ca0 <write_string>
	write_string(set_temp_val);
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <draw_default_display+0xc4>)
 8000dec:	466a      	mov	r2, sp
 8000dee:	0011      	movs	r1, r2
 8000df0:	001a      	movs	r2, r3
 8000df2:	3210      	adds	r2, #16
 8000df4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000df6:	c131      	stmia	r1!, {r0, r4, r5}
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	600a      	str	r2, [r1, #0]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	6859      	ldr	r1, [r3, #4]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f7ff ff4c 	bl	8000ca0 <write_string>
	write_string(tip_temp_text);
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <draw_default_display+0xc8>)
 8000e0a:	466a      	mov	r2, sp
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	001a      	movs	r2, r3
 8000e10:	3210      	adds	r2, #16
 8000e12:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e14:	c131      	stmia	r1!, {r0, r4, r5}
 8000e16:	6812      	ldr	r2, [r2, #0]
 8000e18:	600a      	str	r2, [r1, #0]
 8000e1a:	6818      	ldr	r0, [r3, #0]
 8000e1c:	6859      	ldr	r1, [r3, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f7ff ff3d 	bl	8000ca0 <write_string>
	write_string(tip_temp_val);
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <draw_default_display+0xcc>)
 8000e28:	466a      	mov	r2, sp
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	3210      	adds	r2, #16
 8000e30:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e32:	c131      	stmia	r1!, {r0, r4, r5}
 8000e34:	6812      	ldr	r2, [r2, #0]
 8000e36:	600a      	str	r2, [r1, #0]
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	6859      	ldr	r1, [r3, #4]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f7ff ff2e 	bl	8000ca0 <write_string>
	ssd1306_UpdateScreen();
 8000e44:	f000 ffea 	bl	8001e1c <ssd1306_UpdateScreen>
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	20000060 	.word	0x20000060
 8000e54:	20000080 	.word	0x20000080
 8000e58:	200000a0 	.word	0x200000a0
 8000e5c:	200000c0 	.word	0x200000c0

08000e60 <update_display>:

void update_display(void) {
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af04      	add	r7, sp, #16
	static uint32_t display_update_tick = 0;
	static uint16_t prev_tip_temp = 0;
	static uint16_t power_bar_value = 0;

	// Update set_temp
	snprintf(set_temp_val.string, set_temp_val.length + 1, "%d'C", get_set_temp());
 8000e66:	4b6c      	ldr	r3, [pc, #432]	@ (8001018 <update_display+0x1b8>)
 8000e68:	7fdb      	ldrb	r3, [r3, #31]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	001c      	movs	r4, r3
 8000e6e:	f002 f843 	bl	8002ef8 <get_set_temp>
 8000e72:	0003      	movs	r3, r0
 8000e74:	4a69      	ldr	r2, [pc, #420]	@ (800101c <update_display+0x1bc>)
 8000e76:	486a      	ldr	r0, [pc, #424]	@ (8001020 <update_display+0x1c0>)
 8000e78:	0021      	movs	r1, r4
 8000e7a:	f006 f963 	bl	8007144 <sniprintf>
	write_string(set_temp_val);
 8000e7e:	4b66      	ldr	r3, [pc, #408]	@ (8001018 <update_display+0x1b8>)
 8000e80:	466a      	mov	r2, sp
 8000e82:	0011      	movs	r1, r2
 8000e84:	001a      	movs	r2, r3
 8000e86:	3210      	adds	r2, #16
 8000e88:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000e8a:	c131      	stmia	r1!, {r0, r4, r5}
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	600a      	str	r2, [r1, #0]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	6859      	ldr	r1, [r3, #4]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	f7ff ff02 	bl	8000ca0 <write_string>

	// Keep rapid changing elements like tip_temp from creating display jitter
	if ((HAL_GetTick() > display_update_tick)
 8000e9c:	f002 f908 	bl	80030b0 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	4b60      	ldr	r3, [pc, #384]	@ (8001024 <update_display+0x1c4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d811      	bhi.n	8000ece <update_display+0x6e>
			|| (get_tip_temp() < prev_tip_temp - 1)
 8000eaa:	f002 f82f 	bl	8002f0c <get_tip_temp>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001028 <update_display+0x1c8>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	db08      	blt.n	8000ece <update_display+0x6e>
			|| (get_tip_temp() > prev_tip_temp + 1)) {
 8000ebc:	f002 f826 	bl	8002f0c <get_tip_temp>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	4b58      	ldr	r3, [pc, #352]	@ (8001028 <update_display+0x1c8>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dd49      	ble.n	8000f62 <update_display+0x102>
		display_update_tick = HAL_GetTick() + DISPLAY_UPDATE_TICKS;
 8000ece:	f002 f8ef 	bl	80030b0 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	33f5      	adds	r3, #245	@ 0xf5
 8000ed6:	33ff      	adds	r3, #255	@ 0xff
 8000ed8:	001a      	movs	r2, r3
 8000eda:	4b52      	ldr	r3, [pc, #328]	@ (8001024 <update_display+0x1c4>)
 8000edc:	601a      	str	r2, [r3, #0]
		prev_tip_temp = get_tip_temp();
 8000ede:	f002 f815 	bl	8002f0c <get_tip_temp>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	4b50      	ldr	r3, [pc, #320]	@ (8001028 <update_display+0x1c8>)
 8000ee8:	801a      	strh	r2, [r3, #0]

		snprintf(tip_temp_val.string, tip_temp_val.length + 1, "%d'C", get_tip_temp());
 8000eea:	4b50      	ldr	r3, [pc, #320]	@ (800102c <update_display+0x1cc>)
 8000eec:	7fdb      	ldrb	r3, [r3, #31]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	001c      	movs	r4, r3
 8000ef2:	f002 f80b 	bl	8002f0c <get_tip_temp>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	4a48      	ldr	r2, [pc, #288]	@ (800101c <update_display+0x1bc>)
 8000efa:	484d      	ldr	r0, [pc, #308]	@ (8001030 <update_display+0x1d0>)
 8000efc:	0021      	movs	r1, r4
 8000efe:	f006 f921 	bl	8007144 <sniprintf>
		write_string(tip_temp_val);
 8000f02:	4b4a      	ldr	r3, [pc, #296]	@ (800102c <update_display+0x1cc>)
 8000f04:	466a      	mov	r2, sp
 8000f06:	0011      	movs	r1, r2
 8000f08:	001a      	movs	r2, r3
 8000f0a:	3210      	adds	r2, #16
 8000f0c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000f0e:	c131      	stmia	r1!, {r0, r4, r5}
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	600a      	str	r2, [r1, #0]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	6859      	ldr	r1, [r3, #4]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f7ff fec0 	bl	8000ca0 <write_string>

		// Clear powerbar
		ssd1306_DrawFilledRectangle(PB_R_X1 + 1, PB_R_Y1 + 1, PB_R_X2 - 1, PB_R_Y2 - 1, Black);
 8000f20:	2300      	movs	r3, #0
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	233c      	movs	r3, #60	@ 0x3c
 8000f26:	227c      	movs	r2, #124	@ 0x7c
 8000f28:	2131      	movs	r1, #49	@ 0x31
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	f001 f9c6 	bl	80022bc <ssd1306_DrawFilledRectangle>

		// Draw powerbar
		power_bar_value = (uint16_t)get_power_bar_value() * (PB_R_X2 - PB_R_X1 - 1) / MAX_ON_PERIODS + PB_R_X1;
 8000f30:	f002 f830 	bl	8002f94 <get_power_bar_value>
 8000f34:	0003      	movs	r3, r0
 8000f36:	001a      	movs	r2, r3
 8000f38:	237a      	movs	r3, #122	@ 0x7a
 8000f3a:	4353      	muls	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da00      	bge.n	8000f42 <update_display+0xe2>
 8000f40:	3303      	adds	r3, #3
 8000f42:	109b      	asrs	r3, r3, #2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3302      	adds	r3, #2
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001034 <update_display+0x1d4>)
 8000f4c:	801a      	strh	r2, [r3, #0]
		ssd1306_DrawFilledRectangle(PB_R_X1, PB_R_Y1 + 1, power_bar_value, PB_R_Y2 - 1, White);
 8000f4e:	4b39      	ldr	r3, [pc, #228]	@ (8001034 <update_display+0x1d4>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	2301      	movs	r3, #1
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	233c      	movs	r3, #60	@ 0x3c
 8000f5a:	2131      	movs	r1, #49	@ 0x31
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f001 f9ad 	bl	80022bc <ssd1306_DrawFilledRectangle>
	}

	// DEBUG - display current state
	switch (get_system_state()) {
 8000f62:	f000 fe51 	bl	8001c08 <get_system_state>
 8000f66:	0003      	movs	r3, r0
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d840      	bhi.n	8000fee <update_display+0x18e>
 8000f6c:	009a      	lsls	r2, r3, #2
 8000f6e:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <update_display+0x1d8>)
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	469f      	mov	pc, r3
		case INIT_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "Initial");
 8000f76:	4b31      	ldr	r3, [pc, #196]	@ (800103c <update_display+0x1dc>)
 8000f78:	7fdb      	ldrb	r3, [r3, #31]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	4a30      	ldr	r2, [pc, #192]	@ (8001040 <update_display+0x1e0>)
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <update_display+0x1e4>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f006 f8de 	bl	8007144 <sniprintf>
			break;
 8000f88:	e032      	b.n	8000ff0 <update_display+0x190>
		case TIP_CHANGE_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "Tip change");
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <update_display+0x1dc>)
 8000f8c:	7fdb      	ldrb	r3, [r3, #31]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	0019      	movs	r1, r3
 8000f92:	4a2d      	ldr	r2, [pc, #180]	@ (8001048 <update_display+0x1e8>)
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <update_display+0x1e4>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f006 f8d4 	bl	8007144 <sniprintf>
			break;
 8000f9c:	e028      	b.n	8000ff0 <update_display+0x190>
		case OFF_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "OFF state");
 8000f9e:	4b27      	ldr	r3, [pc, #156]	@ (800103c <update_display+0x1dc>)
 8000fa0:	7fdb      	ldrb	r3, [r3, #31]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	4a29      	ldr	r2, [pc, #164]	@ (800104c <update_display+0x1ec>)
 8000fa8:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <update_display+0x1e4>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f006 f8ca 	bl	8007144 <sniprintf>
			break;
 8000fb0:	e01e      	b.n	8000ff0 <update_display+0x190>
		case ON_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "ON state");
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <update_display+0x1dc>)
 8000fb4:	7fdb      	ldrb	r3, [r3, #31]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	0019      	movs	r1, r3
 8000fba:	4a25      	ldr	r2, [pc, #148]	@ (8001050 <update_display+0x1f0>)
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <update_display+0x1e4>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f006 f8c0 	bl	8007144 <sniprintf>
			break;
 8000fc4:	e014      	b.n	8000ff0 <update_display+0x190>
		case STANDBY_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "Standby");
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <update_display+0x1dc>)
 8000fc8:	7fdb      	ldrb	r3, [r3, #31]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	0019      	movs	r1, r3
 8000fce:	4a21      	ldr	r2, [pc, #132]	@ (8001054 <update_display+0x1f4>)
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <update_display+0x1e4>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f006 f8b6 	bl	8007144 <sniprintf>
			break;
 8000fd8:	e00a      	b.n	8000ff0 <update_display+0x190>
		case ERROR_STATE:
			snprintf(power_bar_text.string, power_bar_text.length + 1, "Error");
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <update_display+0x1dc>)
 8000fdc:	7fdb      	ldrb	r3, [r3, #31]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <update_display+0x1f8>)
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <update_display+0x1e4>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f006 f8ac 	bl	8007144 <sniprintf>
			break;
 8000fec:	e000      	b.n	8000ff0 <update_display+0x190>
		default:
			break;
 8000fee:	46c0      	nop			@ (mov r8, r8)
	}
	write_string(power_bar_text);
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <update_display+0x1dc>)
 8000ff2:	466a      	mov	r2, sp
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	3210      	adds	r2, #16
 8000ffa:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000ffc:	c131      	stmia	r1!, {r0, r4, r5}
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	600a      	str	r2, [r1, #0]
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	f7ff fe49 	bl	8000ca0 <write_string>
	// DEBUG END - display current state

	// Update the display with the new values
	ssd1306_UpdateScreen();
 800100e:	f000 ff05 	bl	8001e1c <ssd1306_UpdateScreen>
}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	20000080 	.word	0x20000080
 800101c:	08007adc 	.word	0x08007adc
 8001020:	20000089 	.word	0x20000089
 8001024:	200001b8 	.word	0x200001b8
 8001028:	200001bc 	.word	0x200001bc
 800102c:	200000c0 	.word	0x200000c0
 8001030:	200000c9 	.word	0x200000c9
 8001034:	200001be 	.word	0x200001be
 8001038:	08007c30 	.word	0x08007c30
 800103c:	200000e0 	.word	0x200000e0
 8001040:	08007ae8 	.word	0x08007ae8
 8001044:	200000e9 	.word	0x200000e9
 8001048:	08007af0 	.word	0x08007af0
 800104c:	08007afc 	.word	0x08007afc
 8001050:	08007b08 	.word	0x08007b08
 8001054:	08007b14 	.word	0x08007b14
 8001058:	08007b1c 	.word	0x08007b1c

0800105c <display_message>:

void display_message(uint16_t message_code) {
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
 8001062:	0002      	movs	r2, r0
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	801a      	strh	r2, [r3, #0]
	switch (message_code) {
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d026      	beq.n	80010be <display_message+0x62>
 8001070:	dc2f      	bgt.n	80010d2 <display_message+0x76>
 8001072:	2b06      	cmp	r3, #6
 8001074:	d019      	beq.n	80010aa <display_message+0x4e>
 8001076:	dc2c      	bgt.n	80010d2 <display_message+0x76>
 8001078:	2b04      	cmp	r3, #4
 800107a:	d002      	beq.n	8001082 <display_message+0x26>
 800107c:	2b05      	cmp	r3, #5
 800107e:	d00a      	beq.n	8001096 <display_message+0x3a>
 8001080:	e027      	b.n	80010d2 <display_message+0x76>
		case TIP_NOT_DETECTED:
			snprintf(message_text.string, message_text.length + 1, "Insert tip");
 8001082:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <display_message+0xcc>)
 8001084:	7fdb      	ldrb	r3, [r3, #31]
 8001086:	3301      	adds	r3, #1
 8001088:	0019      	movs	r1, r3
 800108a:	4a28      	ldr	r2, [pc, #160]	@ (800112c <display_message+0xd0>)
 800108c:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <display_message+0xd4>)
 800108e:	0018      	movs	r0, r3
 8001090:	f006 f858 	bl	8007144 <sniprintf>
			break;
 8001094:	e027      	b.n	80010e6 <display_message+0x8a>
		case TIP_CHECK_ERROR:
			snprintf(message_text.string, message_text.length + 1, "Tip check error");
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <display_message+0xcc>)
 8001098:	7fdb      	ldrb	r3, [r3, #31]
 800109a:	3301      	adds	r3, #1
 800109c:	0019      	movs	r1, r3
 800109e:	4a25      	ldr	r2, [pc, #148]	@ (8001134 <display_message+0xd8>)
 80010a0:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <display_message+0xd4>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f006 f84e 	bl	8007144 <sniprintf>
			break;
 80010a8:	e01d      	b.n	80010e6 <display_message+0x8a>
		case AC_NOT_DETECTED:
			snprintf(message_text.string, message_text.length + 1, "AC not detected");
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <display_message+0xcc>)
 80010ac:	7fdb      	ldrb	r3, [r3, #31]
 80010ae:	3301      	adds	r3, #1
 80010b0:	0019      	movs	r1, r3
 80010b2:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <display_message+0xdc>)
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <display_message+0xd4>)
 80010b6:	0018      	movs	r0, r3
 80010b8:	f006 f844 	bl	8007144 <sniprintf>
			break;
 80010bc:	e013      	b.n	80010e6 <display_message+0x8a>
		case OVERHEATING:
			snprintf(message_text.string, message_text.length + 1, "! Overheating !");
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <display_message+0xcc>)
 80010c0:	7fdb      	ldrb	r3, [r3, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	0019      	movs	r1, r3
 80010c6:	4a1d      	ldr	r2, [pc, #116]	@ (800113c <display_message+0xe0>)
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <display_message+0xd4>)
 80010ca:	0018      	movs	r0, r3
 80010cc:	f006 f83a 	bl	8007144 <sniprintf>
			break;
 80010d0:	e009      	b.n	80010e6 <display_message+0x8a>
		default:
			snprintf(message_text.string, message_text.length + 1, "Unknown error");
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <display_message+0xcc>)
 80010d4:	7fdb      	ldrb	r3, [r3, #31]
 80010d6:	3301      	adds	r3, #1
 80010d8:	0019      	movs	r1, r3
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <display_message+0xe4>)
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <display_message+0xd4>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f006 f830 	bl	8007144 <sniprintf>
			break;
 80010e4:	46c0      	nop			@ (mov r8, r8)
	}

	ssd1306_Fill(Black);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 fe74 	bl	8001dd4 <ssd1306_Fill>
	ssd1306_DrawRectangle(MSG_R_X1, MSG_R_Y1, MSG_R_X2, MSG_R_Y2, White);
 80010ec:	2301      	movs	r3, #1
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	232a      	movs	r3, #42	@ 0x2a
 80010f2:	227a      	movs	r2, #122	@ 0x7a
 80010f4:	2115      	movs	r1, #21
 80010f6:	2005      	movs	r0, #5
 80010f8:	f001 f890 	bl	800221c <ssd1306_DrawRectangle>
	write_string(message_text);
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <display_message+0xcc>)
 80010fe:	466a      	mov	r2, sp
 8001100:	0011      	movs	r1, r2
 8001102:	001a      	movs	r2, r3
 8001104:	3210      	adds	r2, #16
 8001106:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001108:	c131      	stmia	r1!, {r0, r4, r5}
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	600a      	str	r2, [r1, #0]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	6859      	ldr	r1, [r3, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f7ff fdc3 	bl	8000ca0 <write_string>
	ssd1306_UpdateScreen();
 800111a:	f000 fe7f 	bl	8001e1c <ssd1306_UpdateScreen>
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bdb0      	pop	{r4, r5, r7, pc}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	20000100 	.word	0x20000100
 800112c:	08007b24 	.word	0x08007b24
 8001130:	20000109 	.word	0x20000109
 8001134:	08007b30 	.word	0x08007b30
 8001138:	08007b40 	.word	0x08007b40
 800113c:	08007b50 	.word	0x08007b50
 8001140:	08007b60 	.word	0x08007b60

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 ff58 	bl	8002ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f817 	bl	800117e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fa84 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8001154:	f000 fa64 	bl	8001620 <MX_DMA_Init>
  MX_ADC_Init();
 8001158:	f000 f880 	bl	800125c <MX_ADC_Init>
  MX_SPI1_Init();
 800115c:	f000 f918 	bl	8001390 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001160:	f000 f956 	bl	8001410 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001164:	f000 f9b6 	bl	80014d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001168:	f000 f9ee 	bl	8001548 <MX_TIM7_Init>
  MX_I2C1_Init();
 800116c:	f000 f8d0 	bl	8001310 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001170:	f000 fa26 	bl	80015c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  opensolder_init();
 8001174:	f000 fb30 	bl	80017d8 <opensolder_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	opensolder_main();
 8001178:	f000 fb7e 	bl	8001878 <opensolder_main>
 800117c:	e7fc      	b.n	8001178 <main+0x34>

0800117e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b099      	sub	sp, #100	@ 0x64
 8001182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001184:	242c      	movs	r4, #44	@ 0x2c
 8001186:	193b      	adds	r3, r7, r4
 8001188:	0018      	movs	r0, r3
 800118a:	2334      	movs	r3, #52	@ 0x34
 800118c:	001a      	movs	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	f006 f80c 	bl	80071ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	231c      	movs	r3, #28
 8001196:	18fb      	adds	r3, r7, r3
 8001198:	0018      	movs	r0, r3
 800119a:	2310      	movs	r3, #16
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f006 f804 	bl	80071ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	003b      	movs	r3, r7
 80011a6:	0018      	movs	r0, r3
 80011a8:	231c      	movs	r3, #28
 80011aa:	001a      	movs	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	f005 fffd 	bl	80071ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80011b2:	0021      	movs	r1, r4
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2213      	movs	r2, #19
 80011b8:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2201      	movs	r2, #1
 80011be:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2201      	movs	r2, #1
 80011c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2201      	movs	r2, #1
 80011ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	2210      	movs	r2, #16
 80011d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2210      	movs	r2, #16
 80011d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	2202      	movs	r2, #2
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	0252      	lsls	r2, r2, #9
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	0352      	lsls	r2, r2, #13
 80011ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	0018      	movs	r0, r3
 80011f8:	f003 fd30 	bl	8004c5c <HAL_RCC_OscConfig>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001200:	f000 fae4 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	211c      	movs	r1, #28
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2202      	movs	r2, #2
 8001210:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001212:	187b      	adds	r3, r7, r1
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2101      	movs	r1, #1
 8001222:	0018      	movs	r0, r3
 8001224:	f004 f8a0 	bl	8005368 <HAL_RCC_ClockConfig>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800122c:	f000 face 	bl	80017cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001230:	003b      	movs	r3, r7
 8001232:	2221      	movs	r2, #33	@ 0x21
 8001234:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001236:	003b      	movs	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001242:	003b      	movs	r3, r7
 8001244:	0018      	movs	r0, r3
 8001246:	f004 f9fb 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800124e:	f000 fabd 	bl	80017cc <Error_Handler>
  }
}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b019      	add	sp, #100	@ 0x64
 8001258:	bd90      	pop	{r4, r7, pc}
	...

0800125c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	0018      	movs	r0, r3
 8001266:	230c      	movs	r3, #12
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f005 ff9e 	bl	80071ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001270:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <MX_ADC_Init+0xac>)
 8001272:	4a26      	ldr	r2, [pc, #152]	@ (800130c <MX_ADC_Init+0xb0>)
 8001274:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001276:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <MX_ADC_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <MX_ADC_Init+0xac>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC_Init+0xac>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_ADC_Init+0xac>)
 800128a:	2201      	movs	r2, #1
 800128c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_ADC_Init+0xac>)
 8001290:	2204      	movs	r2, #4
 8001292:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_ADC_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ADC_Init+0xac>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_ADC_Init+0xac>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_ADC_Init+0xac>)
 80012ae:	22c2      	movs	r2, #194	@ 0xc2
 80012b0:	32ff      	adds	r2, #255	@ 0xff
 80012b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_ADC_Init+0xac>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_ADC_Init+0xac>)
 80012bc:	2224      	movs	r2, #36	@ 0x24
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_ADC_Init+0xac>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_ADC_Init+0xac>)
 80012ca:	0018      	movs	r0, r3
 80012cc:	f001 ff1e 	bl	800310c <HAL_ADC_Init>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f000 fa7a 	bl	80017cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0152      	lsls	r2, r2, #5
 80012e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2207      	movs	r2, #7
 80012ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012ec:	1d3a      	adds	r2, r7, #4
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_ADC_Init+0xac>)
 80012f0:	0011      	movs	r1, r2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 f8dc 	bl	80034b0 <HAL_ADC_ConfigChannel>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80012fc:	f000 fa66 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b004      	add	sp, #16
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001c0 	.word	0x200001c0
 800130c:	40012400 	.word	0x40012400

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <MX_I2C1_Init+0x78>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800131a:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_I2C1_Init+0x74>)
 800131c:	4a1b      	ldr	r2, [pc, #108]	@ (800138c <MX_I2C1_Init+0x7c>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001326:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001328:	2201      	movs	r2, #1
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_I2C1_Init+0x74>)
 800134c:	0018      	movs	r0, r3
 800134e:	f002 ffb1 	bl	80042b4 <HAL_I2C_Init>
 8001352:	1e03      	subs	r3, r0, #0
 8001354:	d001      	beq.n	800135a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001356:	f000 fa39 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_I2C1_Init+0x74>)
 800135c:	2100      	movs	r1, #0
 800135e:	0018      	movs	r0, r3
 8001360:	f003 fbe4 	bl	8004b2c <HAL_I2CEx_ConfigAnalogFilter>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001368:	f000 fa30 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <MX_I2C1_Init+0x74>)
 800136e:	2100      	movs	r1, #0
 8001370:	0018      	movs	r0, r3
 8001372:	f003 fc27 	bl	8004bc4 <HAL_I2CEx_ConfigDigitalFilter>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800137a:	f000 fa27 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000244 	.word	0x20000244
 8001388:	40005400 	.word	0x40005400
 800138c:	2000090e 	.word	0x2000090e

08001390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_SPI1_Init+0x78>)
 8001396:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <MX_SPI1_Init+0x7c>)
 8001398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_SPI1_Init+0x78>)
 800139c:	2282      	movs	r2, #130	@ 0x82
 800139e:	0052      	lsls	r2, r2, #1
 80013a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013ac:	22e0      	movs	r2, #224	@ 0xe0
 80013ae:	00d2      	lsls	r2, r2, #3
 80013b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013c0:	2280      	movs	r2, #128	@ 0x80
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013c8:	2220      	movs	r2, #32
 80013ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013ec:	2208      	movs	r2, #8
 80013ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <MX_SPI1_Init+0x78>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f004 fa22 	bl	800583c <HAL_SPI_Init>
 80013f8:	1e03      	subs	r3, r0, #0
 80013fa:	d001      	beq.n	8001400 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f9e6 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	20000298 	.word	0x20000298
 800140c:	40013000 	.word	0x40013000

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b08d      	sub	sp, #52	@ 0x34
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001416:	240c      	movs	r4, #12
 8001418:	193b      	adds	r3, r7, r4
 800141a:	0018      	movs	r0, r3
 800141c:	2324      	movs	r3, #36	@ 0x24
 800141e:	001a      	movs	r2, r3
 8001420:	2100      	movs	r1, #0
 8001422:	f005 fec3 	bl	80071ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	0018      	movs	r0, r3
 800142a:	2308      	movs	r3, #8
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f005 febc 	bl	80071ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 8001436:	2280      	movs	r2, #128	@ 0x80
 8001438:	05d2      	lsls	r2, r2, #23
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0x3;
 800143c:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 800143e:	2203      	movs	r2, #3
 8001440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001448:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 800144a:	2201      	movs	r2, #1
 800144c:	4252      	negs	r2, r2
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145c:	0021      	movs	r1, r4
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2203      	movs	r2, #3
 8001462:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2202      	movs	r2, #2
 8001468:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2201      	movs	r2, #1
 800146e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 5;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2205      	movs	r2, #5
 800147a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2202      	movs	r2, #2
 8001480:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001482:	187b      	adds	r3, r7, r1
 8001484:	2201      	movs	r2, #1
 8001486:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 5;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2205      	movs	r2, #5
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001494:	187a      	adds	r2, r7, r1
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 8001498:	0011      	movs	r1, r2
 800149a:	0018      	movs	r0, r3
 800149c:	f004 fe2c 	bl	80060f8 <HAL_TIM_Encoder_Init>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80014a4:	f000 f992 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b4:	1d3a      	adds	r2, r7, #4
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_TIM2_Init+0xc0>)
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f005 f928 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80014c4:	f000 f982 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b00d      	add	sp, #52	@ 0x34
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	200002fc 	.word	0x200002fc

080014d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	003b      	movs	r3, r7
 80014dc:	0018      	movs	r0, r3
 80014de:	2308      	movs	r3, #8
 80014e0:	001a      	movs	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	f005 fe62 	bl	80071ac <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_TIM6_Init+0x6c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <MX_TIM6_Init+0x70>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 47;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_TIM6_Init+0x6c>)
 80014f0:	222f      	movs	r2, #47	@ 0x2f
 80014f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_TIM6_Init+0x6c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 90;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_TIM6_Init+0x6c>)
 80014fc:	225a      	movs	r2, #90	@ 0x5a
 80014fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_TIM6_Init+0x6c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_TIM6_Init+0x6c>)
 8001508:	0018      	movs	r0, r3
 800150a:	f004 fd25 	bl	8005f58 <HAL_TIM_Base_Init>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001512:	f000 f95b 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	003b      	movs	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	003b      	movs	r3, r7
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001522:	003a      	movs	r2, r7
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_TIM6_Init+0x6c>)
 8001526:	0011      	movs	r1, r2
 8001528:	0018      	movs	r0, r3
 800152a:	f005 f8f1 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	1e03      	subs	r3, r0, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001532:	f000 f94b 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	20000344 	.word	0x20000344
 8001544:	40001000 	.word	0x40001000

08001548 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	003b      	movs	r3, r7
 8001550:	0018      	movs	r0, r3
 8001552:	2308      	movs	r3, #8
 8001554:	001a      	movs	r2, r3
 8001556:	2100      	movs	r1, #0
 8001558:	f005 fe28 	bl	80071ac <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 800155e:	4a16      	ldr	r2, [pc, #88]	@ (80015b8 <MX_TIM7_Init+0x70>)
 8001560:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 8001564:	222f      	movs	r2, #47	@ 0x2f
 8001566:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <MX_TIM7_Init+0x74>)
 8001572:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 800157c:	0018      	movs	r0, r3
 800157e:	f004 fceb 	bl	8005f58 <HAL_TIM_Base_Init>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001586:	f000 f921 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158a:	003b      	movs	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	003b      	movs	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001596:	003a      	movs	r2, r7
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_TIM7_Init+0x6c>)
 800159a:	0011      	movs	r1, r2
 800159c:	0018      	movs	r0, r3
 800159e:	f005 f8b7 	bl	8006710 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80015a6:	f000 f911 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	2000038c 	.word	0x2000038c
 80015b8:	40001400 	.word	0x40001400
 80015bc:	000007cf 	.word	0x000007cf

080015c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015c6:	4a15      	ldr	r2, [pc, #84]	@ (800161c <MX_USART1_UART_Init+0x5c>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015cc:	22e1      	movs	r2, #225	@ 0xe1
 80015ce:	0252      	lsls	r2, r2, #9
 80015d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <MX_USART1_UART_Init+0x58>)
 8001604:	0018      	movs	r0, r3
 8001606:	f005 f8f1 	bl	80067ec <HAL_UART_Init>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800160e:	f000 f8dd 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200003d4 	.word	0x200003d4
 800161c:	40013800 	.word	0x40013800

08001620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_DMA_Init+0x38>)
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <MX_DMA_Init+0x38>)
 800162c:	2101      	movs	r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_DMA_Init+0x38>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2009      	movs	r0, #9
 8001644:	f002 fa9e 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001648:	2009      	movs	r0, #9
 800164a:	f002 fab0 	bl	8003bae <HAL_NVIC_EnableIRQ>

}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	40021000 	.word	0x40021000

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	240c      	movs	r4, #12
 8001664:	193b      	adds	r3, r7, r4
 8001666:	0018      	movs	r0, r3
 8001668:	2314      	movs	r3, #20
 800166a:	001a      	movs	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f005 fd9d 	bl	80071ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b54      	ldr	r3, [pc, #336]	@ (80017c4 <MX_GPIO_Init+0x168>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <MX_GPIO_Init+0x168>)
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	03c9      	lsls	r1, r1, #15
 800167c:	430a      	orrs	r2, r1
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <MX_GPIO_Init+0x168>)
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	03db      	lsls	r3, r3, #15
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b4d      	ldr	r3, [pc, #308]	@ (80017c4 <MX_GPIO_Init+0x168>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <MX_GPIO_Init+0x168>)
 8001694:	2180      	movs	r1, #128	@ 0x80
 8001696:	0289      	lsls	r1, r1, #10
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <MX_GPIO_Init+0x168>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	4013      	ands	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <MX_GPIO_Init+0x168>)
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	4b45      	ldr	r3, [pc, #276]	@ (80017c4 <MX_GPIO_Init+0x168>)
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	02c9      	lsls	r1, r1, #11
 80016b4:	430a      	orrs	r2, r1
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	4b42      	ldr	r3, [pc, #264]	@ (80017c4 <MX_GPIO_Init+0x168>)
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	02db      	lsls	r3, r3, #11
 80016c0:	4013      	ands	r3, r2
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 80016c6:	2390      	movs	r3, #144	@ 0x90
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	2200      	movs	r2, #0
 80016cc:	2108      	movs	r1, #8
 80016ce:	0018      	movs	r0, r3
 80016d0:	f002 fdb7 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RES_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80016d4:	4b3c      	ldr	r3, [pc, #240]	@ (80017c8 <MX_GPIO_Init+0x16c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	2107      	movs	r1, #7
 80016da:	0018      	movs	r0, r3
 80016dc:	f002 fdb1 	bl	8004242 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TIP_CHECK_Pin TIP_CLAMP_Pin */
  GPIO_InitStruct.Pin = TIP_CHECK_Pin|TIP_CLAMP_Pin;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2206      	movs	r2, #6
 80016e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	193a      	adds	r2, r7, r4
 80016f4:	2390      	movs	r3, #144	@ 0x90
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f002 fc0c 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_Pin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2208      	movs	r2, #8
 8001704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2201      	movs	r2, #1
 800170a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	193b      	adds	r3, r7, r4
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8001718:	193a      	adds	r2, r7, r4
 800171a:	2390      	movs	r3, #144	@ 0x90
 800171c:	05db      	lsls	r3, r3, #23
 800171e:	0011      	movs	r1, r2
 8001720:	0018      	movs	r0, r3
 8001722:	f002 fbf9 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_CROSS_Pin */
  GPIO_InitStruct.Pin = ZERO_CROSS_Pin;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2210      	movs	r2, #16
 800172a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2288      	movs	r2, #136	@ 0x88
 8001730:	0352      	lsls	r2, r2, #13
 8001732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	193b      	adds	r3, r7, r4
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZERO_CROSS_GPIO_Port, &GPIO_InitStruct);
 800173a:	193a      	adds	r2, r7, r4
 800173c:	2390      	movs	r3, #144	@ 0x90
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	0011      	movs	r1, r2
 8001742:	0018      	movs	r0, r3
 8001744:	f002 fbe8 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_Pin DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = RES_Pin|DC_Pin|CS_Pin;
 8001748:	193b      	adds	r3, r7, r4
 800174a:	2207      	movs	r2, #7
 800174c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	193b      	adds	r3, r7, r4
 8001750:	2201      	movs	r2, #1
 8001752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	193b      	adds	r3, r7, r4
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	193b      	adds	r3, r7, r4
 8001762:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <MX_GPIO_Init+0x16c>)
 8001764:	0019      	movs	r1, r3
 8001766:	0010      	movs	r0, r2
 8001768:	f002 fbd6 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_SW_Pin TIP_REMOVER_Pin STAND_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin|TIP_REMOVER_Pin|STAND_Pin;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2270      	movs	r2, #112	@ 0x70
 8001770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	193b      	adds	r3, r7, r4
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <MX_GPIO_Init+0x16c>)
 8001782:	0019      	movs	r1, r3
 8001784:	0010      	movs	r0, r2
 8001786:	f002 fbc7 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OS_Pin */
  GPIO_InitStruct.Pin = OS_Pin;
 800178a:	0021      	movs	r1, r4
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2280      	movs	r2, #128	@ 0x80
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2201      	movs	r2, #1
 800179e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OS_GPIO_Port, &GPIO_InitStruct);
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	4a09      	ldr	r2, [pc, #36]	@ (80017c8 <MX_GPIO_Init+0x16c>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f002 fbb6 	bl	8003f18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2007      	movs	r0, #7
 80017b2:	f002 f9e7 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017b6:	2007      	movs	r0, #7
 80017b8:	f002 f9f9 	bl	8003bae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b009      	add	sp, #36	@ 0x24
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000400 	.word	0x48000400

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	e7fd      	b.n	80017d4 <Error_Handler+0x8>

080017d8 <opensolder_init>:
static uint8_t tip_change_state;
static uint8_t mmi_button_event;
static uint8_t mmi_encoder_event;

/******    Init    ******/
void opensolder_init(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <opensolder_init+0x40>)
 80017de:	213c      	movs	r1, #60	@ 0x3c
 80017e0:	0018      	movs	r0, r3
 80017e2:	f004 fd31 	bl	8006248 <HAL_TIM_Encoder_Start>
	HAL_I2C_Init(&hi2c1);
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <opensolder_init+0x44>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f002 fd63 	bl	80042b4 <HAL_I2C_Init>
	HAL_ADCEx_Calibration_Start(&hadc);
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <opensolder_init+0x48>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f002 f873 	bl	80038dc <HAL_ADCEx_Calibration_Start>
	HAL_Delay(50); // Wait for calibration to finish
 80017f6:	2032      	movs	r0, #50	@ 0x32
 80017f8:	f001 fc64 	bl	80030c4 <HAL_Delay>
	init_mmi();
 80017fc:	f000 f814 	bl	8001828 <init_mmi>
	init_display(SPLASHSCREEN_TIMEOUT_MS);
 8001800:	23fa      	movs	r3, #250	@ 0xfa
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff f9db 	bl	8000bc0 <init_display>
	system_state = INIT_STATE;
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <opensolder_init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	200002fc 	.word	0x200002fc
 800181c:	20000244 	.word	0x20000244
 8001820:	200001c0 	.word	0x200001c0
 8001824:	2000045c 	.word	0x2000045c

08001828 <init_mmi>:

void init_mmi(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	button_init(&tool_holder_sensor, STAND_GPIO_Port, STAND_Pin, INVERTED);
 800182c:	490d      	ldr	r1, [pc, #52]	@ (8001864 <init_mmi+0x3c>)
 800182e:	480e      	ldr	r0, [pc, #56]	@ (8001868 <init_mmi+0x40>)
 8001830:	2364      	movs	r3, #100	@ 0x64
 8001832:	2240      	movs	r2, #64	@ 0x40
 8001834:	f7ff f856 	bl	80008e4 <button_init>
	button_init(&tip_change_sensor, TIP_REMOVER_GPIO_Port, TIP_REMOVER_Pin, INVERTED);
 8001838:	490a      	ldr	r1, [pc, #40]	@ (8001864 <init_mmi+0x3c>)
 800183a:	480c      	ldr	r0, [pc, #48]	@ (800186c <init_mmi+0x44>)
 800183c:	2364      	movs	r3, #100	@ 0x64
 800183e:	2220      	movs	r2, #32
 8001840:	f7ff f850 	bl	80008e4 <button_init>
	button_init(&mmi_button, ENC_SW_GPIO_Port, ENC_SW_Pin, INVERTED);
 8001844:	4907      	ldr	r1, [pc, #28]	@ (8001864 <init_mmi+0x3c>)
 8001846:	480a      	ldr	r0, [pc, #40]	@ (8001870 <init_mmi+0x48>)
 8001848:	2364      	movs	r3, #100	@ 0x64
 800184a:	2210      	movs	r2, #16
 800184c:	f7ff f84a 	bl	80008e4 <button_init>
	encoder_init(&mmi_encoder, TIM2);
 8001850:	2380      	movs	r3, #128	@ 0x80
 8001852:	05da      	lsls	r2, r3, #23
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <init_mmi+0x4c>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff f8fa 	bl	8000a52 <encoder_init>
}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	48000400 	.word	0x48000400
 8001868:	20000460 	.word	0x20000460
 800186c:	20000470 	.word	0x20000470
 8001870:	20000480 	.word	0x20000480
 8001874:	20000490 	.word	0x20000490

08001878 <opensolder_main>:

/******    Main    ******/
void opensolder_main(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	read_mmi();
 800187c:	f000 f916 	bl	8001aac <read_mmi>
	state_machine();
 8001880:	f000 f804 	bl	800188c <state_machine>
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <state_machine>:

/******    State Machine    ******/
static void state_machine(void) {
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b098      	sub	sp, #96	@ 0x60
 8001890:	af02      	add	r7, sp, #8
	static uint32_t standby_timeout_tick_ms = 0;
	static uint32_t tip_insert_delay_tick_ms = 0;
	uint8_t tool_tip_state = get_tip_state();
 8001892:	2357      	movs	r3, #87	@ 0x57
 8001894:	18fc      	adds	r4, r7, r3
 8001896:	f001 fb43 	bl	8002f20 <get_tip_state>
 800189a:	0003      	movs	r3, r0
 800189c:	7023      	strb	r3, [r4, #0]

	if (HAL_GetTick() > get_ac_delay_tick()) {
 800189e:	f001 fc07 	bl	80030b0 <HAL_GetTick>
 80018a2:	0004      	movs	r4, r0
 80018a4:	f001 fb04 	bl	8002eb0 <get_ac_delay_tick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	429c      	cmp	r4, r3
 80018ac:	d91d      	bls.n	80018ea <state_machine+0x5e>
		char tx_buff[26];
		snprintf(tx_buff, sizeof(tx_buff), "Error: AC not detected\r\n", HAL_GetTick(), get_ac_delay_tick());
 80018ae:	f001 fbff 	bl	80030b0 <HAL_GetTick>
 80018b2:	0004      	movs	r4, r0
 80018b4:	f001 fafc 	bl	8002eb0 <get_ac_delay_tick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	4a71      	ldr	r2, [pc, #452]	@ (8001a80 <state_machine+0x1f4>)
 80018bc:	2520      	movs	r5, #32
 80018be:	1978      	adds	r0, r7, r5
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	0023      	movs	r3, r4
 80018c4:	211a      	movs	r1, #26
 80018c6:	f005 fc3d 	bl	8007144 <sniprintf>
		HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 80018ca:	23fa      	movs	r3, #250	@ 0xfa
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	1979      	adds	r1, r7, r5
 80018d0:	486c      	ldr	r0, [pc, #432]	@ (8001a84 <state_machine+0x1f8>)
 80018d2:	221a      	movs	r2, #26
 80018d4:	f004 ffde 	bl	8006894 <HAL_UART_Transmit>
		error_handler();
 80018d8:	f001 fb2e 	bl	8002f38 <error_handler>
		display_message(AC_NOT_DETECTED);
 80018dc:	2006      	movs	r0, #6
 80018de:	f7ff fbbd 	bl	800105c <display_message>
		system_state = ERROR_STATE;
 80018e2:	4b69      	ldr	r3, [pc, #420]	@ (8001a88 <state_machine+0x1fc>)
 80018e4:	2205      	movs	r2, #5
 80018e6:	701a      	strb	r2, [r3, #0]
 80018e8:	e0c7      	b.n	8001a7a <state_machine+0x1ee>
		return;
	}

	char tx_buff[25];
	snprintf(tx_buff, sizeof(tx_buff), "System state %d\r\n", system_state);
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <state_machine+0x1fc>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <state_machine+0x200>)
 80018f0:	243c      	movs	r4, #60	@ 0x3c
 80018f2:	1938      	adds	r0, r7, r4
 80018f4:	2119      	movs	r1, #25
 80018f6:	f005 fc25 	bl	8007144 <sniprintf>
	HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 80018fa:	23fa      	movs	r3, #250	@ 0xfa
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	1939      	adds	r1, r7, r4
 8001900:	4860      	ldr	r0, [pc, #384]	@ (8001a84 <state_machine+0x1f8>)
 8001902:	2219      	movs	r2, #25
 8001904:	f004 ffc6 	bl	8006894 <HAL_UART_Transmit>

	switch (system_state) {
 8001908:	4b5f      	ldr	r3, [pc, #380]	@ (8001a88 <state_machine+0x1fc>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d900      	bls.n	8001912 <state_machine+0x86>
 8001910:	e0ae      	b.n	8001a70 <state_machine+0x1e4>
 8001912:	009a      	lsls	r2, r3, #2
 8001914:	4b5e      	ldr	r3, [pc, #376]	@ (8001a90 <state_machine+0x204>)
 8001916:	18d3      	adds	r3, r2, r3
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	469f      	mov	pc, r3
		case INIT_STATE:
			heater_off();
 800191c:	f001 fad2 	bl	8002ec4 <heater_off>
			draw_default_display();
 8001920:	f7ff fa36 	bl	8000d90 <draw_default_display>
			system_state = TIP_CHANGE_STATE;
 8001924:	4b58      	ldr	r3, [pc, #352]	@ (8001a88 <state_machine+0x1fc>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			break;
 800192a:	e0a6      	b.n	8001a7a <state_machine+0x1ee>

		case TIP_CHANGE_STATE: {
			heater_off();
 800192c:	f001 faca 	bl	8002ec4 <heater_off>

			if (tool_tip_state != TIP_DETECTED) {
 8001930:	2457      	movs	r4, #87	@ 0x57
 8001932:	193b      	adds	r3, r7, r4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d00e      	beq.n	8001958 <state_machine+0xcc>
				tip_insert_delay_tick_ms = HAL_GetTick() + TIP_CHANGE_DELAY_MS;
 800193a:	f001 fbb9 	bl	80030b0 <HAL_GetTick>
 800193e:	0003      	movs	r3, r0
 8001940:	22fa      	movs	r2, #250	@ 0xfa
 8001942:	00d2      	lsls	r2, r2, #3
 8001944:	189a      	adds	r2, r3, r2
 8001946:	4b53      	ldr	r3, [pc, #332]	@ (8001a94 <state_machine+0x208>)
 8001948:	601a      	str	r2, [r3, #0]
				display_message(tool_tip_state);
 800194a:	193b      	adds	r3, r7, r4
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fb83 	bl	800105c <display_message>
			} else if ((tool_tip_state == TIP_DETECTED) && (HAL_GetTick() > tip_insert_delay_tick_ms) && !tip_change_state) {
				draw_default_display();
				system_state = OFF_STATE;
			}
		} break;
 8001956:	e08f      	b.n	8001a78 <state_machine+0x1ec>
			} else if ((tool_tip_state == TIP_DETECTED) && (HAL_GetTick() > tip_insert_delay_tick_ms) && !tip_change_state) {
 8001958:	2357      	movs	r3, #87	@ 0x57
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d000      	beq.n	8001964 <state_machine+0xd8>
 8001962:	e089      	b.n	8001a78 <state_machine+0x1ec>
 8001964:	f001 fba4 	bl	80030b0 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <state_machine+0x208>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d800      	bhi.n	8001974 <state_machine+0xe8>
 8001972:	e081      	b.n	8001a78 <state_machine+0x1ec>
 8001974:	4b48      	ldr	r3, [pc, #288]	@ (8001a98 <state_machine+0x20c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d000      	beq.n	800197e <state_machine+0xf2>
 800197c:	e07c      	b.n	8001a78 <state_machine+0x1ec>
				draw_default_display();
 800197e:	f7ff fa07 	bl	8000d90 <draw_default_display>
				system_state = OFF_STATE;
 8001982:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <state_machine+0x1fc>)
 8001984:	2202      	movs	r2, #2
 8001986:	701a      	strb	r2, [r3, #0]
		} break;
 8001988:	e076      	b.n	8001a78 <state_machine+0x1ec>

		case OFF_STATE:
			heater_off();
 800198a:	f001 fa9b 	bl	8002ec4 <heater_off>

			if (tip_change_state || (tool_tip_state != TIP_DETECTED)) {
 800198e:	4b42      	ldr	r3, [pc, #264]	@ (8001a98 <state_machine+0x20c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d104      	bne.n	80019a0 <state_machine+0x114>
 8001996:	2357      	movs	r3, #87	@ 0x57
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d003      	beq.n	80019a8 <state_machine+0x11c>
				system_state = TIP_CHANGE_STATE;
 80019a0:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <state_machine+0x1fc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e006      	b.n	80019b6 <state_machine+0x12a>
			} else if (!tool_holder_state) {
 80019a8:	4b3c      	ldr	r3, [pc, #240]	@ (8001a9c <state_machine+0x210>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <state_machine+0x12a>
				system_state = ON_STATE;
 80019b0:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <state_machine+0x1fc>)
 80019b2:	2203      	movs	r2, #3
 80019b4:	701a      	strb	r2, [r3, #0]
			}
			update_display();
 80019b6:	f7ff fa53 	bl	8000e60 <update_display>
			break;
 80019ba:	e05e      	b.n	8001a7a <state_machine+0x1ee>

		case ON_STATE:
			if (tip_change_state || (tool_tip_state != TIP_DETECTED)) {
 80019bc:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <state_machine+0x20c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d104      	bne.n	80019ce <state_machine+0x142>
 80019c4:	2357      	movs	r3, #87	@ 0x57
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d003      	beq.n	80019d6 <state_machine+0x14a>
				system_state = TIP_CHANGE_STATE;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <state_machine+0x1fc>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e00d      	b.n	80019f2 <state_machine+0x166>
			} else if (tool_holder_state) {
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <state_machine+0x210>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <state_machine+0x166>
				standby_timeout_tick_ms = HAL_GetTick() + (STANDBY_TIME_S * 1000);
 80019de:	f001 fb67 	bl	80030b0 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	4a2e      	ldr	r2, [pc, #184]	@ (8001aa0 <state_machine+0x214>)
 80019e6:	189a      	adds	r2, r3, r2
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <state_machine+0x218>)
 80019ea:	601a      	str	r2, [r3, #0]
				system_state = STANDBY_STATE;
 80019ec:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <state_machine+0x1fc>)
 80019ee:	2204      	movs	r2, #4
 80019f0:	701a      	strb	r2, [r3, #0]
			}
			update_display();
 80019f2:	f7ff fa35 	bl	8000e60 <update_display>
			break;
 80019f6:	e040      	b.n	8001a7a <state_machine+0x1ee>

		case STANDBY_STATE:
			if (tip_change_state || (tool_tip_state != TIP_DETECTED)) {
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <state_machine+0x20c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <state_machine+0x17e>
 8001a00:	2357      	movs	r3, #87	@ 0x57
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d003      	beq.n	8001a12 <state_machine+0x186>
				system_state = TIP_CHANGE_STATE;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <state_machine+0x1fc>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e011      	b.n	8001a36 <state_machine+0x1aa>
			} else if (!tool_holder_state) {
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <state_machine+0x210>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d103      	bne.n	8001a22 <state_machine+0x196>
				system_state = ON_STATE;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <state_machine+0x1fc>)
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e009      	b.n	8001a36 <state_machine+0x1aa>
			} else if (HAL_GetTick() > standby_timeout_tick_ms) {
 8001a22:	f001 fb45 	bl	80030b0 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <state_machine+0x218>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d902      	bls.n	8001a36 <state_machine+0x1aa>
				system_state = OFF_STATE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <state_machine+0x1fc>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	701a      	strb	r2, [r3, #0]
			}
			update_display();
 8001a36:	f7ff fa13 	bl	8000e60 <update_display>
			break;
 8001a3a:	e01e      	b.n	8001a7a <state_machine+0x1ee>

		case ERROR_STATE:
			char tx_buff[26];
			snprintf(tx_buff, sizeof(tx_buff), "Error: FSM error state\r\n", HAL_GetTick(), get_ac_delay_tick());
 8001a3c:	f001 fb38 	bl	80030b0 <HAL_GetTick>
 8001a40:	0004      	movs	r4, r0
 8001a42:	f001 fa35 	bl	8002eb0 <get_ac_delay_tick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <state_machine+0x21c>)
 8001a4a:	1d38      	adds	r0, r7, #4
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	0023      	movs	r3, r4
 8001a50:	211a      	movs	r1, #26
 8001a52:	f005 fb77 	bl	8007144 <sniprintf>
			HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 8001a56:	23fa      	movs	r3, #250	@ 0xfa
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	1d39      	adds	r1, r7, #4
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <state_machine+0x1f8>)
 8001a5e:	221a      	movs	r2, #26
 8001a60:	f004 ff18 	bl	8006894 <HAL_UART_Transmit>
			error_handler();
 8001a64:	f001 fa68 	bl	8002f38 <error_handler>
			system_state = INIT_STATE;
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <state_machine+0x1fc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
			break;
 8001a6e:	e004      	b.n	8001a7a <state_machine+0x1ee>

		default:
			system_state = ERROR_STATE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <state_machine+0x1fc>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	701a      	strb	r2, [r3, #0]
			break;
 8001a76:	e000      	b.n	8001a7a <state_machine+0x1ee>
		} break;
 8001a78:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b016      	add	sp, #88	@ 0x58
 8001a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a80:	08007b70 	.word	0x08007b70
 8001a84:	200003d4 	.word	0x200003d4
 8001a88:	2000045c 	.word	0x2000045c
 8001a8c:	08007b8c 	.word	0x08007b8c
 8001a90:	08007c48 	.word	0x08007c48
 8001a94:	200004a4 	.word	0x200004a4
 8001a98:	200004a1 	.word	0x200004a1
 8001a9c:	200004a0 	.word	0x200004a0
 8001aa0:	000493e0 	.word	0x000493e0
 8001aa4:	200004a8 	.word	0x200004a8
 8001aa8:	08007ba0 	.word	0x08007ba0

08001aac <read_mmi>:

/******    Other Functions   ******/
void read_mmi(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	mmi_button_event = button_event(&mmi_button);
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <read_mmi+0x104>)
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe ff3e 	bl	8000936 <button_event>
 8001aba:	0003      	movs	r3, r0
 8001abc:	001a      	movs	r2, r3
 8001abe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb4 <read_mmi+0x108>)
 8001ac0:	701a      	strb	r2, [r3, #0]
	mmi_encoder_event = encoder_event(&mmi_encoder);
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <read_mmi+0x10c>)
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7fe ffed 	bl	8000aa4 <encoder_event>
 8001aca:	0003      	movs	r3, r0
 8001acc:	001a      	movs	r2, r3
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <read_mmi+0x110>)
 8001ad0:	701a      	strb	r2, [r3, #0]

	static uint32_t standby_delay_tick_ms = 0;
	static uint32_t tip_change_delay_tick_ms = 0;

	if (button_state(&tool_holder_sensor)) {
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <read_mmi+0x114>)
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7fe ff4c 	bl	8000972 <button_state>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d00b      	beq.n	8001af6 <read_mmi+0x4a>
		tool_holder_state = SET;
 8001ade:	4b39      	ldr	r3, [pc, #228]	@ (8001bc4 <read_mmi+0x118>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
		standby_delay_tick_ms = HAL_GetTick() + STANDBY_DELAY_MS;
 8001ae4:	f001 fae4 	bl	80030b0 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	332d      	adds	r3, #45	@ 0x2d
 8001aec:	33ff      	adds	r3, #255	@ 0xff
 8001aee:	001a      	movs	r2, r3
 8001af0:	4b35      	ldr	r3, [pc, #212]	@ (8001bc8 <read_mmi+0x11c>)
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e009      	b.n	8001b0a <read_mmi+0x5e>
	} else if (HAL_GetTick() > standby_delay_tick_ms) {
 8001af6:	f001 fadb 	bl	80030b0 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <read_mmi+0x11c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d902      	bls.n	8001b0a <read_mmi+0x5e>
		tool_holder_state = RESET;
 8001b04:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc4 <read_mmi+0x118>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
	}

	if (button_state(&tip_change_sensor)) {
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <read_mmi+0x120>)
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe ff30 	bl	8000972 <button_state>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d00b      	beq.n	8001b2e <read_mmi+0x82>
		tip_change_state = SET;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <read_mmi+0x124>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		tip_change_delay_tick_ms = HAL_GetTick() + TIP_CHANGE_DELAY_MS;
 8001b1c:	f001 fac8 	bl	80030b0 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	22fa      	movs	r2, #250	@ 0xfa
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	189a      	adds	r2, r3, r2
 8001b28:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <read_mmi+0x128>)
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e009      	b.n	8001b42 <read_mmi+0x96>
	} else if (HAL_GetTick() > tip_change_delay_tick_ms) {
 8001b2e:	f001 fabf 	bl	80030b0 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <read_mmi+0x128>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d902      	bls.n	8001b42 <read_mmi+0x96>
		tip_change_state = RESET;
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <read_mmi+0x124>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
	}

	if (mmi_encoder_event != NO_CHANGE) {
 8001b42:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <read_mmi+0x110>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b33      	cmp	r3, #51	@ 0x33
 8001b48:	d02d      	beq.n	8001ba6 <read_mmi+0xfa>
		int16_t new_temp = get_set_temp();
 8001b4a:	f001 f9d5 	bl	8002ef8 <get_set_temp>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	001a      	movs	r2, r3
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	801a      	strh	r2, [r3, #0]
		new_temp += (TEMP_STEPS * get_encoder_delta(&mmi_encoder));
 8001b56:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <read_mmi+0x10c>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe ffed 	bl	8000b38 <get_encoder_delta>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	0013      	movs	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	189b      	adds	r3, r3, r2
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	1dbb      	adds	r3, r7, #6
 8001b72:	801a      	strh	r2, [r3, #0]

		if (new_temp > MAX_TEMP) {
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	2200      	movs	r2, #0
 8001b78:	5e9a      	ldrsh	r2, [r3, r2]
 8001b7a:	23d2      	movs	r3, #210	@ 0xd2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dd04      	ble.n	8001b8c <read_mmi+0xe0>
			new_temp = MAX_TEMP;
 8001b82:	1dbb      	adds	r3, r7, #6
 8001b84:	22d2      	movs	r2, #210	@ 0xd2
 8001b86:	0052      	lsls	r2, r2, #1
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	e007      	b.n	8001b9c <read_mmi+0xf0>
		} else if (new_temp < MIN_TEMP) {
 8001b8c:	1dbb      	adds	r3, r7, #6
 8001b8e:	2200      	movs	r2, #0
 8001b90:	5e9b      	ldrsh	r3, [r3, r2]
 8001b92:	2b1d      	cmp	r3, #29
 8001b94:	dc02      	bgt.n	8001b9c <read_mmi+0xf0>
			new_temp = MIN_TEMP;
 8001b96:	1dbb      	adds	r3, r7, #6
 8001b98:	221e      	movs	r2, #30
 8001b9a:	801a      	strh	r2, [r3, #0]
		}

		set_new_temp(new_temp);
 8001b9c:	1dbb      	adds	r3, r7, #6
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f001 f999 	bl	8002ed8 <set_new_temp>
	}
}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	20000480 	.word	0x20000480
 8001bb4:	200004a2 	.word	0x200004a2
 8001bb8:	20000490 	.word	0x20000490
 8001bbc:	200004a3 	.word	0x200004a3
 8001bc0:	20000460 	.word	0x20000460
 8001bc4:	200004a0 	.word	0x200004a0
 8001bc8:	200004ac 	.word	0x200004ac
 8001bcc:	20000470 	.word	0x20000470
 8001bd0:	200004a1 	.word	0x200004a1
 8001bd4:	200004b0 	.word	0x200004b0

08001bd8 <sensor_scan>:

void sensor_scan(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	button_scan(&tool_holder_sensor);
 8001bdc:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <sensor_scan+0x24>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe fed2 	bl	8000988 <button_scan>
	button_scan(&tip_change_sensor);
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <sensor_scan+0x28>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7fe fece 	bl	8000988 <button_scan>
	button_scan(&mmi_button);
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <sensor_scan+0x2c>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7fe feca 	bl	8000988 <button_scan>
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	20000460 	.word	0x20000460
 8001c00:	20000470 	.word	0x20000470
 8001c04:	20000480 	.word	0x20000480

08001c08 <get_system_state>:

uint8_t get_system_state(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	return system_state;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	@ (8001c18 <get_system_state+0x10>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	2000045c 	.word	0x2000045c

08001c1c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <ssd1306_Reset+0x3c>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	2104      	movs	r1, #4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f002 fb0b 	bl	8004242 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <ssd1306_Reset+0x3c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2101      	movs	r1, #1
 8001c32:	0018      	movs	r0, r3
 8001c34:	f002 fb05 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f001 fa43 	bl	80030c4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <ssd1306_Reset+0x3c>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	2101      	movs	r1, #1
 8001c44:	0018      	movs	r0, r3
 8001c46:	f002 fafc 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f001 fa3a 	bl	80030c4 <HAL_Delay>
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	48000400 	.word	0x48000400

08001c5c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	0002      	movs	r2, r0
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <ssd1306_WriteCommand+0x48>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f002 fae7 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <ssd1306_WriteCommand+0x48>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	2102      	movs	r1, #2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f002 fae1 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001c80:	2301      	movs	r3, #1
 8001c82:	425b      	negs	r3, r3
 8001c84:	1df9      	adds	r1, r7, #7
 8001c86:	4808      	ldr	r0, [pc, #32]	@ (8001ca8 <ssd1306_WriteCommand+0x4c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f003 fe8f 	bl	80059ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <ssd1306_WriteCommand+0x48>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	2104      	movs	r1, #4
 8001c94:	0018      	movs	r0, r3
 8001c96:	f002 fad4 	bl	8004242 <HAL_GPIO_WritePin>
}
 8001c9a:	46c0      	nop			@ (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	20000298 	.word	0x20000298

08001cac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <ssd1306_WriteData+0x48>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2104      	movs	r1, #4
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f002 fac0 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <ssd1306_WriteData+0x48>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f002 faba 	bl	8004242 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <ssd1306_WriteData+0x4c>)
 8001cda:	f003 fe67 	bl	80059ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <ssd1306_WriteData+0x48>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f002 faac 	bl	8004242 <HAL_GPIO_WritePin>
}
 8001cea:	46c0      	nop			@ (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	20000298 	.word	0x20000298

08001cfc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d00:	f7ff ff8c 	bl	8001c1c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d04:	2064      	movs	r0, #100	@ 0x64
 8001d06:	f001 f9dd 	bl	80030c4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 fb28 	bl	8002360 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ffa3 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff ffa0 	bl	8001c5c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d1c:	20b0      	movs	r0, #176	@ 0xb0
 8001d1e:	f7ff ff9d 	bl	8001c5c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d22:	20c8      	movs	r0, #200	@ 0xc8
 8001d24:	f7ff ff9a 	bl	8001c5c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff ff97 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d2e:	2010      	movs	r0, #16
 8001d30:	f7ff ff94 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d34:	2040      	movs	r0, #64	@ 0x40
 8001d36:	f7ff ff91 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d3a:	20ff      	movs	r0, #255	@ 0xff
 8001d3c:	f000 faf8 	bl	8002330 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d40:	20a1      	movs	r0, #161	@ 0xa1
 8001d42:	f7ff ff8b 	bl	8001c5c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d46:	20a6      	movs	r0, #166	@ 0xa6
 8001d48:	f7ff ff88 	bl	8001c5c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d4c:	20a8      	movs	r0, #168	@ 0xa8
 8001d4e:	f7ff ff85 	bl	8001c5c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d52:	203f      	movs	r0, #63	@ 0x3f
 8001d54:	f7ff ff82 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d58:	20a4      	movs	r0, #164	@ 0xa4
 8001d5a:	f7ff ff7f 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d5e:	20d3      	movs	r0, #211	@ 0xd3
 8001d60:	f7ff ff7c 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff ff79 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d6a:	20d5      	movs	r0, #213	@ 0xd5
 8001d6c:	f7ff ff76 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d70:	20f0      	movs	r0, #240	@ 0xf0
 8001d72:	f7ff ff73 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d76:	20d9      	movs	r0, #217	@ 0xd9
 8001d78:	f7ff ff70 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d7c:	2022      	movs	r0, #34	@ 0x22
 8001d7e:	f7ff ff6d 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d82:	20da      	movs	r0, #218	@ 0xda
 8001d84:	f7ff ff6a 	bl	8001c5c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d88:	2012      	movs	r0, #18
 8001d8a:	f7ff ff67 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d8e:	20db      	movs	r0, #219	@ 0xdb
 8001d90:	f7ff ff64 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d94:	2020      	movs	r0, #32
 8001d96:	f7ff ff61 	bl	8001c5c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d9a:	208d      	movs	r0, #141	@ 0x8d
 8001d9c:	f7ff ff5e 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001da0:	2014      	movs	r0, #20
 8001da2:	f7ff ff5b 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fada 	bl	8002360 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 f811 	bl	8001dd4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001db2:	f000 f833 	bl	8001e1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <ssd1306_Init+0xd4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <ssd1306_Init+0xd4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dc2:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <ssd1306_Init+0xd4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	715a      	strb	r2, [r3, #5]
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	200008b4 	.word	0x200008b4

08001dd4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e00e      	b.n	8001e04 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <ssd1306_Fill+0x1e>
 8001dee:	2100      	movs	r1, #0
 8001df0:	e000      	b.n	8001df4 <ssd1306_Fill+0x20>
 8001df2:	21ff      	movs	r1, #255	@ 0xff
 8001df4:	4a08      	ldr	r2, [pc, #32]	@ (8001e18 <ssd1306_Fill+0x44>)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	1c0a      	adds	r2, r1, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3eb      	bcc.n	8001de6 <ssd1306_Fill+0x12>
    }
}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b004      	add	sp, #16
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200004b4 	.word	0x200004b4

08001e1c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e01a      	b.n	8001e60 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3b50      	subs	r3, #80	@ 0x50
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff ff12 	bl	8001c5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ff0f 	bl	8001c5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001e3e:	2010      	movs	r0, #16
 8001e40:	f7ff ff0c 	bl	8001c5c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	01da      	lsls	r2, r3, #7
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <ssd1306_UpdateScreen+0x58>)
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	2180      	movs	r1, #128	@ 0x80
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff2b 	bl	8001cac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	3201      	adds	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b07      	cmp	r3, #7
 8001e66:	d9e0      	bls.n	8001e2a <ssd1306_UpdateScreen+0xe>
    }
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	200004b4 	.word	0x200004b4

08001e78 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	0004      	movs	r4, r0
 8001e80:	0008      	movs	r0, r1
 8001e82:	0011      	movs	r1, r2
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	1c22      	adds	r2, r4, #0
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	1dbb      	adds	r3, r7, #6
 8001e8c:	1c02      	adds	r2, r0, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	1d7b      	adds	r3, r7, #5
 8001e92:	1c0a      	adds	r2, r1, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db52      	blt.n	8001f46 <ssd1306_DrawPixel+0xce>
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea6:	d84e      	bhi.n	8001f46 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001ea8:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <ssd1306_DrawPixel+0xd8>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8001eb0:	1d7b      	adds	r3, r7, #5
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	425a      	negs	r2, r3
 8001eb6:	4153      	adcs	r3, r2
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	1d7b      	adds	r3, r7, #5
 8001ebc:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 8001ebe:	1d7b      	adds	r3, r7, #5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d11e      	bne.n	8001f04 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ec6:	1dfb      	adds	r3, r7, #7
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	b2d8      	uxtb	r0, r3
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	01db      	lsls	r3, r3, #7
 8001ed6:	18d3      	adds	r3, r2, r3
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <ssd1306_DrawPixel+0xdc>)
 8001eda:	5cd3      	ldrb	r3, [r2, r3]
 8001edc:	b25a      	sxtb	r2, r3
 8001ede:	1dbb      	adds	r3, r7, #6
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2107      	movs	r1, #7
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4099      	lsls	r1, r3
 8001eea:	000b      	movs	r3, r1
 8001eec:	b25b      	sxtb	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b259      	sxtb	r1, r3
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	01db      	lsls	r3, r3, #7
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	b2c9      	uxtb	r1, r1
 8001efe:	4a15      	ldr	r2, [pc, #84]	@ (8001f54 <ssd1306_DrawPixel+0xdc>)
 8001f00:	54d1      	strb	r1, [r2, r3]
 8001f02:	e021      	b.n	8001f48 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	b2d8      	uxtb	r0, r3
 8001f10:	0003      	movs	r3, r0
 8001f12:	01db      	lsls	r3, r3, #7
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <ssd1306_DrawPixel+0xdc>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	1dba      	adds	r2, r7, #6
 8001f1e:	7812      	ldrb	r2, [r2, #0]
 8001f20:	2107      	movs	r1, #7
 8001f22:	400a      	ands	r2, r1
 8001f24:	2101      	movs	r1, #1
 8001f26:	4091      	lsls	r1, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	b252      	sxtb	r2, r2
 8001f2c:	43d2      	mvns	r2, r2
 8001f2e:	b252      	sxtb	r2, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	b259      	sxtb	r1, r3
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	0003      	movs	r3, r0
 8001f3a:	01db      	lsls	r3, r3, #7
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	b2c9      	uxtb	r1, r1
 8001f40:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <ssd1306_DrawPixel+0xdc>)
 8001f42:	54d1      	strb	r1, [r2, r3]
 8001f44:	e000      	b.n	8001f48 <ssd1306_DrawPixel+0xd0>
        return;
 8001f46:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b003      	add	sp, #12
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	200008b4 	.word	0x200008b4
 8001f54:	200004b4 	.word	0x200004b4

08001f58 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	0004      	movs	r4, r0
 8001f60:	1d38      	adds	r0, r7, #4
 8001f62:	6001      	str	r1, [r0, #0]
 8001f64:	6042      	str	r2, [r0, #4]
 8001f66:	0019      	movs	r1, r3
 8001f68:	200f      	movs	r0, #15
 8001f6a:	183b      	adds	r3, r7, r0
 8001f6c:	1c22      	adds	r2, r4, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	230e      	movs	r3, #14
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	1c0a      	adds	r2, r1, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f78:	183b      	adds	r3, r7, r0
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b1f      	cmp	r3, #31
 8001f7e:	d903      	bls.n	8001f88 <ssd1306_WriteChar+0x30>
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f86:	d901      	bls.n	8001f8c <ssd1306_WriteChar+0x34>
        return 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e077      	b.n	800207c <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	001a      	movs	r2, r3
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	18d3      	adds	r3, r2, r3
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	dc07      	bgt.n	8001fac <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f9c:	4b39      	ldr	r3, [pc, #228]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8001f9e:	885b      	ldrh	r3, [r3, #2]
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001fa8:	2b40      	cmp	r3, #64	@ 0x40
 8001faa:	dd01      	ble.n	8001fb0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e065      	b.n	800207c <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e051      	b.n	800205a <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	230f      	movs	r3, #15
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	3b20      	subs	r3, #32
 8001fc2:	1d39      	adds	r1, r7, #4
 8001fc4:	7849      	ldrb	r1, [r1, #1]
 8001fc6:	434b      	muls	r3, r1
 8001fc8:	0019      	movs	r1, r3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	18cb      	adds	r3, r1, r3
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	18d3      	adds	r3, r2, r3
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	e035      	b.n	8002048 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d014      	beq.n	8002014 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	18d3      	adds	r3, r2, r3
 8001ff6:	b2d8      	uxtb	r0, r3
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8001ffa:	885b      	ldrh	r3, [r3, #2]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	18d3      	adds	r3, r2, r3
 8002004:	b2d9      	uxtb	r1, r3
 8002006:	230e      	movs	r3, #14
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	f7ff ff33 	bl	8001e78 <ssd1306_DrawPixel>
 8002012:	e016      	b.n	8002042 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	18d3      	adds	r3, r2, r3
 8002020:	b2d8      	uxtb	r0, r3
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8002024:	885b      	ldrh	r3, [r3, #2]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	b2d9      	uxtb	r1, r3
 8002030:	230e      	movs	r3, #14
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	425a      	negs	r2, r3
 8002038:	4153      	adcs	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	001a      	movs	r2, r3
 800203e:	f7ff ff1b 	bl	8001e78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	3301      	adds	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	001a      	movs	r2, r3
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4293      	cmp	r3, r2
 8002052:	d3c3      	bcc.n	8001fdc <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	001a      	movs	r2, r3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4293      	cmp	r3, r2
 8002064:	d3a7      	bcc.n	8001fb6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002066:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	1d3a      	adds	r2, r7, #4
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	189b      	adds	r3, r3, r2
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <ssd1306_WriteChar+0x12c>)
 8002074:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002076:	230f      	movs	r3, #15
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	781b      	ldrb	r3, [r3, #0]
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b009      	add	sp, #36	@ 0x24
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	200008b4 	.word	0x200008b4

08002088 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	1d38      	adds	r0, r7, #4
 8002092:	6001      	str	r1, [r0, #0]
 8002094:	6042      	str	r2, [r0, #4]
 8002096:	001a      	movs	r2, r3
 8002098:	1cfb      	adds	r3, r7, #3
 800209a:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 800209c:	e014      	b.n	80020c8 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	7818      	ldrb	r0, [r3, #0]
 80020a2:	1cfb      	adds	r3, r7, #3
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	1d3a      	adds	r2, r7, #4
 80020a8:	6811      	ldr	r1, [r2, #0]
 80020aa:	6852      	ldr	r2, [r2, #4]
 80020ac:	f7ff ff54 	bl	8001f58 <ssd1306_WriteChar>
 80020b0:	0003      	movs	r3, r0
 80020b2:	001a      	movs	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d002      	beq.n	80020c2 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	e008      	b.n	80020d4 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e6      	bne.n	800209e <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}

080020dc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	0002      	movs	r2, r0
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	1dbb      	adds	r3, r7, #6
 80020ea:	1c0a      	adds	r2, r1, #0
 80020ec:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <ssd1306_SetCursor+0x30>)
 80020f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b03      	ldr	r3, [pc, #12]	@ (800210c <ssd1306_SetCursor+0x30>)
 8002100:	805a      	strh	r2, [r3, #2]
}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	b002      	add	sp, #8
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	200008b4 	.word	0x200008b4

08002110 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	0005      	movs	r5, r0
 8002118:	000c      	movs	r4, r1
 800211a:	0010      	movs	r0, r2
 800211c:	0019      	movs	r1, r3
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	1c2a      	adds	r2, r5, #0
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	1c22      	adds	r2, r4, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	1d7b      	adds	r3, r7, #5
 800212c:	1c02      	adds	r2, r0, #0
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	1c0a      	adds	r2, r1, #0
 8002134:	701a      	strb	r2, [r3, #0]
  int32_t deltaX = abs(x2 - x1);
 8002136:	1d7b      	adds	r3, r7, #5
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	17da      	asrs	r2, r3, #31
 8002142:	189b      	adds	r3, r3, r2
 8002144:	4053      	eors	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	1dbb      	adds	r3, r7, #6
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	17da      	asrs	r2, r3, #31
 8002154:	189b      	adds	r3, r3, r2
 8002156:	4053      	eors	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800215a:	1dfa      	adds	r2, r7, #7
 800215c:	1d7b      	adds	r3, r7, #5
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d201      	bcs.n	800216a <ssd1306_Line+0x5a>
 8002166:	2301      	movs	r3, #1
 8002168:	e001      	b.n	800216e <ssd1306_Line+0x5e>
 800216a:	2301      	movs	r3, #1
 800216c:	425b      	negs	r3, r3
 800216e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002170:	1dba      	adds	r2, r7, #6
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d201      	bcs.n	8002180 <ssd1306_Line+0x70>
 800217c:	2301      	movs	r3, #1
 800217e:	e001      	b.n	8002184 <ssd1306_Line+0x74>
 8002180:	2301      	movs	r3, #1
 8002182:	425b      	negs	r3, r3
 8002184:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 800218e:	2330      	movs	r3, #48	@ 0x30
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	7819      	ldrb	r1, [r3, #0]
 8002198:	1d7b      	adds	r3, r7, #5
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fe6b 	bl	8001e78 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80021a2:	e02b      	b.n	80021fc <ssd1306_Line+0xec>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80021a4:	2330      	movs	r3, #48	@ 0x30
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	1dbb      	adds	r3, r7, #6
 80021ac:	7819      	ldrb	r1, [r3, #0]
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff fe60 	bl	8001e78 <ssd1306_DrawPixel>
    error2 = error * 2;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	425b      	negs	r3, r3
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dd0a      	ble.n	80021de <ssd1306_Line+0xce>
    {
      error -= deltaY;
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	b2d9      	uxtb	r1, r3
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	1dfa      	adds	r2, r7, #7
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	188a      	adds	r2, r1, r2
 80021dc:	701a      	strb	r2, [r3, #0]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	da0a      	bge.n	80021fc <ssd1306_Line+0xec>
    {
      error += deltaX;
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	18d3      	adds	r3, r2, r3
 80021ec:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	b2d9      	uxtb	r1, r3
 80021f2:	1dbb      	adds	r3, r7, #6
 80021f4:	1dba      	adds	r2, r7, #6
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	188a      	adds	r2, r1, r2
 80021fa:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2))
 80021fc:	1dfa      	adds	r2, r7, #7
 80021fe:	1d7b      	adds	r3, r7, #5
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d1cd      	bne.n	80021a4 <ssd1306_Line+0x94>
 8002208:	1dba      	adds	r2, r7, #6
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d1c7      	bne.n	80021a4 <ssd1306_Line+0x94>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002214:	46c0      	nop			@ (mov r8, r8)
}
 8002216:	46bd      	mov	sp, r7
 8002218:	b008      	add	sp, #32
 800221a:	bdb0      	pop	{r4, r5, r7, pc}

0800221c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af02      	add	r7, sp, #8
 8002222:	0005      	movs	r5, r0
 8002224:	000c      	movs	r4, r1
 8002226:	0010      	movs	r0, r2
 8002228:	0019      	movs	r1, r3
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	1c2a      	adds	r2, r5, #0
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	1dbb      	adds	r3, r7, #6
 8002232:	1c22      	adds	r2, r4, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	1d7b      	adds	r3, r7, #5
 8002238:	1c02      	adds	r2, r0, #0
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	1c0a      	adds	r2, r1, #0
 8002240:	701a      	strb	r2, [r3, #0]
  ssd1306_Line(x1,y1,x2,y1,color);
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	781c      	ldrb	r4, [r3, #0]
 8002246:	1d7b      	adds	r3, r7, #5
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	1dbb      	adds	r3, r7, #6
 800224c:	7819      	ldrb	r1, [r3, #0]
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	7818      	ldrb	r0, [r3, #0]
 8002252:	2518      	movs	r5, #24
 8002254:	197b      	adds	r3, r7, r5
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	0023      	movs	r3, r4
 800225c:	f7ff ff58 	bl	8002110 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	781c      	ldrb	r4, [r3, #0]
 8002264:	1d7b      	adds	r3, r7, #5
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	1dbb      	adds	r3, r7, #6
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	1d7b      	adds	r3, r7, #5
 800226e:	7818      	ldrb	r0, [r3, #0]
 8002270:	197b      	adds	r3, r7, r5
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	0023      	movs	r3, r4
 8002278:	f7ff ff4a 	bl	8002110 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	781c      	ldrb	r4, [r3, #0]
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	7819      	ldrb	r1, [r3, #0]
 8002288:	1d7b      	adds	r3, r7, #5
 800228a:	7818      	ldrb	r0, [r3, #0]
 800228c:	197b      	adds	r3, r7, r5
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	0023      	movs	r3, r4
 8002294:	f7ff ff3c 	bl	8002110 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002298:	1dbb      	adds	r3, r7, #6
 800229a:	781c      	ldrb	r4, [r3, #0]
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	7819      	ldrb	r1, [r3, #0]
 80022a4:	1dfb      	adds	r3, r7, #7
 80022a6:	7818      	ldrb	r0, [r3, #0]
 80022a8:	197b      	adds	r3, r7, r5
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	0023      	movs	r3, r4
 80022b0:	f7ff ff2e 	bl	8002110 <ssd1306_Line>

  return;
 80022b4:	46c0      	nop			@ (mov r8, r8)
}
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b002      	add	sp, #8
 80022ba:	bdb0      	pop	{r4, r5, r7, pc}

080022bc <ssd1306_DrawFilledRectangle>:

void ssd1306_DrawFilledRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color){
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	0005      	movs	r5, r0
 80022c4:	000c      	movs	r4, r1
 80022c6:	0010      	movs	r0, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	1c2a      	adds	r2, r5, #0
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	1c22      	adds	r2, r4, #0
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	1d7b      	adds	r3, r7, #5
 80022d8:	1c02      	adds	r2, r0, #0
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	1c0a      	adds	r2, r1, #0
 80022e0:	701a      	strb	r2, [r3, #0]
	for (uint8_t y = y1; y <= y2; y++){
 80022e2:	230f      	movs	r3, #15
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	1dba      	adds	r2, r7, #6
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e014      	b.n	8002318 <ssd1306_DrawFilledRectangle+0x5c>
		ssd1306_Line(x1,y,x2,y,color);
 80022ee:	250f      	movs	r5, #15
 80022f0:	197b      	adds	r3, r7, r5
 80022f2:	781c      	ldrb	r4, [r3, #0]
 80022f4:	1d7b      	adds	r3, r7, #5
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	197b      	adds	r3, r7, r5
 80022fa:	7819      	ldrb	r1, [r3, #0]
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	7818      	ldrb	r0, [r3, #0]
 8002300:	2320      	movs	r3, #32
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	0023      	movs	r3, r4
 800230a:	f7ff ff01 	bl	8002110 <ssd1306_Line>
	for (uint8_t y = y1; y <= y2; y++){
 800230e:	197b      	adds	r3, r7, r5
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	197b      	adds	r3, r7, r5
 8002314:	3201      	adds	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	230f      	movs	r3, #15
 800231a:	18fa      	adds	r2, r7, r3
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d9e3      	bls.n	80022ee <ssd1306_DrawFilledRectangle+0x32>
	}
}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bdb0      	pop	{r4, r5, r7, pc}

08002330 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	0002      	movs	r2, r0
 8002338:	1dfb      	adds	r3, r7, #7
 800233a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800233c:	210f      	movs	r1, #15
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2281      	movs	r2, #129	@ 0x81
 8002342:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002344:	187b      	adds	r3, r7, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fc87 	bl	8001c5c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff fc82 	bl	8001c5c <ssd1306_WriteCommand>
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	0002      	movs	r2, r0
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8002374:	230f      	movs	r3, #15
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	22af      	movs	r2, #175	@ 0xaf
 800237a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <ssd1306_SetDisplayOn+0x48>)
 800237e:	2201      	movs	r2, #1
 8002380:	719a      	strb	r2, [r3, #6]
 8002382:	e006      	b.n	8002392 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	22ae      	movs	r2, #174	@ 0xae
 800238a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <ssd1306_SetDisplayOn+0x48>)
 800238e:	2200      	movs	r2, #0
 8002390:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002392:	230f      	movs	r3, #15
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff fc5f 	bl	8001c5c <ssd1306_WriteCommand>
}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b004      	add	sp, #16
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	200008b4 	.word	0x200008b4

080023ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_MspInit+0x44>)
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_MspInit+0x44>)
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	619a      	str	r2, [r3, #24]
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_MspInit+0x44>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2201      	movs	r2, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_MspInit+0x44>)
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_MspInit+0x44>)
 80023d0:	2180      	movs	r1, #128	@ 0x80
 80023d2:	0549      	lsls	r1, r1, #21
 80023d4:	430a      	orrs	r2, r1
 80023d6:	61da      	str	r2, [r3, #28]
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_MspInit+0x44>)
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	4013      	ands	r3, r2
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b002      	add	sp, #8
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b08b      	sub	sp, #44	@ 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	2414      	movs	r4, #20
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	0018      	movs	r0, r3
 8002402:	2314      	movs	r3, #20
 8002404:	001a      	movs	r2, r3
 8002406:	2100      	movs	r1, #0
 8002408:	f004 fed0 	bl	80071ac <memset>
  if(hadc->Instance==ADC1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2d      	ldr	r2, [pc, #180]	@ (80024c8 <HAL_ADC_MspInit+0xd4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d153      	bne.n	80024be <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002416:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0089      	lsls	r1, r1, #2
 8002420:	430a      	orrs	r2, r1
 8002422:	619a      	str	r2, [r3, #24]
 8002424:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	0289      	lsls	r1, r1, #10
 800243c:	430a      	orrs	r2, r1
 800243e:	615a      	str	r2, [r3, #20]
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_ADC_MspInit+0xd8>)
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_ADC_Pin;
 800244e:	193b      	adds	r3, r7, r4
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002454:	193b      	adds	r3, r7, r4
 8002456:	2203      	movs	r2, #3
 8002458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	193b      	adds	r3, r7, r4
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(THERMOCOUPLE_ADC_GPIO_Port, &GPIO_InitStruct);
 8002460:	193a      	adds	r2, r7, r4
 8002462:	2390      	movs	r3, #144	@ 0x90
 8002464:	05db      	lsls	r3, r3, #23
 8002466:	0011      	movs	r1, r2
 8002468:	0018      	movs	r0, r3
 800246a:	f001 fd55 	bl	8003f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800246e:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002470:	4a18      	ldr	r2, [pc, #96]	@ (80024d4 <HAL_ADC_MspInit+0xe0>)
 8002472:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002482:	2280      	movs	r2, #128	@ 0x80
 8002484:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	0052      	lsls	r2, r2, #1
 800248c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	00d2      	lsls	r2, r2, #3
 8002494:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 80024a4:	0018      	movs	r0, r3
 80024a6:	f001 fb9f 	bl	8003be8 <HAL_DMA_Init>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80024ae:	f7ff f98d 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_ADC_MspInit+0xdc>)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b00b      	add	sp, #44	@ 0x2c
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	40012400 	.word	0x40012400
 80024cc:	40021000 	.word	0x40021000
 80024d0:	20000200 	.word	0x20000200
 80024d4:	40020008 	.word	0x40020008

080024d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b08b      	sub	sp, #44	@ 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	2414      	movs	r4, #20
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2314      	movs	r3, #20
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f004 fe5e 	bl	80071ac <memset>
  if(hi2c->Instance==I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <HAL_I2C_MspInit+0x90>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d132      	bne.n	8002560 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <HAL_I2C_MspInit+0x94>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <HAL_I2C_MspInit+0x94>)
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	02c9      	lsls	r1, r1, #11
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	4b18      	ldr	r3, [pc, #96]	@ (800256c <HAL_I2C_MspInit+0x94>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	02db      	lsls	r3, r3, #11
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	22c0      	movs	r2, #192	@ 0xc0
 800251a:	0052      	lsls	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800251e:	0021      	movs	r1, r4
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2212      	movs	r2, #18
 8002524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2203      	movs	r2, #3
 8002530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2201      	movs	r2, #1
 8002536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	187b      	adds	r3, r7, r1
 800253a:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <HAL_I2C_MspInit+0x98>)
 800253c:	0019      	movs	r1, r3
 800253e:	0010      	movs	r0, r2
 8002540:	f001 fcea 	bl	8003f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_I2C_MspInit+0x94>)
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_I2C_MspInit+0x94>)
 800254a:	2180      	movs	r1, #128	@ 0x80
 800254c:	0389      	lsls	r1, r1, #14
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_I2C_MspInit+0x94>)
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	039b      	lsls	r3, r3, #14
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b00b      	add	sp, #44	@ 0x2c
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	40005400 	.word	0x40005400
 800256c:	40021000 	.word	0x40021000
 8002570:	48000400 	.word	0x48000400

08002574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b08b      	sub	sp, #44	@ 0x2c
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	2414      	movs	r4, #20
 800257e:	193b      	adds	r3, r7, r4
 8002580:	0018      	movs	r0, r3
 8002582:	2314      	movs	r3, #20
 8002584:	001a      	movs	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f004 fe10 	bl	80071ac <memset>
  if(hspi->Instance==SPI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <HAL_SPI_MspInit+0x90>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d132      	bne.n	80025fc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002596:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 800259c:	2180      	movs	r1, #128	@ 0x80
 800259e:	0149      	lsls	r1, r1, #5
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	015b      	lsls	r3, r3, #5
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 80025b8:	2180      	movs	r1, #128	@ 0x80
 80025ba:	0289      	lsls	r1, r1, #10
 80025bc:	430a      	orrs	r2, r1
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_SPI_MspInit+0x94>)
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025ce:	0021      	movs	r1, r4
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	22a0      	movs	r2, #160	@ 0xa0
 80025d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	2202      	movs	r2, #2
 80025da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	2203      	movs	r2, #3
 80025e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	187a      	adds	r2, r7, r1
 80025f0:	2390      	movs	r3, #144	@ 0x90
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f001 fc8e 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b00b      	add	sp, #44	@ 0x2c
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	40013000 	.word	0x40013000
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b08b      	sub	sp, #44	@ 0x2c
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	2414      	movs	r4, #20
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	2314      	movs	r3, #20
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f004 fdc4 	bl	80071ac <memset>
  if(htim_encoder->Instance==TIM2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	429a      	cmp	r2, r3
 800262e:	d154      	bne.n	80026da <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002630:	4b2c      	ldr	r3, [pc, #176]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002632:	69da      	ldr	r2, [r3, #28]
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002636:	2101      	movs	r1, #1
 8002638:	430a      	orrs	r2, r1
 800263a:	61da      	str	r2, [r3, #28]
 800263c:	4b29      	ldr	r3, [pc, #164]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800264e:	2180      	movs	r1, #128	@ 0x80
 8002650:	0289      	lsls	r1, r1, #10
 8002652:	430a      	orrs	r2, r1
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	029b      	lsls	r3, r3, #10
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 800266a:	2180      	movs	r1, #128	@ 0x80
 800266c:	02c9      	lsls	r1, r1, #11
 800266e:	430a      	orrs	r2, r1
 8002670:	615a      	str	r2, [r3, #20]
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	02db      	lsls	r3, r3, #11
 800267a:	4013      	ands	r3, r2
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	0212      	lsls	r2, r2, #8
 8002686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2202      	movs	r2, #2
 800268c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2202      	movs	r2, #2
 800269e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80026a0:	193a      	adds	r2, r7, r4
 80026a2:	2390      	movs	r3, #144	@ 0x90
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f001 fc35 	bl	8003f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 80026ae:	0021      	movs	r1, r4
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2208      	movs	r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2202      	movs	r2, #2
 80026ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2202      	movs	r2, #2
 80026cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f001 fc1f 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b00b      	add	sp, #44	@ 0x2c
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	40021000 	.word	0x40021000
 80026e8:	48000400 	.word	0x48000400

080026ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <HAL_TIM_Base_MspInit+0x78>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d114      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 8002704:	2110      	movs	r1, #16
 8002706:	430a      	orrs	r2, r1
 8002708:	61da      	str	r2, [r3, #28]
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2210      	movs	r2, #16
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	2011      	movs	r0, #17
 800271c:	f001 fa32 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002720:	2011      	movs	r0, #17
 8002722:	f001 fa44 	bl	8003bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002726:	e018      	b.n	800275a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0f      	ldr	r2, [pc, #60]	@ (800276c <HAL_TIM_Base_MspInit+0x80>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d113      	bne.n	800275a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 8002738:	2120      	movs	r1, #32
 800273a:	430a      	orrs	r2, r1
 800273c:	61da      	str	r2, [r3, #28]
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <HAL_TIM_Base_MspInit+0x7c>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2220      	movs	r2, #32
 8002744:	4013      	ands	r3, r2
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2012      	movs	r0, #18
 8002750:	f001 fa18 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002754:	2012      	movs	r0, #18
 8002756:	f001 fa2a 	bl	8003bae <HAL_NVIC_EnableIRQ>
}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	46bd      	mov	sp, r7
 800275e:	b004      	add	sp, #16
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	40001000 	.word	0x40001000
 8002768:	40021000 	.word	0x40021000
 800276c:	40001400 	.word	0x40001400

08002770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b08b      	sub	sp, #44	@ 0x2c
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	2414      	movs	r4, #20
 800277a:	193b      	adds	r3, r7, r4
 800277c:	0018      	movs	r0, r3
 800277e:	2314      	movs	r3, #20
 8002780:	001a      	movs	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f004 fd12 	bl	80071ac <memset>
  if(huart->Instance==USART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <HAL_UART_MspInit+0x94>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d133      	bne.n	80027fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_UART_MspInit+0x98>)
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <HAL_UART_MspInit+0x98>)
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	01c9      	lsls	r1, r1, #7
 800279c:	430a      	orrs	r2, r1
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_UART_MspInit+0x98>)
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <HAL_UART_MspInit+0x98>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_UART_MspInit+0x98>)
 80027b4:	2180      	movs	r1, #128	@ 0x80
 80027b6:	0289      	lsls	r1, r1, #10
 80027b8:	430a      	orrs	r2, r1
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_UART_MspInit+0x98>)
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	029b      	lsls	r3, r3, #10
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	22c0      	movs	r2, #192	@ 0xc0
 80027ce:	00d2      	lsls	r2, r2, #3
 80027d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	0021      	movs	r1, r4
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2202      	movs	r2, #2
 80027d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2203      	movs	r2, #3
 80027e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2201      	movs	r2, #1
 80027ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	187a      	adds	r2, r7, r1
 80027ee:	2390      	movs	r3, #144	@ 0x90
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f001 fb8f 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b00b      	add	sp, #44	@ 0x2c
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	40013800 	.word	0x40013800
 8002808:	40021000 	.word	0x40021000

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	e7fd      	b.n	8002810 <NMI_Handler+0x4>

08002814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	e7fd      	b.n	8002818 <HardFault_Handler+0x4>

0800281c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282a:	46c0      	nop			@ (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 fc2a 	bl	800308c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	46c0      	nop			@ (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZERO_CROSS_Pin);
 8002842:	2010      	movs	r0, #16
 8002844:	f001 fd1a 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <DMA1_Channel1_IRQHandler+0x14>)
 8002856:	0018      	movs	r0, r3
 8002858:	f001 fa74 	bl	8003d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	20000200 	.word	0x20000200

08002868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <TIM6_DAC_IRQHandler+0x14>)
 800286e:	0018      	movs	r0, r3
 8002870:	f003 fd8e 	bl	8006390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002874:	46c0      	nop			@ (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	20000344 	.word	0x20000344

08002880 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002884:	4b03      	ldr	r3, [pc, #12]	@ (8002894 <TIM7_IRQHandler+0x14>)
 8002886:	0018      	movs	r0, r3
 8002888:	f003 fd82 	bl	8006390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	2000038c 	.word	0x2000038c

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f004 fc86 	bl	80071d8 <__errno>
 80028cc:	0003      	movs	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	425b      	negs	r3, r3
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	@ (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	18d2      	adds	r2, r2, r3
 80028e6:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <_sbrk+0x64>)
 80028e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b006      	add	sp, #24
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20004000 	.word	0x20004000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	200008bc 	.word	0x200008bc
 8002900:	20000a88 	.word	0x20000a88

08002904 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002908:	46c0      	nop			@ (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_GPIO_EXTI_Callback>:
static volatile uint16_t tip_state = TIP_NOT_DETECTED;
static volatile uint8_t tip_check_flag = RESET;
static volatile uint16_t tip_check_counter = 0;

/******    Callback Functions    ******/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	0002      	movs	r2, r0
 8002916:	1dbb      	adds	r3, r7, #6
 8002918:	801a      	strh	r2, [r3, #0]
	zerocross_interrupt(GPIO_Pin);
 800291a:	1dbb      	adds	r3, r7, #6
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	f000 f81a 	bl	8002958 <zerocross_interrupt>
}
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	timer_interrupt(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f82c 	bl	8002994 <timer_interrupt>
}
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	adc_complete();
 800294c:	f000 f8d6 	bl	8002afc <adc_complete>
}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <zerocross_interrupt>:

/******    ISR Functions    ******/
// ISR: Rising edge is detected on ZERO_CROSS pin. Start TIM6, which is a delay for when the true AC zero cross happens
static void zerocross_interrupt(uint16_t GPIO_Pin) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	0002      	movs	r2, r0
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == ZERO_CROSS_Pin) {
 8002964:	1dbb      	adds	r3, r7, #6
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	2b10      	cmp	r3, #16
 800296a:	d10a      	bne.n	8002982 <zerocross_interrupt+0x2a>
		// char tx_buff[32];
		// snprintf(tx_buff, sizeof(tx_buff), "Zero cross detected %d\r\n", HAL_GetTick());
		// HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
		HAL_TIM_Base_Start_IT(&htim6);
 800296c:	4b07      	ldr	r3, [pc, #28]	@ (800298c <zerocross_interrupt+0x34>)
 800296e:	0018      	movs	r0, r3
 8002970:	f003 fb42 	bl	8005ff8 <HAL_TIM_Base_Start_IT>
		ac_delay_tick_ms = HAL_GetTick() + AC_DETECTION_INTERVAL_MS;
 8002974:	f000 fb9c 	bl	80030b0 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	330c      	adds	r3, #12
 800297c:	001a      	movs	r2, r3
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <zerocross_interrupt+0x38>)
 8002980:	601a      	str	r2, [r3, #0]
	}
}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b002      	add	sp, #8
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000344 	.word	0x20000344
 8002990:	20000934 	.word	0x20000934

08002994 <timer_interrupt>:

// ISR: Do heater and temperature reading tasks at specific points during the AC mains cycle
static void timer_interrupt(TIM_HandleTypeDef *htim) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

	// TIM6 interrupt, indicating true AC zero cross. This is where to turn the heater on/off to avoid inductive spikes
	if (htim == &htim6) {
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <timer_interrupt+0x128>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d14c      	bne.n	8002a3e <timer_interrupt+0xaa>
		HAL_TIM_Base_Stop_IT(&htim6);
 80029a4:	4b45      	ldr	r3, [pc, #276]	@ (8002abc <timer_interrupt+0x128>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f003 fb78 	bl	800609c <HAL_TIM_Base_Stop_IT>

		heater_power_history <<= 1; // Records the tip power history of the past 32 AC half cycles. Power to tip = 1, no power = 0
 80029ac:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <timer_interrupt+0x12c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	005a      	lsls	r2, r3, #1
 80029b2:	4b43      	ldr	r3, [pc, #268]	@ (8002ac0 <timer_interrupt+0x12c>)
 80029b4:	601a      	str	r2, [r3, #0]
		tip_check_counter++;		// Increase counter every AC half cycle
 80029b6:	4b43      	ldr	r3, [pc, #268]	@ (8002ac4 <timer_interrupt+0x130>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b40      	ldr	r3, [pc, #256]	@ (8002ac4 <timer_interrupt+0x130>)
 80029c2:	801a      	strh	r2, [r3, #0]

		// Switch heater on or off
		if ((on_periods >= 1) && (tip_temp < MAX_TEMP)) {
 80029c4:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <timer_interrupt+0x134>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d029      	beq.n	8002a22 <timer_interrupt+0x8e>
 80029ce:	4b3f      	ldr	r3, [pc, #252]	@ (8002acc <timer_interrupt+0x138>)
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	23d2      	movs	r3, #210	@ 0xd2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d223      	bcs.n	8002a22 <timer_interrupt+0x8e>
			// Drive TIP_CHECK pin LOW, this clamps thermo-couple signal to prevent transients and noise on the op-amp input
			TIP_CLAMP_GPIO_Port->BRR |= GPIO_BRR_BR_1;		   // Set PA2 LOW
 80029da:	2390      	movs	r3, #144	@ 0x90
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e0:	2390      	movs	r3, #144	@ 0x90
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	2102      	movs	r1, #2
 80029e6:	430a      	orrs	r2, r1
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
			TIP_CLAMP_GPIO_Port->MODER |= GPIO_MODER_MODER2_0; // Set PA2 to push pull output mode
 80029ea:	2390      	movs	r3, #144	@ 0x90
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2390      	movs	r3, #144	@ 0x90
 80029f2:	05db      	lsls	r3, r3, #23
 80029f4:	2110      	movs	r1, #16
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

			// Turn heater on
			HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, ON);
 80029fa:	2390      	movs	r3, #144	@ 0x90
 80029fc:	05db      	lsls	r3, r3, #23
 80029fe:	2201      	movs	r2, #1
 8002a00:	2108      	movs	r1, #8
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 fc1d 	bl	8004242 <HAL_GPIO_WritePin>
			on_periods--;
 8002a08:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac8 <timer_interrupt+0x134>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <timer_interrupt+0x134>)
 8002a14:	701a      	strb	r2, [r3, #0]
			heater_power_history++;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <timer_interrupt+0x12c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <timer_interrupt+0x12c>)
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e00a      	b.n	8002a38 <timer_interrupt+0xa4>

		} else {
			HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, OFF); // Turn heater OFF
 8002a22:	2390      	movs	r3, #144	@ 0x90
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	2200      	movs	r2, #0
 8002a28:	2108      	movs	r1, #8
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f001 fc09 	bl	8004242 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim7);						  // Start TIM7 to read tip temperature
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <timer_interrupt+0x13c>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f003 fae0 	bl	8005ff8 <HAL_TIM_Base_Start_IT>
		}

		sensor_scan(); // Scan buttons (zero cross happens at 100Hz, 10ms between each scan)
 8002a38:	f7ff f8ce 	bl	8001bd8 <sensor_scan>
			delay_flag = SET;
			HAL_TIM_Base_Stop_IT(&htim7); // Stop TIM7
			start_adc();				  // Start ADC conversion in DMA mode
		}
	}
}
 8002a3c:	e039      	b.n	8002ab2 <timer_interrupt+0x11e>
	} else if (htim == &htim7) {
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <timer_interrupt+0x13c>)
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d135      	bne.n	8002ab2 <timer_interrupt+0x11e>
		if (delay_flag) {
 8002a46:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <timer_interrupt+0x140>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <timer_interrupt+0x10c>
			delay_flag = RESET;
 8002a4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <timer_interrupt+0x140>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
			TIP_CLAMP_GPIO_Port->MODER &= ~GPIO_MODER_MODER2_0; // Set PA2 to input mode
 8002a54:	2390      	movs	r3, #144	@ 0x90
 8002a56:	05db      	lsls	r3, r3, #23
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2390      	movs	r3, #144	@ 0x90
 8002a5c:	05db      	lsls	r3, r3, #23
 8002a5e:	2110      	movs	r1, #16
 8002a60:	438a      	bics	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
			if (tip_check_counter > TIP_CHECK_INTERVAL) {
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <timer_interrupt+0x130>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b32      	cmp	r3, #50	@ 0x32
 8002a6c:	d921      	bls.n	8002ab2 <timer_interrupt+0x11e>
				heater_off();
 8002a6e:	f000 fa29 	bl	8002ec4 <heater_off>
				tip_check_flag = SET;
 8002a72:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <timer_interrupt+0x144>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
				TIP_CHECK_GPIO_Port->BSRR |= GPIO_BSRR_BS_1;	   // Set PA1 HIGH
 8002a78:	2390      	movs	r3, #144	@ 0x90
 8002a7a:	05db      	lsls	r3, r3, #23
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	2390      	movs	r3, #144	@ 0x90
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	2102      	movs	r1, #2
 8002a84:	430a      	orrs	r2, r1
 8002a86:	619a      	str	r2, [r3, #24]
				TIP_CHECK_GPIO_Port->MODER |= GPIO_MODER_MODER1_0; // Set PA1 to push pull output mode
 8002a88:	2390      	movs	r3, #144	@ 0x90
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	2390      	movs	r3, #144	@ 0x90
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	2104      	movs	r1, #4
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
				tip_check_counter = 0;
 8002a98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <timer_interrupt+0x130>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
}
 8002a9e:	e008      	b.n	8002ab2 <timer_interrupt+0x11e>
			delay_flag = SET;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <timer_interrupt+0x140>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim7); // Stop TIM7
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <timer_interrupt+0x13c>)
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f003 faf7 	bl	800609c <HAL_TIM_Base_Stop_IT>
			start_adc();				  // Start ADC conversion in DMA mode
 8002aae:	f000 f815 	bl	8002adc <start_adc>
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b002      	add	sp, #8
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	20000344 	.word	0x20000344
 8002ac0:	2000092c 	.word	0x2000092c
 8002ac4:	2000093a 	.word	0x2000093a
 8002ac8:	2000092a 	.word	0x2000092a
 8002acc:	20000928 	.word	0x20000928
 8002ad0:	2000038c 	.word	0x2000038c
 8002ad4:	20000140 	.word	0x20000140
 8002ad8:	20000938 	.word	0x20000938

08002adc <start_adc>:

static void start_adc(void) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_buffer, (sizeof(adc_buffer) / sizeof(uint16_t)));
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <start_adc+0x18>)
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <start_adc+0x1c>)
 8002ae4:	2232      	movs	r2, #50	@ 0x32
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fc50 	bl	800338c <HAL_ADC_Start_DMA>
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	200008c0 	.word	0x200008c0
 8002af8:	200001c0 	.word	0x200001c0

08002afc <adc_complete>:

static void adc_complete(void) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
	adc_calculate_buffer_average();
 8002b02:	f000 f87f 	bl	8002c04 <adc_calculate_buffer_average>

	if (tip_check_flag == SET) {
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <adc_complete+0xb0>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d111      	bne.n	8002b34 <adc_complete+0x38>
		tip_check_flag = WAIT;
 8002b10:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <adc_complete+0xb0>)
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
		TIP_CHECK_GPIO_Port->MODER &= ~GPIO_MODER_MODER1_0; // Set TIP_CHECK pin PA1 to input mode
 8002b16:	2390      	movs	r3, #144	@ 0x90
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2390      	movs	r3, #144	@ 0x90
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	2104      	movs	r1, #4
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]
		tip_state = tip_check();
 8002b26:	f000 f929 	bl	8002d7c <tip_check>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <adc_complete+0xb4>)
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	e031      	b.n	8002b98 <adc_complete+0x9c>
	} else if ((tip_check_flag == RESET) && (tip_state == TIP_DETECTED)) {
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <adc_complete+0xb0>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12c      	bne.n	8002b98 <adc_complete+0x9c>
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <adc_complete+0xb4>)
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d127      	bne.n	8002b98 <adc_complete+0x9c>
		adc_to_temperature();
 8002b48:	f000 f842 	bl	8002bd0 <adc_to_temperature>
		adc_deviation_check();
 8002b4c:	f000 f88a 	bl	8002c64 <adc_deviation_check>
		if (error_flag == SET) {
 8002b50:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <adc_complete+0xb8>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d112      	bne.n	8002b80 <adc_complete+0x84>
			tip_temp = ADC_READING_ERROR;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <adc_complete+0xbc>)
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <adc_complete+0xc0>)
 8002b5e:	801a      	strh	r2, [r3, #0]
			char tx_buff[28];
			snprintf(tx_buff, sizeof(tx_buff), "Error: ADC READING ERROR\r\n");
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <adc_complete+0xc4>)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	211c      	movs	r1, #28
 8002b66:	0018      	movs	r0, r3
 8002b68:	f004 faec 	bl	8007144 <sniprintf>
			HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 8002b6c:	23fa      	movs	r3, #250	@ 0xfa
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	1d39      	adds	r1, r7, #4
 8002b72:	4814      	ldr	r0, [pc, #80]	@ (8002bc4 <adc_complete+0xc8>)
 8002b74:	221c      	movs	r2, #28
 8002b76:	f003 fe8d 	bl	8006894 <HAL_UART_Transmit>
			error_handler();
 8002b7a:	f000 f9dd 	bl	8002f38 <error_handler>
 8002b7e:	e00b      	b.n	8002b98 <adc_complete+0x9c>
		} else if ((get_system_state() == ON_STATE) || (get_system_state() == STANDBY_STATE)) {
 8002b80:	f7ff f842 	bl	8001c08 <get_system_state>
 8002b84:	0003      	movs	r3, r0
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d004      	beq.n	8002b94 <adc_complete+0x98>
 8002b8a:	f7ff f83d 	bl	8001c08 <get_system_state>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d101      	bne.n	8002b98 <adc_complete+0x9c>
			power_control();
 8002b94:	f000 f8a8 	bl	8002ce8 <power_control>
		}
	}
	power_bar_value = on_periods;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <adc_complete+0xcc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <adc_complete+0xd0>)
 8002ba0:	701a      	strb	r2, [r3, #0]
}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b008      	add	sp, #32
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	20000938 	.word	0x20000938
 8002bb0:	2000013e 	.word	0x2000013e
 8002bb4:	20000930 	.word	0x20000930
 8002bb8:	20000928 	.word	0x20000928
 8002bbc:	000003e7 	.word	0x000003e7
 8002bc0:	08007bbc 	.word	0x08007bbc
 8002bc4:	200003d4 	.word	0x200003d4
 8002bc8:	2000092a 	.word	0x2000092a
 8002bcc:	2000092b 	.word	0x2000092b

08002bd0 <adc_to_temperature>:

static void adc_to_temperature(void) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	// Calculate tip temperature in Celsius
	tip_temp = (adc_buffer_average * 100 / 750) + 25;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <adc_to_temperature+0x28>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2264      	movs	r2, #100	@ 0x64
 8002bda:	4353      	muls	r3, r2
 8002bdc:	4907      	ldr	r1, [pc, #28]	@ (8002bfc <adc_to_temperature+0x2c>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd faa4 	bl	800012c <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3319      	adds	r3, #25
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <adc_to_temperature+0x30>)
 8002bee:	801a      	strh	r2, [r3, #0]
}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	20000924 	.word	0x20000924
 8002bfc:	000002ee 	.word	0x000002ee
 8002c00:	20000928 	.word	0x20000928

08002c04 <adc_calculate_buffer_average>:

static void adc_calculate_buffer_average(void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	// Calculate the average value of adc_buffer
	adc_buffer_average = 0;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <adc_calculate_buffer_average+0x58>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < ADC_BUFFER_LENGTH; i++) {
 8002c10:	1dbb      	adds	r3, r7, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]
 8002c16:	e00f      	b.n	8002c38 <adc_calculate_buffer_average+0x34>
		adc_buffer_average += adc_buffer[i];
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	881a      	ldrh	r2, [r3, #0]
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <adc_calculate_buffer_average+0x5c>)
 8002c1e:	0052      	lsls	r2, r2, #1
 8002c20:	5ad3      	ldrh	r3, [r2, r3]
 8002c22:	001a      	movs	r2, r3
 8002c24:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <adc_calculate_buffer_average+0x58>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	18d2      	adds	r2, r2, r3
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <adc_calculate_buffer_average+0x58>)
 8002c2c:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < ADC_BUFFER_LENGTH; i++) {
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	881a      	ldrh	r2, [r3, #0]
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	3201      	adds	r2, #1
 8002c36:	801a      	strh	r2, [r3, #0]
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	2b31      	cmp	r3, #49	@ 0x31
 8002c3e:	d9eb      	bls.n	8002c18 <adc_calculate_buffer_average+0x14>
	}
	adc_buffer_average /= ADC_BUFFER_LENGTH;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <adc_calculate_buffer_average+0x58>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2132      	movs	r1, #50	@ 0x32
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fd fa70 	bl	800012c <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	001a      	movs	r2, r3
 8002c50:	4b02      	ldr	r3, [pc, #8]	@ (8002c5c <adc_calculate_buffer_average+0x58>)
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000924 	.word	0x20000924
 8002c60:	200008c0 	.word	0x200008c0

08002c64 <adc_deviation_check>:

static void adc_deviation_check(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	// Check if any values in adc_buffer deviates more than expected, if so set error_flag
	int16_t upper_limit = adc_buffer_average + ADC_MAX_DEVIATION;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <adc_deviation_check+0x78>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	33c8      	adds	r3, #200	@ 0xc8
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	801a      	strh	r2, [r3, #0]
	int16_t lower_limit = adc_buffer_average - ADC_MAX_DEVIATION;
 8002c78:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <adc_deviation_check+0x78>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3bc8      	subs	r3, #200	@ 0xc8
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < ADC_BUFFER_LENGTH; i++) {
 8002c86:	1dbb      	adds	r3, r7, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	e01d      	b.n	8002cca <adc_deviation_check+0x66>
		if ((adc_buffer[i] > upper_limit) || (adc_buffer[i] < lower_limit)) {
 8002c8e:	1dbb      	adds	r3, r7, #6
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <adc_deviation_check+0x7c>)
 8002c94:	0052      	lsls	r2, r2, #1
 8002c96:	5ad3      	ldrh	r3, [r2, r3]
 8002c98:	001a      	movs	r2, r3
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5e5b      	ldrsh	r3, [r3, r1]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dc0a      	bgt.n	8002cba <adc_deviation_check+0x56>
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	881a      	ldrh	r2, [r3, #0]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <adc_deviation_check+0x7c>)
 8002caa:	0052      	lsls	r2, r2, #1
 8002cac:	5ad3      	ldrh	r3, [r2, r3]
 8002cae:	001a      	movs	r2, r3
 8002cb0:	1cbb      	adds	r3, r7, #2
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5e5b      	ldrsh	r3, [r3, r1]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	da02      	bge.n	8002cc0 <adc_deviation_check+0x5c>
			error_flag = SET;
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <adc_deviation_check+0x80>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < ADC_BUFFER_LENGTH; i++) {
 8002cc0:	1dbb      	adds	r3, r7, #6
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	3201      	adds	r2, #1
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	1dbb      	adds	r3, r7, #6
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	2b31      	cmp	r3, #49	@ 0x31
 8002cd0:	d9dd      	bls.n	8002c8e <adc_deviation_check+0x2a>
		}
	}
}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000924 	.word	0x20000924
 8002ce0:	200008c0 	.word	0x200008c0
 8002ce4:	20000930 	.word	0x20000930

08002ce8 <power_control>:

static void power_control(void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
	 * Full power is one read period (OFF) per 4 power periods (ON).
	 * Number of power periods before next read period decreases as
	 * temperature closes in on set_temp to prevent too much overshoot.
	 */

	uint16_t tmp_set_temp = set_temp;
 8002cee:	1dbb      	adds	r3, r7, #6
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <power_control+0x88>)
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	801a      	strh	r2, [r3, #0]
	if ((get_system_state() == STANDBY_STATE) && (tmp_set_temp > STANDBY_TEMP)) {
 8002cf6:	f7fe ff87 	bl	8001c08 <get_system_state>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d106      	bne.n	8002d0e <power_control+0x26>
 8002d00:	1dbb      	adds	r3, r7, #6
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d06:	d902      	bls.n	8002d0e <power_control+0x26>
		tmp_set_temp = STANDBY_TEMP;
 8002d08:	1dbb      	adds	r3, r7, #6
 8002d0a:	22a0      	movs	r2, #160	@ 0xa0
 8002d0c:	801a      	strh	r2, [r3, #0]
	}

	// Turn heater ON/OFF
	if ((tip_temp + 3) < tmp_set_temp) {
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <power_control+0x8c>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	1cda      	adds	r2, r3, #3
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	da23      	bge.n	8002d64 <power_control+0x7c>
		uint16_t temperature_error = tmp_set_temp - tip_temp;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <power_control+0x8c>)
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	1db9      	adds	r1, r7, #6
 8002d24:	8809      	ldrh	r1, [r1, #0]
 8002d26:	1a8a      	subs	r2, r1, r2
 8002d28:	801a      	strh	r2, [r3, #0]
		on_periods = temperature_error / 10;
 8002d2a:	1d3b      	adds	r3, r7, #4
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	210a      	movs	r1, #10
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fd f9fb 	bl	800012c <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <power_control+0x90>)
 8002d3e:	701a      	strb	r2, [r3, #0]
		if (on_periods > MAX_ON_PERIODS) {
 8002d40:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <power_control+0x90>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d903      	bls.n	8002d52 <power_control+0x6a>
			on_periods = MAX_ON_PERIODS;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <power_control+0x90>)
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	701a      	strb	r2, [r3, #0]
			on_periods = 1;
		}
	} else {
		heater_off();
	}
}
 8002d50:	e00a      	b.n	8002d68 <power_control+0x80>
		} else if (on_periods == 0) {
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <power_control+0x90>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <power_control+0x80>
			on_periods = 1;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <power_control+0x90>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
}
 8002d62:	e001      	b.n	8002d68 <power_control+0x80>
		heater_off();
 8002d64:	f000 f8ae 	bl	8002ec4 <heater_off>
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	2000013c 	.word	0x2000013c
 8002d74:	20000928 	.word	0x20000928
 8002d78:	2000092a 	.word	0x2000092a

08002d7c <tip_check>:

uint8_t tip_check(void) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b08b      	sub	sp, #44	@ 0x2c
 8002d80:	af00      	add	r7, sp, #0
	 * 1. tip_check_flag is set every TIP_CHECK_INTERVAL AC half cycles, and TIP_CHECK_PIN is pulled high
	 * 2. When ADC is finished, adc_complete() reset TIP_CHECK_PIN,
	 *    calculates the average value of the ADC buffer reading and calls tip_check() to update tip_state
	 */

	uint8_t tmp_return = TIP_NOT_DETECTED;
 8002d82:	2427      	movs	r4, #39	@ 0x27
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2204      	movs	r2, #4
 8002d88:	701a      	strb	r2, [r3, #0]

	if (tip_check_flag != WAIT) {
 8002d8a:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <tip_check+0xa0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d012      	beq.n	8002dba <tip_check+0x3e>
		char tx_buff[34];
		snprintf(tx_buff, sizeof(tx_buff), "Error: Tip check flag not WAIT\r\n");
 8002d94:	4a22      	ldr	r2, [pc, #136]	@ (8002e20 <tip_check+0xa4>)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2122      	movs	r1, #34	@ 0x22
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f004 f9d2 	bl	8007144 <sniprintf>
		HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 8002da0:	23fa      	movs	r3, #250	@ 0xfa
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	1d39      	adds	r1, r7, #4
 8002da6:	481f      	ldr	r0, [pc, #124]	@ (8002e24 <tip_check+0xa8>)
 8002da8:	2222      	movs	r2, #34	@ 0x22
 8002daa:	f003 fd73 	bl	8006894 <HAL_UART_Transmit>
		error_handler();
 8002dae:	f000 f8c3 	bl	8002f38 <error_handler>
		tmp_return = TIP_CHECK_ERROR;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2205      	movs	r2, #5
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e025      	b.n	8002e06 <tip_check+0x8a>
	} else if (adc_buffer_average > ADC_NO_TIP_MIN_VALUE) {
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <tip_check+0xac>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	23fa      	movs	r3, #250	@ 0xfa
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d904      	bls.n	8002dd0 <tip_check+0x54>
		tmp_return = TIP_NOT_DETECTED;
 8002dc6:	2327      	movs	r3, #39	@ 0x27
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2204      	movs	r2, #4
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e01a      	b.n	8002e06 <tip_check+0x8a>
	} else if (adc_buffer_average < ADC_TIP_MAX_VALUE) {
 8002dd0:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <tip_check+0xac>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a15      	ldr	r2, [pc, #84]	@ (8002e2c <tip_check+0xb0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d804      	bhi.n	8002de4 <tip_check+0x68>
		tmp_return = TIP_DETECTED;
 8002dda:	2327      	movs	r3, #39	@ 0x27
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e010      	b.n	8002e06 <tip_check+0x8a>
	} else {
		char tx_buff[32];
		snprintf(tx_buff, sizeof(tx_buff), "Tip check flag other\r\n");
 8002de4:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <tip_check+0xb4>)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2120      	movs	r1, #32
 8002dea:	0018      	movs	r0, r3
 8002dec:	f004 f9aa 	bl	8007144 <sniprintf>
		HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 8002df0:	23fa      	movs	r3, #250	@ 0xfa
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	1d39      	adds	r1, r7, #4
 8002df6:	480b      	ldr	r0, [pc, #44]	@ (8002e24 <tip_check+0xa8>)
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f003 fd4b 	bl	8006894 <HAL_UART_Transmit>
		tmp_return = TIP_CHECK_ERROR;
 8002dfe:	2327      	movs	r3, #39	@ 0x27
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2205      	movs	r2, #5
 8002e04:	701a      	strb	r2, [r3, #0]
	}

	tip_check_flag = RESET;
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <tip_check+0xa0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
	return tmp_return;
 8002e0c:	2327      	movs	r3, #39	@ 0x27
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b00b      	add	sp, #44	@ 0x2c
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	20000938 	.word	0x20000938
 8002e20:	08007bd8 	.word	0x08007bd8
 8002e24:	200003d4 	.word	0x200003d4
 8002e28:	20000924 	.word	0x20000924
 8002e2c:	00000ed7 	.word	0x00000ed7
 8002e30:	08007bfc 	.word	0x08007bfc

08002e34 <read_pcb_temperature>:

/******    Other Functions   ******/
int16_t read_pcb_temperature(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af02      	add	r7, sp, #8
	int16_t temp_register = 0;
 8002e3a:	1dbb      	adds	r3, r7, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
	uint8_t tmp_buffer[2];

	if (HAL_I2C_Master_Receive(&hi2c1, PCT2075_I2C_ADDR, tmp_buffer, sizeof(tmp_buffer), 100) != HAL_ERROR) {
 8002e40:	1d3a      	adds	r2, r7, #4
 8002e42:	4819      	ldr	r0, [pc, #100]	@ (8002ea8 <read_pcb_temperature+0x74>)
 8002e44:	2364      	movs	r3, #100	@ 0x64
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	2192      	movs	r1, #146	@ 0x92
 8002e4c:	f001 fad8 	bl	8004400 <HAL_I2C_Master_Receive>
 8002e50:	0003      	movs	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d022      	beq.n	8002e9c <read_pcb_temperature+0x68>
		temp_register = (tmp_buffer[0] << 8);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	801a      	strh	r2, [r3, #0]
		temp_register |= tmp_buffer[1];
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	b219      	sxth	r1, r3
 8002e66:	1dbb      	adds	r3, r7, #6
 8002e68:	1dba      	adds	r2, r7, #6
 8002e6a:	8812      	ldrh	r2, [r2, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	801a      	strh	r2, [r3, #0]
		return ((temp_register >> 5) * 0.125); // Returns 11 bit signed (2s compl.) temperature in Celsius.
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	2200      	movs	r2, #0
 8002e74:	5e9b      	ldrsh	r3, [r3, r2]
 8002e76:	115b      	asrs	r3, r3, #5
 8002e78:	b21b      	sxth	r3, r3
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fd fce6 	bl	800084c <__aeabi_i2d>
 8002e80:	2200      	movs	r2, #0
 8002e82:	23ff      	movs	r3, #255	@ 0xff
 8002e84:	059b      	lsls	r3, r3, #22
 8002e86:	f7fd f9dd 	bl	8000244 <__aeabi_dmul>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	000b      	movs	r3, r1
 8002e8e:	0010      	movs	r0, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	f7fd fc9f 	bl	80007d4 <__aeabi_d2iz>
 8002e96:	0003      	movs	r3, r0
 8002e98:	b21b      	sxth	r3, r3
 8002e9a:	e000      	b.n	8002e9e <read_pcb_temperature+0x6a>
	} else {
		return ADC_READING_ERROR;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	@ (8002eac <read_pcb_temperature+0x78>)
	}
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	20000244 	.word	0x20000244
 8002eac:	000003e7 	.word	0x000003e7

08002eb0 <get_ac_delay_tick>:

uint32_t get_ac_delay_tick(void) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	return ac_delay_tick_ms;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	@ (8002ec0 <get_ac_delay_tick+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	20000934 	.word	0x20000934

08002ec4 <heater_off>:

void heater_off(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	on_periods = 0;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	@ (8002ed4 <heater_off+0x10>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	2000092a 	.word	0x2000092a

08002ed8 <set_new_temp>:

void set_new_temp(uint16_t new_temp) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	1dbb      	adds	r3, r7, #6
 8002ee2:	801a      	strh	r2, [r3, #0]
	set_temp = new_temp;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <set_new_temp+0x1c>)
 8002ee6:	1dba      	adds	r2, r7, #6
 8002ee8:	8812      	ldrh	r2, [r2, #0]
 8002eea:	801a      	strh	r2, [r3, #0]
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	2000013c 	.word	0x2000013c

08002ef8 <get_set_temp>:

uint16_t get_set_temp(void) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	return set_temp;
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <get_set_temp+0x10>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	2000013c 	.word	0x2000013c

08002f0c <get_tip_temp>:

uint16_t get_tip_temp(void) {
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	return tip_temp;
 8002f10:	4b02      	ldr	r3, [pc, #8]	@ (8002f1c <get_tip_temp+0x10>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	20000928 	.word	0x20000928

08002f20 <get_tip_state>:

uint8_t get_tip_state(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	return tip_state;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <get_tip_state+0x14>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	2000013e 	.word	0x2000013e

08002f38 <error_handler>:

void error_handler(void) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
	// Turn heater hard OFF
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, OFF);
 8002f3e:	2390      	movs	r3, #144	@ 0x90
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	2200      	movs	r2, #0
 8002f44:	2108      	movs	r1, #8
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 f97b 	bl	8004242 <HAL_GPIO_WritePin>
	heater_off();
 8002f4c:	f7ff ffba 	bl	8002ec4 <heater_off>
	
	char tx_buff[32];
	snprintf(tx_buff, sizeof(tx_buff), "Error handler: error - %d\r\n", error_flag);
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <error_handler+0x4c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4a0c      	ldr	r2, [pc, #48]	@ (8002f88 <error_handler+0x50>)
 8002f58:	0038      	movs	r0, r7
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	f004 f8f2 	bl	8007144 <sniprintf>
	HAL_UART_Transmit(&huart1, tx_buff, sizeof(tx_buff), 1000);
 8002f60:	23fa      	movs	r3, #250	@ 0xfa
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	0039      	movs	r1, r7
 8002f66:	4809      	ldr	r0, [pc, #36]	@ (8002f8c <error_handler+0x54>)
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f003 fc93 	bl	8006894 <HAL_UART_Transmit>
	tip_state = TIP_CHECK_ERROR;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <error_handler+0x58>)
 8002f70:	2205      	movs	r2, #5
 8002f72:	801a      	strh	r2, [r3, #0]
	error_flag = RESET;
 8002f74:	4b03      	ldr	r3, [pc, #12]	@ (8002f84 <error_handler+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b008      	add	sp, #32
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	20000930 	.word	0x20000930
 8002f88:	08007c14 	.word	0x08007c14
 8002f8c:	200003d4 	.word	0x200003d4
 8002f90:	2000013e 	.word	0x2000013e

08002f94 <get_power_bar_value>:

uint8_t get_power_bar_value(void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	return power_bar_value;
 8002f98:	4b02      	ldr	r3, [pc, #8]	@ (8002fa4 <get_power_bar_value+0x10>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000092b 	.word	0x2000092b

08002fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fa8:	480d      	ldr	r0, [pc, #52]	@ (8002fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002faa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fac:	480d      	ldr	r0, [pc, #52]	@ (8002fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fae:	490e      	ldr	r1, [pc, #56]	@ (8002fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <LoopForever+0xe>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb4:	e002      	b.n	8002fbc <LoopCopyDataInit>

08002fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fba:	3304      	adds	r3, #4

08002fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc0:	d3f9      	bcc.n	8002fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002ff4 <LoopForever+0x16>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc8:	e001      	b.n	8002fce <LoopFillZerobss>

08002fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fcc:	3204      	adds	r2, #4

08002fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd0:	d3fb      	bcc.n	8002fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fd2:	f7ff fc97 	bl	8002904 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002fd6:	f004 f905 	bl	80071e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fda:	f7fe f8b3 	bl	8001144 <main>

08002fde <LoopForever>:

LoopForever:
    b LoopForever
 8002fde:	e7fe      	b.n	8002fde <LoopForever>
  ldr   r0, =_estack
 8002fe0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe8:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8002fec:	0800978c 	.word	0x0800978c
  ldr r2, =_sbss
 8002ff0:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8002ff4:	20000a88 	.word	0x20000a88

08002ff8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ff8:	e7fe      	b.n	8002ff8 <ADC1_COMP_IRQHandler>
	...

08002ffc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003000:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <HAL_Init+0x24>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <HAL_Init+0x24>)
 8003006:	2110      	movs	r1, #16
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800300c:	2003      	movs	r0, #3
 800300e:	f000 f809 	bl	8003024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003012:	f7ff f9cb 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			@ (mov r8, r8)
 8003020:	40022000 	.word	0x40022000

08003024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_InitTick+0x5c>)
 800302e:	681c      	ldr	r4, [r3, #0]
 8003030:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <HAL_InitTick+0x60>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	0019      	movs	r1, r3
 8003036:	23fa      	movs	r3, #250	@ 0xfa
 8003038:	0098      	lsls	r0, r3, #2
 800303a:	f7fd f877 	bl	800012c <__udivsi3>
 800303e:	0003      	movs	r3, r0
 8003040:	0019      	movs	r1, r3
 8003042:	0020      	movs	r0, r4
 8003044:	f7fd f872 	bl	800012c <__udivsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fdbf 	bl	8003bce <HAL_SYSTICK_Config>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e00f      	b.n	8003078 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d80b      	bhi.n	8003076 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	2301      	movs	r3, #1
 8003062:	425b      	negs	r3, r3
 8003064:	2200      	movs	r2, #0
 8003066:	0018      	movs	r0, r3
 8003068:	f000 fd8c 	bl	8003b84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_InitTick+0x64>)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b003      	add	sp, #12
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	20000138 	.word	0x20000138
 8003084:	20000148 	.word	0x20000148
 8003088:	20000144 	.word	0x20000144

0800308c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_IncTick+0x1c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	001a      	movs	r2, r3
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <HAL_IncTick+0x20>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	18d2      	adds	r2, r2, r3
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <HAL_IncTick+0x20>)
 800309e:	601a      	str	r2, [r3, #0]
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			@ (mov r8, r8)
 80030a8:	20000148 	.word	0x20000148
 80030ac:	2000093c 	.word	0x2000093c

080030b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b02      	ldr	r3, [pc, #8]	@ (80030c0 <HAL_GetTick+0x10>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	2000093c 	.word	0x2000093c

080030c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff fff0 	bl	80030b0 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	d005      	beq.n	80030ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <HAL_Delay+0x44>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	001a      	movs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	f7ff ffe0 	bl	80030b0 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d8f7      	bhi.n	80030ec <HAL_Delay+0x28>
  {
  }
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b004      	add	sp, #16
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	20000148 	.word	0x20000148

0800310c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e125      	b.n	8003376 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2234      	movs	r2, #52	@ 0x34
 800313c:	2100      	movs	r1, #0
 800313e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff f956 	bl	80023f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	2210      	movs	r2, #16
 800314e:	4013      	ands	r3, r2
 8003150:	d000      	beq.n	8003154 <HAL_ADC_Init+0x48>
 8003152:	e103      	b.n	800335c <HAL_ADC_Init+0x250>
 8003154:	230f      	movs	r3, #15
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d000      	beq.n	8003160 <HAL_ADC_Init+0x54>
 800315e:	e0fd      	b.n	800335c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2204      	movs	r2, #4
 8003168:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800316a:	d000      	beq.n	800316e <HAL_ADC_Init+0x62>
 800316c:	e0f6      	b.n	800335c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	4a83      	ldr	r2, [pc, #524]	@ (8003380 <HAL_ADC_Init+0x274>)
 8003174:	4013      	ands	r3, r2
 8003176:	2202      	movs	r2, #2
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2203      	movs	r2, #3
 8003186:	4013      	ands	r3, r2
 8003188:	2b01      	cmp	r3, #1
 800318a:	d112      	bne.n	80031b2 <HAL_ADC_Init+0xa6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	4013      	ands	r3, r2
 8003196:	2b01      	cmp	r3, #1
 8003198:	d009      	beq.n	80031ae <HAL_ADC_Init+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	401a      	ands	r2, r3
 80031a6:	2380      	movs	r3, #128	@ 0x80
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Init+0xa6>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_Init+0xa8>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d116      	bne.n	80031e6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2218      	movs	r2, #24
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	0899      	lsrs	r1, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4964      	ldr	r1, [pc, #400]	@ (8003384 <HAL_ADC_Init+0x278>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7e1b      	ldrb	r3, [r3, #24]
 80031fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e5b      	ldrb	r3, [r3, #25]
 8003200:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003202:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e9b      	ldrb	r3, [r3, #26]
 8003208:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800320a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2b01      	cmp	r3, #1
 8003212:	d002      	beq.n	800321a <HAL_ADC_Init+0x10e>
 8003214:	2380      	movs	r3, #128	@ 0x80
 8003216:	015b      	lsls	r3, r3, #5
 8003218:	e000      	b.n	800321c <HAL_ADC_Init+0x110>
 800321a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800321c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003222:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d101      	bne.n	8003230 <HAL_ADC_Init+0x124>
 800322c:	2304      	movs	r3, #4
 800322e:	e000      	b.n	8003232 <HAL_ADC_Init+0x126>
 8003230:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003232:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2124      	movs	r1, #36	@ 0x24
 8003238:	5c5b      	ldrb	r3, [r3, r1]
 800323a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800323c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7edb      	ldrb	r3, [r3, #27]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d115      	bne.n	8003278 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7e9b      	ldrb	r3, [r3, #26]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	0252      	lsls	r2, r2, #9
 800325a:	4313      	orrs	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	e00b      	b.n	8003278 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	2220      	movs	r2, #32
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	2201      	movs	r2, #1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	23c2      	movs	r3, #194	@ 0xc2
 800327e:	33ff      	adds	r3, #255	@ 0xff
 8003280:	429a      	cmp	r2, r3
 8003282:	d007      	beq.n	8003294 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800328c:	4313      	orrs	r3, r2
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	2380      	movs	r3, #128	@ 0x80
 80032aa:	055b      	lsls	r3, r3, #21
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d01b      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d017      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d013      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d00f      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d00b      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d007      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d003      	beq.n	80032e8 <HAL_ADC_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d112      	bne.n	800330e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2107      	movs	r1, #7
 80032f4:	438a      	bics	r2, r1
 80032f6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6959      	ldr	r1, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	2207      	movs	r2, #7
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_ADC_Init+0x27c>)
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d10b      	bne.n	8003336 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	2203      	movs	r2, #3
 800332a:	4393      	bics	r3, r2
 800332c:	2201      	movs	r2, #1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003334:	e01c      	b.n	8003370 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333a:	2212      	movs	r2, #18
 800333c:	4393      	bics	r3, r2
 800333e:	2210      	movs	r2, #16
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334a:	2201      	movs	r2, #1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003352:	230f      	movs	r3, #15
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800335a:	e009      	b.n	8003370 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	2210      	movs	r2, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003370:	230f      	movs	r3, #15
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	fffffefd 	.word	0xfffffefd
 8003384:	fffe0219 	.word	0xfffe0219
 8003388:	833fffe7 	.word	0x833fffe7

0800338c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003398:	2317      	movs	r3, #23
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2204      	movs	r2, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	d15e      	bne.n	800346a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2234      	movs	r2, #52	@ 0x34
 80033b0:	5c9b      	ldrb	r3, [r3, r2]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Start_DMA+0x2e>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e05e      	b.n	8003478 <HAL_ADC_Start_DMA+0xec>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2234      	movs	r2, #52	@ 0x34
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	7e5b      	ldrb	r3, [r3, #25]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d007      	beq.n	80033da <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033ca:	2317      	movs	r3, #23
 80033cc:	18fc      	adds	r4, r7, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 f97b 	bl	80036cc <ADC_Enable>
 80033d6:	0003      	movs	r3, r0
 80033d8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033da:	2317      	movs	r3, #23
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d146      	bne.n	8003472 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	4a25      	ldr	r2, [pc, #148]	@ (8003480 <HAL_ADC_Start_DMA+0xf4>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	2280      	movs	r2, #128	@ 0x80
 80033ee:	0052      	lsls	r2, r2, #1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2234      	movs	r2, #52	@ 0x34
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <HAL_ADC_Start_DMA+0xf8>)
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_ADC_Start_DMA+0xfc>)
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_ADC_Start_DMA+0x100>)
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	221c      	movs	r2, #28
 8003422:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2110      	movs	r1, #16
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	430a      	orrs	r2, r1
 8003442:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3340      	adds	r3, #64	@ 0x40
 800344e:	0019      	movs	r1, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f000 fc10 	bl	8003c78 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	e003      	b.n	8003472 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800346a:	2317      	movs	r3, #23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003472:	2317      	movs	r3, #23
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b007      	add	sp, #28
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	fffff0fe 	.word	0xfffff0fe
 8003484:	080037d5 	.word	0x080037d5
 8003488:	08003889 	.word	0x08003889
 800348c:	080038a7 	.word	0x080038a7

08003490 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ba:	230f      	movs	r3, #15
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	055b      	lsls	r3, r3, #21
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d011      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x46>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d00d      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x46>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d009      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x46>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d005      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x46>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d001      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x46>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2234      	movs	r2, #52	@ 0x34
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x54>
 8003500:	2302      	movs	r3, #2
 8003502:	e0d0      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x1f6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2234      	movs	r2, #52	@ 0x34
 8003508:	2101      	movs	r1, #1
 800350a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2204      	movs	r2, #4
 8003514:	4013      	ands	r3, r2
 8003516:	d000      	beq.n	800351a <HAL_ADC_ConfigChannel+0x6a>
 8003518:	e0b4      	b.n	8003684 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a64      	ldr	r2, [pc, #400]	@ (80036b0 <HAL_ADC_ConfigChannel+0x200>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x76>
 8003524:	e082      	b.n	800362c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	409a      	lsls	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	055b      	lsls	r3, r3, #21
 8003544:	429a      	cmp	r2, r3
 8003546:	d037      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d033      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	2b02      	cmp	r3, #2
 8003556:	d02f      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	2b03      	cmp	r3, #3
 800355e:	d02b      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	2b04      	cmp	r3, #4
 8003566:	d027      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	2b05      	cmp	r3, #5
 800356e:	d023      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	2b06      	cmp	r3, #6
 8003576:	d01f      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	2b07      	cmp	r3, #7
 800357e:	d01b      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2107      	movs	r1, #7
 800358c:	400b      	ands	r3, r1
 800358e:	429a      	cmp	r2, r3
 8003590:	d012      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2107      	movs	r1, #7
 800359e:	438a      	bics	r2, r1
 80035a0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6959      	ldr	r1, [r3, #20]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2207      	movs	r2, #7
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d007      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x120>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b11      	cmp	r3, #17
 80035c6:	d003      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x120>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b12      	cmp	r3, #18
 80035ce:	d163      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80035d0:	4b38      	ldr	r3, [pc, #224]	@ (80036b4 <HAL_ADC_ConfigChannel+0x204>)
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d009      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x140>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b11      	cmp	r3, #17
 80035e2:	d102      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x13a>
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	03db      	lsls	r3, r3, #15
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x144>
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	045b      	lsls	r3, r3, #17
 80035ee:	e001      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x144>
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	4a2f      	ldr	r2, [pc, #188]	@ (80036b4 <HAL_ADC_ConfigChannel+0x204>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d14a      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003602:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <HAL_ADC_ConfigChannel+0x208>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	492d      	ldr	r1, [pc, #180]	@ (80036bc <HAL_ADC_ConfigChannel+0x20c>)
 8003608:	0018      	movs	r0, r3
 800360a:	f7fc fd8f 	bl	800012c <__udivsi3>
 800360e:	0003      	movs	r3, r0
 8003610:	001a      	movs	r2, r3
 8003612:	0013      	movs	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	189b      	adds	r3, r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800361c:	e002      	b.n	8003624 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_ConfigChannel+0x16e>
 800362a:	e035      	b.n	8003698 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2101      	movs	r1, #1
 8003638:	4099      	lsls	r1, r3
 800363a:	000b      	movs	r3, r1
 800363c:	43d9      	mvns	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	400a      	ands	r2, r1
 8003644:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b10      	cmp	r3, #16
 800364c:	d007      	beq.n	800365e <HAL_ADC_ConfigChannel+0x1ae>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b11      	cmp	r3, #17
 8003654:	d003      	beq.n	800365e <HAL_ADC_ConfigChannel+0x1ae>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b12      	cmp	r3, #18
 800365c:	d11c      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800365e:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <HAL_ADC_ConfigChannel+0x204>)
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b10      	cmp	r3, #16
 8003668:	d007      	beq.n	800367a <HAL_ADC_ConfigChannel+0x1ca>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b11      	cmp	r3, #17
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x1c6>
 8003672:	4b13      	ldr	r3, [pc, #76]	@ (80036c0 <HAL_ADC_ConfigChannel+0x210>)
 8003674:	e002      	b.n	800367c <HAL_ADC_ConfigChannel+0x1cc>
 8003676:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <HAL_ADC_ConfigChannel+0x214>)
 8003678:	e000      	b.n	800367c <HAL_ADC_ConfigChannel+0x1cc>
 800367a:	4b13      	ldr	r3, [pc, #76]	@ (80036c8 <HAL_ADC_ConfigChannel+0x218>)
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_ADC_ConfigChannel+0x204>)
 800367e:	400b      	ands	r3, r1
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e009      	b.n	8003698 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	2220      	movs	r2, #32
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2234      	movs	r2, #52	@ 0x34
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	781b      	ldrb	r3, [r3, #0]
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b004      	add	sp, #16
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	00001001 	.word	0x00001001
 80036b4:	40012708 	.word	0x40012708
 80036b8:	20000138 	.word	0x20000138
 80036bc:	000f4240 	.word	0x000f4240
 80036c0:	ffbfffff 	.word	0xffbfffff
 80036c4:	feffffff 	.word	0xfeffffff
 80036c8:	ff7fffff 	.word	0xff7fffff

080036cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2203      	movs	r2, #3
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d112      	bne.n	8003710 <ADC_Enable+0x44>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d009      	beq.n	800370c <ADC_Enable+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	401a      	ands	r2, r3
 8003704:	2380      	movs	r3, #128	@ 0x80
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	429a      	cmp	r2, r3
 800370a:	d101      	bne.n	8003710 <ADC_Enable+0x44>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <ADC_Enable+0x46>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d152      	bne.n	80037bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a2a      	ldr	r2, [pc, #168]	@ (80037c8 <ADC_Enable+0xfc>)
 800371e:	4013      	ands	r3, r2
 8003720:	d00d      	beq.n	800373e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003726:	2210      	movs	r2, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003732:	2201      	movs	r2, #1
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e03f      	b.n	80037be <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800374e:	4b1f      	ldr	r3, [pc, #124]	@ (80037cc <ADC_Enable+0x100>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	491f      	ldr	r1, [pc, #124]	@ (80037d0 <ADC_Enable+0x104>)
 8003754:	0018      	movs	r0, r3
 8003756:	f7fc fce9 	bl	800012c <__udivsi3>
 800375a:	0003      	movs	r3, r0
 800375c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800375e:	e002      	b.n	8003766 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f9      	bne.n	8003760 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800376c:	f7ff fca0 	bl	80030b0 <HAL_GetTick>
 8003770:	0003      	movs	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003774:	e01b      	b.n	80037ae <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003776:	f7ff fc9b 	bl	80030b0 <HAL_GetTick>
 800377a:	0002      	movs	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d914      	bls.n	80037ae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	4013      	ands	r3, r2
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00d      	beq.n	80037ae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	2210      	movs	r2, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	2201      	movs	r2, #1
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1dc      	bne.n	8003776 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	80000017 	.word	0x80000017
 80037cc:	20000138 	.word	0x20000138
 80037d0:	000f4240 	.word	0x000f4240

080037d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	2250      	movs	r2, #80	@ 0x50
 80037e8:	4013      	ands	r3, r2
 80037ea:	d140      	bne.n	800386e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	2280      	movs	r2, #128	@ 0x80
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	23c0      	movs	r3, #192	@ 0xc0
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4013      	ands	r3, r2
 8003806:	d12d      	bne.n	8003864 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800380c:	2b00      	cmp	r3, #0
 800380e:	d129      	bne.n	8003864 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2208      	movs	r2, #8
 8003818:	4013      	ands	r3, r2
 800381a:	2b08      	cmp	r3, #8
 800381c:	d122      	bne.n	8003864 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2204      	movs	r2, #4
 8003826:	4013      	ands	r3, r2
 8003828:	d110      	bne.n	800384c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	210c      	movs	r1, #12
 8003836:	438a      	bics	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <ADC_DMAConvCplt+0xb0>)
 8003840:	4013      	ands	r3, r2
 8003842:	2201      	movs	r2, #1
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38
 800384a:	e00b      	b.n	8003864 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	2220      	movs	r2, #32
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	2201      	movs	r2, #1
 800385e:	431a      	orrs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff f86c 	bl	8002944 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800386c:	e005      	b.n	800387a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	0010      	movs	r0, r2
 8003878:	4798      	blx	r3
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b004      	add	sp, #16
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	fffffefe 	.word	0xfffffefe

08003888 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff fdf9 	bl	8003490 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	2240      	movs	r2, #64	@ 0x40
 80038ba:	431a      	orrs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	2204      	movs	r2, #4
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7ff fde6 	bl	80034a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d4:	46c0      	nop			@ (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e4:	2317      	movs	r3, #23
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2234      	movs	r2, #52	@ 0x34
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_ADCEx_Calibration_Start+0x26>
 80038fe:	2302      	movs	r3, #2
 8003900:	e08d      	b.n	8003a1e <HAL_ADCEx_Calibration_Start+0x142>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2234      	movs	r2, #52	@ 0x34
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2203      	movs	r2, #3
 8003912:	4013      	ands	r3, r2
 8003914:	2b01      	cmp	r3, #1
 8003916:	d112      	bne.n	800393e <HAL_ADCEx_Calibration_Start+0x62>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	4013      	ands	r3, r2
 8003922:	2b01      	cmp	r3, #1
 8003924:	d009      	beq.n	800393a <HAL_ADCEx_Calibration_Start+0x5e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	401a      	ands	r2, r3
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	429a      	cmp	r2, r3
 8003938:	d101      	bne.n	800393e <HAL_ADCEx_Calibration_Start+0x62>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_ADCEx_Calibration_Start+0x64>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d15b      	bne.n	80039fc <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	4a37      	ldr	r2, [pc, #220]	@ (8003a28 <HAL_ADCEx_Calibration_Start+0x14c>)
 800394a:	4013      	ands	r3, r2
 800394c:	2202      	movs	r2, #2
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2203      	movs	r2, #3
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2103      	movs	r1, #3
 800396c:	438a      	bics	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2180      	movs	r1, #128	@ 0x80
 800397c:	0609      	lsls	r1, r1, #24
 800397e:	430a      	orrs	r2, r1
 8003980:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003982:	f7ff fb95 	bl	80030b0 <HAL_GetTick>
 8003986:	0003      	movs	r3, r0
 8003988:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800398a:	e01d      	b.n	80039c8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800398c:	f7ff fb90 	bl	80030b0 <HAL_GetTick>
 8003990:	0002      	movs	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d916      	bls.n	80039c8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	0fdb      	lsrs	r3, r3, #31
 80039a2:	07da      	lsls	r2, r3, #31
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d10d      	bne.n	80039c8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	2212      	movs	r2, #18
 80039b2:	4393      	bics	r3, r2
 80039b4:	2210      	movs	r2, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2234      	movs	r2, #52	@ 0x34
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02a      	b.n	8003a1e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0fdb      	lsrs	r3, r3, #31
 80039d0:	07da      	lsls	r2, r3, #31
 80039d2:	2380      	movs	r3, #128	@ 0x80
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d0d8      	beq.n	800398c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68d9      	ldr	r1, [r3, #12]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	2203      	movs	r2, #3
 80039f0:	4393      	bics	r3, r2
 80039f2:	2201      	movs	r2, #1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80039fa:	e009      	b.n	8003a10 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	2220      	movs	r2, #32
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003a08:	2317      	movs	r3, #23
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2234      	movs	r2, #52	@ 0x34
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003a18:	2317      	movs	r3, #23
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b006      	add	sp, #24
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	fffffefd 	.word	0xfffffefd

08003a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	0002      	movs	r2, r0
 8003a34:	1dfb      	adds	r3, r7, #7
 8003a36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	1dfb      	adds	r3, r7, #7
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a3e:	d809      	bhi.n	8003a54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	001a      	movs	r2, r3
 8003a46:	231f      	movs	r3, #31
 8003a48:	401a      	ands	r2, r3
 8003a4a:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <__NVIC_EnableIRQ+0x30>)
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4091      	lsls	r1, r2
 8003a50:	000a      	movs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
  }
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	e000e100 	.word	0xe000e100

08003a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	0002      	movs	r2, r0
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a74:	d828      	bhi.n	8003ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a76:	4a2f      	ldr	r2, [pc, #188]	@ (8003b34 <__NVIC_SetPriority+0xd4>)
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	33c0      	adds	r3, #192	@ 0xc0
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	589b      	ldr	r3, [r3, r2]
 8003a86:	1dfa      	adds	r2, r7, #7
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	400a      	ands	r2, r1
 8003a90:	00d2      	lsls	r2, r2, #3
 8003a92:	21ff      	movs	r1, #255	@ 0xff
 8003a94:	4091      	lsls	r1, r2
 8003a96:	000a      	movs	r2, r1
 8003a98:	43d2      	mvns	r2, r2
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	22ff      	movs	r2, #255	@ 0xff
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	2303      	movs	r3, #3
 8003aae:	4003      	ands	r3, r0
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ab4:	481f      	ldr	r0, [pc, #124]	@ (8003b34 <__NVIC_SetPriority+0xd4>)
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b25b      	sxtb	r3, r3
 8003abc:	089b      	lsrs	r3, r3, #2
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	33c0      	adds	r3, #192	@ 0xc0
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ac6:	e031      	b.n	8003b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <__NVIC_SetPriority+0xd8>)
 8003aca:	1dfb      	adds	r3, r7, #7
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	0019      	movs	r1, r3
 8003ad0:	230f      	movs	r3, #15
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	3b08      	subs	r3, #8
 8003ad6:	089b      	lsrs	r3, r3, #2
 8003ad8:	3306      	adds	r3, #6
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	3304      	adds	r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1dfa      	adds	r2, r7, #7
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	2203      	movs	r2, #3
 8003aea:	400a      	ands	r2, r1
 8003aec:	00d2      	lsls	r2, r2, #3
 8003aee:	21ff      	movs	r1, #255	@ 0xff
 8003af0:	4091      	lsls	r1, r2
 8003af2:	000a      	movs	r2, r1
 8003af4:	43d2      	mvns	r2, r2
 8003af6:	401a      	ands	r2, r3
 8003af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	22ff      	movs	r2, #255	@ 0xff
 8003b00:	401a      	ands	r2, r3
 8003b02:	1dfb      	adds	r3, r7, #7
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	0018      	movs	r0, r3
 8003b08:	2303      	movs	r3, #3
 8003b0a:	4003      	ands	r3, r0
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b10:	4809      	ldr	r0, [pc, #36]	@ (8003b38 <__NVIC_SetPriority+0xd8>)
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	001c      	movs	r4, r3
 8003b18:	230f      	movs	r3, #15
 8003b1a:	4023      	ands	r3, r4
 8003b1c:	3b08      	subs	r3, #8
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	430a      	orrs	r2, r1
 8003b22:	3306      	adds	r3, #6
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	18c3      	adds	r3, r0, r3
 8003b28:	3304      	adds	r3, #4
 8003b2a:	601a      	str	r2, [r3, #0]
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b003      	add	sp, #12
 8003b32:	bd90      	pop	{r4, r7, pc}
 8003b34:	e000e100 	.word	0xe000e100
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	1e5a      	subs	r2, r3, #1
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	045b      	lsls	r3, r3, #17
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d301      	bcc.n	8003b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b50:	2301      	movs	r3, #1
 8003b52:	e010      	b.n	8003b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b54:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <SysTick_Config+0x44>)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	3a01      	subs	r2, #1
 8003b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	425b      	negs	r3, r3
 8003b60:	2103      	movs	r1, #3
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7ff ff7c 	bl	8003a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <SysTick_Config+0x44>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6e:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <SysTick_Config+0x44>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	e000e010 	.word	0xe000e010

08003b84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	210f      	movs	r1, #15
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	1c02      	adds	r2, r0, #0
 8003b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7ff ff5d 	bl	8003a60 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bba:	1dfb      	adds	r3, r7, #7
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7ff ff33 	bl	8003a2c <__NVIC_EnableIRQ>
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff ffaf 	bl	8003b3c <SysTick_Config>
 8003bde:	0003      	movs	r3, r0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e036      	b.n	8003c6c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2221      	movs	r2, #33	@ 0x21
 8003c02:	2102      	movs	r1, #2
 8003c04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_DMA_Init+0x8c>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f946 	bl	8003ee0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2221      	movs	r2, #33	@ 0x21
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	2100      	movs	r1, #0
 8003c68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b004      	add	sp, #16
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	ffffc00f 	.word	0xffffc00f

08003c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2317      	movs	r3, #23
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_DMA_Start_IT+0x24>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e04f      	b.n	8003d3c <HAL_DMA_Start_IT+0xc4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2221      	movs	r2, #33	@ 0x21
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d13a      	bne.n	8003d26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2221      	movs	r2, #33	@ 0x21
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	438a      	bics	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8d7 	bl	8003e88 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	210e      	movs	r1, #14
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e00f      	b.n	8003d14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	210a      	movs	r1, #10
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2104      	movs	r1, #4
 8003d10:	438a      	bics	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e007      	b.n	8003d36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d2e:	2317      	movs	r3, #23
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2202      	movs	r2, #2
 8003d34:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003d36:	2317      	movs	r3, #23
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	781b      	ldrb	r3, [r3, #0]
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b006      	add	sp, #24
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	2204      	movs	r2, #4
 8003d62:	409a      	lsls	r2, r3
 8003d64:	0013      	movs	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d024      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x72>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	4013      	ands	r3, r2
 8003d72:	d020      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d107      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4091      	lsls	r1, r2
 8003d9c:	000a      	movs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d100      	bne.n	8003daa <HAL_DMA_IRQHandler+0x66>
 8003da8:	e06a      	b.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	0010      	movs	r0, r2
 8003db2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003db4:	e064      	b.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	2202      	movs	r2, #2
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	0013      	movs	r3, r2
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d02b      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xda>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d027      	beq.n	8003e1e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d10b      	bne.n	8003df2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	210a      	movs	r1, #10
 8003de6:	438a      	bics	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2221      	movs	r2, #33	@ 0x21
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4091      	lsls	r1, r2
 8003dfe:	000a      	movs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d036      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	0010      	movs	r0, r2
 8003e1a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e1c:	e030      	b.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2208      	movs	r2, #8
 8003e24:	409a      	lsls	r2, r3
 8003e26:	0013      	movs	r3, r2
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d028      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2208      	movs	r2, #8
 8003e32:	4013      	ands	r3, r2
 8003e34:	d024      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	210e      	movs	r1, #14
 8003e42:	438a      	bics	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4091      	lsls	r1, r2
 8003e52:	000a      	movs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2221      	movs	r2, #33	@ 0x21
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	0010      	movs	r0, r2
 8003e7c:	4798      	blx	r3
    }
  }
}
 8003e7e:	e7ff      	b.n	8003e80 <HAL_DMA_IRQHandler+0x13c>
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4091      	lsls	r1, r2
 8003ea2:	000a      	movs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d108      	bne.n	8003ec8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ec6:	e007      	b.n	8003ed8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b004      	add	sp, #16
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a08      	ldr	r2, [pc, #32]	@ (8003f10 <DMA_CalcBaseAndBitshift+0x30>)
 8003eee:	4694      	mov	ip, r2
 8003ef0:	4463      	add	r3, ip
 8003ef2:	2114      	movs	r1, #20
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fc f919 	bl	800012c <__udivsi3>
 8003efa:	0003      	movs	r3, r0
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a03      	ldr	r2, [pc, #12]	@ (8003f14 <DMA_CalcBaseAndBitshift+0x34>)
 8003f06:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b002      	add	sp, #8
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	bffdfff8 	.word	0xbffdfff8
 8003f14:	40020000 	.word	0x40020000

08003f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f26:	e155      	b.n	80041d4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4091      	lsls	r1, r2
 8003f32:	000a      	movs	r2, r1
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d100      	bne.n	8003f40 <HAL_GPIO_Init+0x28>
 8003f3e:	e146      	b.n	80041ce <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d005      	beq.n	8003f58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2203      	movs	r2, #3
 8003f52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d130      	bne.n	8003fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	409a      	lsls	r2, r3
 8003f66:	0013      	movs	r3, r2
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f8e:	2201      	movs	r2, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	43da      	mvns	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d017      	beq.n	8003ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d123      	bne.n	800404a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	08da      	lsrs	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3208      	adds	r2, #8
 800400a:	0092      	lsls	r2, r2, #2
 800400c:	58d3      	ldr	r3, [r2, r3]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2207      	movs	r2, #7
 8004014:	4013      	ands	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	43da      	mvns	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2107      	movs	r1, #7
 800402e:	400b      	ands	r3, r1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	409a      	lsls	r2, r3
 8004034:	0013      	movs	r3, r2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	08da      	lsrs	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3208      	adds	r2, #8
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	6939      	ldr	r1, [r7, #16]
 8004048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	43da      	mvns	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	401a      	ands	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	0013      	movs	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	23c0      	movs	r3, #192	@ 0xc0
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	4013      	ands	r3, r2
 8004088:	d100      	bne.n	800408c <HAL_GPIO_Init+0x174>
 800408a:	e0a0      	b.n	80041ce <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800408c:	4b57      	ldr	r3, [pc, #348]	@ (80041ec <HAL_GPIO_Init+0x2d4>)
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	4b56      	ldr	r3, [pc, #344]	@ (80041ec <HAL_GPIO_Init+0x2d4>)
 8004092:	2101      	movs	r1, #1
 8004094:	430a      	orrs	r2, r1
 8004096:	619a      	str	r2, [r3, #24]
 8004098:	4b54      	ldr	r3, [pc, #336]	@ (80041ec <HAL_GPIO_Init+0x2d4>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2201      	movs	r2, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040a4:	4a52      	ldr	r2, [pc, #328]	@ (80041f0 <HAL_GPIO_Init+0x2d8>)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	589b      	ldr	r3, [r3, r2]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2203      	movs	r2, #3
 80040b6:	4013      	ands	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	220f      	movs	r2, #15
 80040bc:	409a      	lsls	r2, r3
 80040be:	0013      	movs	r3, r2
 80040c0:	43da      	mvns	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	2390      	movs	r3, #144	@ 0x90
 80040cc:	05db      	lsls	r3, r3, #23
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d019      	beq.n	8004106 <HAL_GPIO_Init+0x1ee>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a47      	ldr	r2, [pc, #284]	@ (80041f4 <HAL_GPIO_Init+0x2dc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_GPIO_Init+0x1ea>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a46      	ldr	r2, [pc, #280]	@ (80041f8 <HAL_GPIO_Init+0x2e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00d      	beq.n	80040fe <HAL_GPIO_Init+0x1e6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a45      	ldr	r2, [pc, #276]	@ (80041fc <HAL_GPIO_Init+0x2e4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <HAL_GPIO_Init+0x1e2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a44      	ldr	r2, [pc, #272]	@ (8004200 <HAL_GPIO_Init+0x2e8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_GPIO_Init+0x1de>
 80040f2:	2304      	movs	r3, #4
 80040f4:	e008      	b.n	8004108 <HAL_GPIO_Init+0x1f0>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e006      	b.n	8004108 <HAL_GPIO_Init+0x1f0>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e004      	b.n	8004108 <HAL_GPIO_Init+0x1f0>
 80040fe:	2302      	movs	r3, #2
 8004100:	e002      	b.n	8004108 <HAL_GPIO_Init+0x1f0>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_GPIO_Init+0x1f0>
 8004106:	2300      	movs	r3, #0
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	2103      	movs	r1, #3
 800410c:	400a      	ands	r2, r1
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	4093      	lsls	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004118:	4935      	ldr	r1, [pc, #212]	@ (80041f0 <HAL_GPIO_Init+0x2d8>)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	3302      	adds	r3, #2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004126:	4b37      	ldr	r3, [pc, #220]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43da      	mvns	r2, r3
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	035b      	lsls	r3, r3, #13
 800413e:	4013      	ands	r3, r2
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800414a:	4b2e      	ldr	r3, [pc, #184]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004150:	4b2c      	ldr	r3, [pc, #176]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43da      	mvns	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	039b      	lsls	r3, r3, #14
 8004168:	4013      	ands	r3, r2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800417a:	4b22      	ldr	r3, [pc, #136]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	029b      	lsls	r3, r3, #10
 8004192:	4013      	ands	r3, r2
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800419e:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80041a4:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	025b      	lsls	r3, r3, #9
 80041bc:	4013      	ands	r3, r2
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80041c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <HAL_GPIO_Init+0x2ec>)
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	3301      	adds	r3, #1
 80041d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	40da      	lsrs	r2, r3
 80041dc:	1e13      	subs	r3, r2, #0
 80041de:	d000      	beq.n	80041e2 <HAL_GPIO_Init+0x2ca>
 80041e0:	e6a2      	b.n	8003f28 <HAL_GPIO_Init+0x10>
  } 
}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	46c0      	nop			@ (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010000 	.word	0x40010000
 80041f4:	48000400 	.word	0x48000400
 80041f8:	48000800 	.word	0x48000800
 80041fc:	48000c00 	.word	0x48000c00
 8004200:	48001000 	.word	0x48001000
 8004204:	40010400 	.word	0x40010400

08004208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	000a      	movs	r2, r1
 8004212:	1cbb      	adds	r3, r7, #2
 8004214:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	1cba      	adds	r2, r7, #2
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	4013      	ands	r3, r2
 8004220:	d004      	beq.n	800422c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004222:	230f      	movs	r3, #15
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	e003      	b.n	8004234 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800422c:	230f      	movs	r3, #15
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004234:	230f      	movs	r3, #15
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	781b      	ldrb	r3, [r3, #0]
  }
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b004      	add	sp, #16
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	0008      	movs	r0, r1
 800424c:	0011      	movs	r1, r2
 800424e:	1cbb      	adds	r3, r7, #2
 8004250:	1c02      	adds	r2, r0, #0
 8004252:	801a      	strh	r2, [r3, #0]
 8004254:	1c7b      	adds	r3, r7, #1
 8004256:	1c0a      	adds	r2, r1, #0
 8004258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800425a:	1c7b      	adds	r3, r7, #1
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004262:	1cbb      	adds	r3, r7, #2
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800426a:	e003      	b.n	8004274 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800426c:	1cbb      	adds	r3, r7, #2
 800426e:	881a      	ldrh	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004274:	46c0      	nop			@ (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	0002      	movs	r2, r0
 8004284:	1dbb      	adds	r3, r7, #6
 8004286:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	1dba      	adds	r2, r7, #6
 800428e:	8812      	ldrh	r2, [r2, #0]
 8004290:	4013      	ands	r3, r2
 8004292:	d008      	beq.n	80042a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004296:	1dba      	adds	r2, r7, #6
 8004298:	8812      	ldrh	r2, [r2, #0]
 800429a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800429c:	1dbb      	adds	r3, r7, #6
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fb34 	bl	800290e <HAL_GPIO_EXTI_Callback>
  }
}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b002      	add	sp, #8
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	40010400 	.word	0x40010400

080042b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e08f      	b.n	80043e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2241      	movs	r2, #65	@ 0x41
 80042ca:	5c9b      	ldrb	r3, [r3, r2]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2240      	movs	r2, #64	@ 0x40
 80042d6:	2100      	movs	r1, #0
 80042d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7fe f8fb 	bl	80024d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2241      	movs	r2, #65	@ 0x41
 80042e6:	2124      	movs	r1, #36	@ 0x24
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	438a      	bics	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	493b      	ldr	r1, [pc, #236]	@ (80043f0 <HAL_I2C_Init+0x13c>)
 8004304:	400a      	ands	r2, r1
 8004306:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4938      	ldr	r1, [pc, #224]	@ (80043f4 <HAL_I2C_Init+0x140>)
 8004314:	400a      	ands	r2, r1
 8004316:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d108      	bne.n	8004332 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0209      	lsls	r1, r1, #8
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	e007      	b.n	8004342 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2184      	movs	r1, #132	@ 0x84
 800433c:	0209      	lsls	r1, r1, #8
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d109      	bne.n	800435e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2180      	movs	r1, #128	@ 0x80
 8004356:	0109      	lsls	r1, r1, #4
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	e007      	b.n	800436e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4923      	ldr	r1, [pc, #140]	@ (80043f8 <HAL_I2C_Init+0x144>)
 800436a:	400a      	ands	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4920      	ldr	r1, [pc, #128]	@ (80043fc <HAL_I2C_Init+0x148>)
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	491a      	ldr	r1, [pc, #104]	@ (80043f4 <HAL_I2C_Init+0x140>)
 800438a:	400a      	ands	r2, r1
 800438c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	431a      	orrs	r2, r3
 8004398:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69d9      	ldr	r1, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2241      	movs	r2, #65	@ 0x41
 80043d2:	2120      	movs	r1, #32
 80043d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2242      	movs	r2, #66	@ 0x42
 80043e0:	2100      	movs	r1, #0
 80043e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	f0ffffff 	.word	0xf0ffffff
 80043f4:	ffff7fff 	.word	0xffff7fff
 80043f8:	fffff7ff 	.word	0xfffff7ff
 80043fc:	02008000 	.word	0x02008000

08004400 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	0008      	movs	r0, r1
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	0019      	movs	r1, r3
 800440e:	230a      	movs	r3, #10
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	1c02      	adds	r2, r0, #0
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	2308      	movs	r3, #8
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	1c0a      	adds	r2, r1, #0
 800441c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2241      	movs	r2, #65	@ 0x41
 8004422:	5c9b      	ldrb	r3, [r3, r2]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	d000      	beq.n	800442c <HAL_I2C_Master_Receive+0x2c>
 800442a:	e0e8      	b.n	80045fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	5c9b      	ldrb	r3, [r3, r2]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_I2C_Master_Receive+0x3a>
 8004436:	2302      	movs	r3, #2
 8004438:	e0e2      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2240      	movs	r2, #64	@ 0x40
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004442:	f7fe fe35 	bl	80030b0 <HAL_GetTick>
 8004446:	0003      	movs	r3, r0
 8004448:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	0219      	lsls	r1, r3, #8
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2319      	movs	r3, #25
 8004456:	2201      	movs	r2, #1
 8004458:	f000 f8fc 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cd      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2241      	movs	r2, #65	@ 0x41
 8004468:	2122      	movs	r1, #34	@ 0x22
 800446a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2242      	movs	r2, #66	@ 0x42
 8004470:	2110      	movs	r1, #16
 8004472:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2208      	movs	r2, #8
 8004484:	18ba      	adds	r2, r7, r2
 8004486:	8812      	ldrh	r2, [r2, #0]
 8004488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2bff      	cmp	r3, #255	@ 0xff
 8004498:	d911      	bls.n	80044be <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	045c      	lsls	r4, r3, #17
 80044aa:	230a      	movs	r3, #10
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	8819      	ldrh	r1, [r3, #0]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	4b55      	ldr	r3, [pc, #340]	@ (8004608 <HAL_I2C_Master_Receive+0x208>)
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	0023      	movs	r3, r4
 80044b8:	f000 fafe 	bl	8004ab8 <I2C_TransferConfig>
 80044bc:	e076      	b.n	80045ac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	2380      	movs	r3, #128	@ 0x80
 80044d0:	049c      	lsls	r4, r3, #18
 80044d2:	230a      	movs	r3, #10
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	8819      	ldrh	r1, [r3, #0]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <HAL_I2C_Master_Receive+0x208>)
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	0023      	movs	r3, r4
 80044e0:	f000 faea 	bl	8004ab8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80044e4:	e062      	b.n	80045ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f94d 	bl	800478c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f2:	1e03      	subs	r3, r0, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e082      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d03a      	beq.n	80045ac <HAL_I2C_Master_Receive+0x1ac>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d136      	bne.n	80045ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800453e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	0013      	movs	r3, r2
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	@ 0x80
 800454c:	f000 f882 	bl	8004654 <I2C_WaitOnFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e053      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2bff      	cmp	r3, #255	@ 0xff
 8004560:	d911      	bls.n	8004586 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	22ff      	movs	r2, #255	@ 0xff
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456c:	b2da      	uxtb	r2, r3
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	045c      	lsls	r4, r3, #17
 8004572:	230a      	movs	r3, #10
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	8819      	ldrh	r1, [r3, #0]
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	0023      	movs	r3, r4
 8004580:	f000 fa9a 	bl	8004ab8 <I2C_TransferConfig>
 8004584:	e012      	b.n	80045ac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004594:	b2da      	uxtb	r2, r3
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	049c      	lsls	r4, r3, #18
 800459a:	230a      	movs	r3, #10
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	8819      	ldrh	r1, [r3, #0]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	0023      	movs	r3, r4
 80045a8:	f000 fa86 	bl	8004ab8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d197      	bne.n	80044e6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f8a1 	bl	8004704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e01a      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2220      	movs	r2, #32
 80045d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	490b      	ldr	r1, [pc, #44]	@ (800460c <HAL_I2C_Master_Receive+0x20c>)
 80045de:	400a      	ands	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2241      	movs	r2, #65	@ 0x41
 80045e6:	2120      	movs	r1, #32
 80045e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2242      	movs	r2, #66	@ 0x42
 80045ee:	2100      	movs	r1, #0
 80045f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	2100      	movs	r1, #0
 80045f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b007      	add	sp, #28
 8004606:	bd90      	pop	{r4, r7, pc}
 8004608:	80002400 	.word	0x80002400
 800460c:	fe00e800 	.word	0xfe00e800

08004610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2202      	movs	r2, #2
 8004620:	4013      	ands	r3, r2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2201      	movs	r2, #1
 8004636:	4013      	ands	r3, r2
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2101      	movs	r1, #1
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]
  }
}
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}

08004654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004664:	e03a      	b.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f92b 	bl	80048c8 <I2C_IsErrorOccurred>
 8004672:	1e03      	subs	r3, r0, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e040      	b.n	80046fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	d02d      	beq.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004680:	f7fe fd16 	bl	80030b0 <HAL_GetTick>
 8004684:	0002      	movs	r2, r0
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d122      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	425a      	negs	r2, r3
 80046a6:	4153      	adcs	r3, r2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	001a      	movs	r2, r3
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d113      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b8:	2220      	movs	r2, #32
 80046ba:	431a      	orrs	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2241      	movs	r2, #65	@ 0x41
 80046c4:	2120      	movs	r1, #32
 80046c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2242      	movs	r2, #66	@ 0x42
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2240      	movs	r2, #64	@ 0x40
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e00f      	b.n	80046fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	4013      	ands	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	425a      	negs	r2, r3
 80046ec:	4153      	adcs	r3, r2
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	001a      	movs	r2, r3
 80046f2:	1dfb      	adds	r3, r7, #7
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d0b5      	beq.n	8004666 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b004      	add	sp, #16
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004710:	e02f      	b.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f8d5 	bl	80048c8 <I2C_IsErrorOccurred>
 800471e:	1e03      	subs	r3, r0, #0
 8004720:	d001      	beq.n	8004726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e02d      	b.n	8004782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fe fcc3 	bl	80030b0 <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11a      	bne.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2220      	movs	r2, #32
 8004744:	4013      	ands	r3, r2
 8004746:	2b20      	cmp	r3, #32
 8004748:	d013      	beq.n	8004772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	2220      	movs	r2, #32
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2241      	movs	r2, #65	@ 0x41
 800475a:	2120      	movs	r1, #32
 800475c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2242      	movs	r2, #66	@ 0x42
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2240      	movs	r2, #64	@ 0x40
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e007      	b.n	8004782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2220      	movs	r2, #32
 800477a:	4013      	ands	r3, r2
 800477c:	2b20      	cmp	r3, #32
 800477e:	d1c8      	bne.n	8004712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004798:	2317      	movs	r3, #23
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047a0:	e07b      	b.n	800489a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f000 f88d 	bl	80048c8 <I2C_IsErrorOccurred>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d003      	beq.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80047b2:	2317      	movs	r3, #23
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d140      	bne.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80047c8:	2117      	movs	r1, #23
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d13b      	bne.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2204      	movs	r2, #4
 80047da:	4013      	ands	r3, r2
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d106      	bne.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d123      	bne.n	8004844 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2204      	movs	r2, #4
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2220      	movs	r2, #32
 8004810:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4929      	ldr	r1, [pc, #164]	@ (80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800481e:	400a      	ands	r2, r1
 8004820:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2241      	movs	r2, #65	@ 0x41
 8004826:	2120      	movs	r1, #32
 8004828:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2242      	movs	r2, #66	@ 0x42
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2240      	movs	r2, #64	@ 0x40
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800483a:	2317      	movs	r3, #23
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	2201      	movs	r2, #1
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e002      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800484a:	f7fe fc31 	bl	80030b0 <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11c      	bne.n	800489a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004860:	2017      	movs	r0, #23
 8004862:	183b      	adds	r3, r7, r0
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d117      	bne.n	800489a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2204      	movs	r2, #4
 8004872:	4013      	ands	r3, r2
 8004874:	2b04      	cmp	r3, #4
 8004876:	d010      	beq.n	800489a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	2220      	movs	r2, #32
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2241      	movs	r2, #65	@ 0x41
 8004888:	2120      	movs	r1, #32
 800488a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2240      	movs	r2, #64	@ 0x40
 8004890:	2100      	movs	r1, #0
 8004892:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004894:	183b      	adds	r3, r7, r0
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2204      	movs	r2, #4
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d005      	beq.n	80048b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80048a8:	2317      	movs	r3, #23
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d100      	bne.n	80048b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80048b2:	e776      	b.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80048b4:	2317      	movs	r3, #23
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	781b      	ldrb	r3, [r3, #0]
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b006      	add	sp, #24
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	fe00e800 	.word	0xfe00e800

080048c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2327      	movs	r3, #39	@ 0x27
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2210      	movs	r2, #16
 80048f0:	4013      	ands	r3, r2
 80048f2:	d100      	bne.n	80048f6 <I2C_IsErrorOccurred+0x2e>
 80048f4:	e079      	b.n	80049ea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2210      	movs	r2, #16
 80048fc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048fe:	e057      	b.n	80049b0 <I2C_IsErrorOccurred+0xe8>
 8004900:	2227      	movs	r2, #39	@ 0x27
 8004902:	18bb      	adds	r3, r7, r2
 8004904:	18ba      	adds	r2, r7, r2
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	d04f      	beq.n	80049b0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004910:	f7fe fbce 	bl	80030b0 <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <I2C_IsErrorOccurred+0x5e>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d144      	bne.n	80049b0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4013      	ands	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004934:	2013      	movs	r0, #19
 8004936:	183b      	adds	r3, r7, r0
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	2142      	movs	r1, #66	@ 0x42
 800493c:	5c52      	ldrb	r2, [r2, r1]
 800493e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	401a      	ands	r2, r3
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	429a      	cmp	r2, r3
 8004952:	d126      	bne.n	80049a2 <I2C_IsErrorOccurred+0xda>
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	01db      	lsls	r3, r3, #7
 800495a:	429a      	cmp	r2, r3
 800495c:	d021      	beq.n	80049a2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800495e:	183b      	adds	r3, r7, r0
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b20      	cmp	r3, #32
 8004964:	d01d      	beq.n	80049a2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2180      	movs	r1, #128	@ 0x80
 8004972:	01c9      	lsls	r1, r1, #7
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004978:	f7fe fb9a 	bl	80030b0 <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004980:	e00f      	b.n	80049a2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004982:	f7fe fb95 	bl	80030b0 <HAL_GetTick>
 8004986:	0002      	movs	r2, r0
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b19      	cmp	r3, #25
 800498e:	d908      	bls.n	80049a2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	2220      	movs	r2, #32
 8004994:	4313      	orrs	r3, r2
 8004996:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004998:	2327      	movs	r3, #39	@ 0x27
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]

              break;
 80049a0:	e006      	b.n	80049b0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d1e8      	bne.n	8004982 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2220      	movs	r2, #32
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d004      	beq.n	80049c8 <I2C_IsErrorOccurred+0x100>
 80049be:	2327      	movs	r3, #39	@ 0x27
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d09b      	beq.n	8004900 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049c8:	2327      	movs	r3, #39	@ 0x27
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2220      	movs	r2, #32
 80049d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2204      	movs	r2, #4
 80049de:	4313      	orrs	r3, r2
 80049e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049e2:	2327      	movs	r3, #39	@ 0x27
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4013      	ands	r3, r2
 80049fa:	d00c      	beq.n	8004a16 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2201      	movs	r2, #1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2280      	movs	r2, #128	@ 0x80
 8004a0a:	0052      	lsls	r2, r2, #1
 8004a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a0e:	2327      	movs	r3, #39	@ 0x27
 8004a10:	18fb      	adds	r3, r7, r3
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d00c      	beq.n	8004a3a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	2208      	movs	r2, #8
 8004a24:	4313      	orrs	r3, r2
 8004a26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2280      	movs	r2, #128	@ 0x80
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a32:	2327      	movs	r3, #39	@ 0x27
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	2380      	movs	r3, #128	@ 0x80
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4013      	ands	r3, r2
 8004a42:	d00c      	beq.n	8004a5e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	2202      	movs	r2, #2
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2280      	movs	r2, #128	@ 0x80
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a56:	2327      	movs	r3, #39	@ 0x27
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004a5e:	2327      	movs	r3, #39	@ 0x27
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7ff fdd0 	bl	8004610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	490e      	ldr	r1, [pc, #56]	@ (8004ab4 <I2C_IsErrorOccurred+0x1ec>)
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2241      	movs	r2, #65	@ 0x41
 8004a90:	2120      	movs	r1, #32
 8004a92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2242      	movs	r2, #66	@ 0x42
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2240      	movs	r2, #64	@ 0x40
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004aa4:	2327      	movs	r3, #39	@ 0x27
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b00a      	add	sp, #40	@ 0x28
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	fe00e800 	.word	0xfe00e800

08004ab8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	0008      	movs	r0, r1
 8004ac2:	0011      	movs	r1, r2
 8004ac4:	607b      	str	r3, [r7, #4]
 8004ac6:	240a      	movs	r4, #10
 8004ac8:	193b      	adds	r3, r7, r4
 8004aca:	1c02      	adds	r2, r0, #0
 8004acc:	801a      	strh	r2, [r3, #0]
 8004ace:	2009      	movs	r0, #9
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	1c0a      	adds	r2, r1, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad6:	193b      	adds	r3, r7, r4
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	059b      	lsls	r3, r3, #22
 8004adc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ade:	183b      	adds	r3, r7, r0
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	0419      	lsls	r1, r3, #16
 8004ae4:	23ff      	movs	r3, #255	@ 0xff
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	4313      	orrs	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b02:	0d51      	lsrs	r1, r2, #21
 8004b04:	2280      	movs	r2, #128	@ 0x80
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	400a      	ands	r2, r1
 8004b0a:	4907      	ldr	r1, [pc, #28]	@ (8004b28 <I2C_TransferConfig+0x70>)
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	43d2      	mvns	r2, r2
 8004b10:	401a      	ands	r2, r3
 8004b12:	0011      	movs	r1, r2
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b007      	add	sp, #28
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	03ff63ff 	.word	0x03ff63ff

08004b2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2241      	movs	r2, #65	@ 0x41
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d138      	bne.n	8004bb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	5c9b      	ldrb	r3, [r3, r2]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e032      	b.n	8004bb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2240      	movs	r2, #64	@ 0x40
 8004b54:	2101      	movs	r1, #1
 8004b56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2241      	movs	r2, #65	@ 0x41
 8004b5c:	2124      	movs	r1, #36	@ 0x24
 8004b5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	438a      	bics	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4911      	ldr	r1, [pc, #68]	@ (8004bc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2241      	movs	r2, #65	@ 0x41
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2240      	movs	r2, #64	@ 0x40
 8004bac:	2100      	movs	r1, #0
 8004bae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b002      	add	sp, #8
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	ffffefff 	.word	0xffffefff

08004bc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2241      	movs	r2, #65	@ 0x41
 8004bd2:	5c9b      	ldrb	r3, [r3, r2]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d139      	bne.n	8004c4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e033      	b.n	8004c50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2240      	movs	r2, #64	@ 0x40
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2241      	movs	r2, #65	@ 0x41
 8004bf4:	2124      	movs	r1, #36	@ 0x24
 8004bf6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2101      	movs	r1, #1
 8004c04:	438a      	bics	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a11      	ldr	r2, [pc, #68]	@ (8004c58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2101      	movs	r1, #1
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2241      	movs	r2, #65	@ 0x41
 8004c3e:	2120      	movs	r1, #32
 8004c40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2240      	movs	r2, #64	@ 0x40
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	0018      	movs	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b004      	add	sp, #16
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	fffff0ff 	.word	0xfffff0ff

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f000 fb76 	bl	800535c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2201      	movs	r2, #1
 8004c76:	4013      	ands	r3, r2
 8004c78:	d100      	bne.n	8004c7c <HAL_RCC_OscConfig+0x20>
 8004c7a:	e08e      	b.n	8004d9a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c7c:	4bc5      	ldr	r3, [pc, #788]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	220c      	movs	r2, #12
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d00e      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c88:	4bc2      	ldr	r3, [pc, #776]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	220c      	movs	r2, #12
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d117      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x68>
 8004c94:	4bbf      	ldr	r3, [pc, #764]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	23c0      	movs	r3, #192	@ 0xc0
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	401a      	ands	r2, r3
 8004c9e:	2380      	movs	r3, #128	@ 0x80
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca6:	4bbb      	ldr	r3, [pc, #748]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2380      	movs	r3, #128	@ 0x80
 8004cac:	029b      	lsls	r3, r3, #10
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d100      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x58>
 8004cb2:	e071      	b.n	8004d98 <HAL_RCC_OscConfig+0x13c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d000      	beq.n	8004cbe <HAL_RCC_OscConfig+0x62>
 8004cbc:	e06c      	b.n	8004d98 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f000 fb4c 	bl	800535c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_OscConfig+0x80>
 8004ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4bb0      	ldr	r3, [pc, #704]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	0249      	lsls	r1, r1, #9
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e02f      	b.n	8004d3c <HAL_RCC_OscConfig+0xe0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10c      	bne.n	8004cfe <HAL_RCC_OscConfig+0xa2>
 8004ce4:	4bab      	ldr	r3, [pc, #684]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4baa      	ldr	r3, [pc, #680]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004cea:	49ab      	ldr	r1, [pc, #684]	@ (8004f98 <HAL_RCC_OscConfig+0x33c>)
 8004cec:	400a      	ands	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	4ba8      	ldr	r3, [pc, #672]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4ba7      	ldr	r3, [pc, #668]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004cf6:	49a9      	ldr	r1, [pc, #676]	@ (8004f9c <HAL_RCC_OscConfig+0x340>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e01e      	b.n	8004d3c <HAL_RCC_OscConfig+0xe0>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10e      	bne.n	8004d24 <HAL_RCC_OscConfig+0xc8>
 8004d06:	4ba3      	ldr	r3, [pc, #652]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4ba2      	ldr	r3, [pc, #648]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	02c9      	lsls	r1, r1, #11
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	4b9f      	ldr	r3, [pc, #636]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b9e      	ldr	r3, [pc, #632]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d1a:	2180      	movs	r1, #128	@ 0x80
 8004d1c:	0249      	lsls	r1, r1, #9
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xe0>
 8004d24:	4b9b      	ldr	r3, [pc, #620]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b9a      	ldr	r3, [pc, #616]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d2a:	499b      	ldr	r1, [pc, #620]	@ (8004f98 <HAL_RCC_OscConfig+0x33c>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	4b98      	ldr	r3, [pc, #608]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4b97      	ldr	r3, [pc, #604]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d36:	4999      	ldr	r1, [pc, #612]	@ (8004f9c <HAL_RCC_OscConfig+0x340>)
 8004d38:	400a      	ands	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d014      	beq.n	8004d6e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe f9b4 	bl	80030b0 <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4e:	f7fe f9af 	bl	80030b0 <HAL_GetTick>
 8004d52:	0002      	movs	r2, r0
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	@ 0x64
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e2fd      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d60:	4b8c      	ldr	r3, [pc, #560]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	029b      	lsls	r3, r3, #10
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0xf2>
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fe f99f 	bl	80030b0 <HAL_GetTick>
 8004d72:	0003      	movs	r3, r0
 8004d74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fe f99a 	bl	80030b0 <HAL_GetTick>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e2e8      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8a:	4b82      	ldr	r3, [pc, #520]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	029b      	lsls	r3, r3, #10
 8004d92:	4013      	ands	r3, r2
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x11c>
 8004d96:	e000      	b.n	8004d9a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d98:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	d100      	bne.n	8004da6 <HAL_RCC_OscConfig+0x14a>
 8004da4:	e06c      	b.n	8004e80 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004da6:	4b7b      	ldr	r3, [pc, #492]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	220c      	movs	r2, #12
 8004dac:	4013      	ands	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004db0:	4b78      	ldr	r3, [pc, #480]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	220c      	movs	r2, #12
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d11f      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1a0>
 8004dbc:	4b75      	ldr	r3, [pc, #468]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	23c0      	movs	r3, #192	@ 0xc0
 8004dc2:	025b      	lsls	r3, r3, #9
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d116      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	4b71      	ldr	r3, [pc, #452]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_OscConfig+0x188>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e2bb      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	22f8      	movs	r2, #248	@ 0xf8
 8004dea:	4393      	bics	r3, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00da      	lsls	r2, r3, #3
 8004df4:	4b67      	ldr	r3, [pc, #412]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	e041      	b.n	8004e80 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d024      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e04:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b62      	ldr	r3, [pc, #392]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fe f94e 	bl	80030b0 <HAL_GetTick>
 8004e14:	0003      	movs	r3, r0
 8004e16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fe f949 	bl	80030b0 <HAL_GetTick>
 8004e1e:	0002      	movs	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e297      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b59      	ldr	r3, [pc, #356]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2202      	movs	r2, #2
 8004e32:	4013      	ands	r3, r2
 8004e34:	d0f1      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e36:	4b57      	ldr	r3, [pc, #348]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	22f8      	movs	r2, #248	@ 0xf8
 8004e3c:	4393      	bics	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	00da      	lsls	r2, r3, #3
 8004e46:	4b53      	ldr	r3, [pc, #332]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e018      	b.n	8004e80 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b51      	ldr	r3, [pc, #324]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b50      	ldr	r3, [pc, #320]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e54:	2101      	movs	r1, #1
 8004e56:	438a      	bics	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fe f929 	bl	80030b0 <HAL_GetTick>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e64:	f7fe f924 	bl	80030b0 <HAL_GetTick>
 8004e68:	0002      	movs	r2, r0
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e272      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	4b47      	ldr	r3, [pc, #284]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d1f1      	bne.n	8004e64 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2208      	movs	r2, #8
 8004e86:	4013      	ands	r3, r2
 8004e88:	d036      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d019      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e92:	4b40      	ldr	r3, [pc, #256]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e96:	4b3f      	ldr	r3, [pc, #252]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004e98:	2101      	movs	r1, #1
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f907 	bl	80030b0 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fe f902 	bl	80030b0 <HAL_GetTick>
 8004eac:	0002      	movs	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e250      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d0f1      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x24c>
 8004ec4:	e018      	b.n	8004ef8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec6:	4b33      	ldr	r3, [pc, #204]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eca:	4b32      	ldr	r3, [pc, #200]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ecc:	2101      	movs	r1, #1
 8004ece:	438a      	bics	r2, r1
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed2:	f7fe f8ed 	bl	80030b0 <HAL_GetTick>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fe f8e8 	bl	80030b0 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e236      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eee:	4b29      	ldr	r3, [pc, #164]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d1f1      	bne.n	8004edc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	d100      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2a8>
 8004f02:	e0b5      	b.n	8005070 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f04:	201f      	movs	r0, #31
 8004f06:	183b      	adds	r3, r7, r0
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0c:	4b21      	ldr	r3, [pc, #132]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	2380      	movs	r3, #128	@ 0x80
 8004f12:	055b      	lsls	r3, r3, #21
 8004f14:	4013      	ands	r3, r2
 8004f16:	d110      	bne.n	8004f3a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f18:	4b1e      	ldr	r3, [pc, #120]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f1e:	2180      	movs	r1, #128	@ 0x80
 8004f20:	0549      	lsls	r1, r1, #21
 8004f22:	430a      	orrs	r2, r1
 8004f24:	61da      	str	r2, [r3, #28]
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	2380      	movs	r3, #128	@ 0x80
 8004f2c:	055b      	lsls	r3, r3, #21
 8004f2e:	4013      	ands	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f34:	183b      	adds	r3, r7, r0
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	4b19      	ldr	r3, [pc, #100]	@ (8004fa0 <HAL_RCC_OscConfig+0x344>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	2380      	movs	r3, #128	@ 0x80
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	d11a      	bne.n	8004f7c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f46:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <HAL_RCC_OscConfig+0x344>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <HAL_RCC_OscConfig+0x344>)
 8004f4c:	2180      	movs	r1, #128	@ 0x80
 8004f4e:	0049      	lsls	r1, r1, #1
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f54:	f7fe f8ac 	bl	80030b0 <HAL_GetTick>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fe f8a7 	bl	80030b0 <HAL_GetTick>
 8004f62:	0002      	movs	r2, r0
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	@ 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1f5      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa0 <HAL_RCC_OscConfig+0x344>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10f      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x348>
 8004f84:	4b03      	ldr	r3, [pc, #12]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	4b02      	ldr	r3, [pc, #8]	@ (8004f94 <HAL_RCC_OscConfig+0x338>)
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	621a      	str	r2, [r3, #32]
 8004f90:	e036      	b.n	8005000 <HAL_RCC_OscConfig+0x3a4>
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	40021000 	.word	0x40021000
 8004f98:	fffeffff 	.word	0xfffeffff
 8004f9c:	fffbffff 	.word	0xfffbffff
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10c      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x36a>
 8004fac:	4bca      	ldr	r3, [pc, #808]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	4bc9      	ldr	r3, [pc, #804]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	621a      	str	r2, [r3, #32]
 8004fb8:	4bc7      	ldr	r3, [pc, #796]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fba:	6a1a      	ldr	r2, [r3, #32]
 8004fbc:	4bc6      	ldr	r3, [pc, #792]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	621a      	str	r2, [r3, #32]
 8004fc4:	e01c      	b.n	8005000 <HAL_RCC_OscConfig+0x3a4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x38c>
 8004fce:	4bc2      	ldr	r3, [pc, #776]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	4bc1      	ldr	r3, [pc, #772]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	621a      	str	r2, [r3, #32]
 8004fda:	4bbf      	ldr	r3, [pc, #764]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	4bbe      	ldr	r3, [pc, #760]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	621a      	str	r2, [r3, #32]
 8004fe6:	e00b      	b.n	8005000 <HAL_RCC_OscConfig+0x3a4>
 8004fe8:	4bbb      	ldr	r3, [pc, #748]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	4bba      	ldr	r3, [pc, #744]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	621a      	str	r2, [r3, #32]
 8004ff4:	4bb8      	ldr	r3, [pc, #736]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	4bb7      	ldr	r3, [pc, #732]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	438a      	bics	r2, r1
 8004ffe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d014      	beq.n	8005032 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005008:	f7fe f852 	bl	80030b0 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e009      	b.n	8005026 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fe f84d 	bl	80030b0 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	4aaf      	ldr	r2, [pc, #700]	@ (80052dc <HAL_RCC_OscConfig+0x680>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e19a      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005026:	4bac      	ldr	r3, [pc, #688]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	2202      	movs	r2, #2
 800502c:	4013      	ands	r3, r2
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x3b6>
 8005030:	e013      	b.n	800505a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005032:	f7fe f83d 	bl	80030b0 <HAL_GetTick>
 8005036:	0003      	movs	r3, r0
 8005038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503a:	e009      	b.n	8005050 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503c:	f7fe f838 	bl	80030b0 <HAL_GetTick>
 8005040:	0002      	movs	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	4aa5      	ldr	r2, [pc, #660]	@ (80052dc <HAL_RCC_OscConfig+0x680>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e185      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005050:	4ba1      	ldr	r3, [pc, #644]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	2202      	movs	r2, #2
 8005056:	4013      	ands	r3, r2
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800505a:	231f      	movs	r3, #31
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005064:	4b9c      	ldr	r3, [pc, #624]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	4b9b      	ldr	r3, [pc, #620]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800506a:	499d      	ldr	r1, [pc, #628]	@ (80052e0 <HAL_RCC_OscConfig+0x684>)
 800506c:	400a      	ands	r2, r1
 800506e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d063      	beq.n	8005142 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d12a      	bne.n	80050d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005082:	4b95      	ldr	r3, [pc, #596]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005086:	4b94      	ldr	r3, [pc, #592]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005088:	2104      	movs	r1, #4
 800508a:	430a      	orrs	r2, r1
 800508c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800508e:	4b92      	ldr	r3, [pc, #584]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005092:	4b91      	ldr	r3, [pc, #580]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005094:	2101      	movs	r1, #1
 8005096:	430a      	orrs	r2, r1
 8005098:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509a:	f7fe f809 	bl	80030b0 <HAL_GetTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050a4:	f7fe f804 	bl	80030b0 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e152      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050b6:	4b88      	ldr	r3, [pc, #544]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ba:	2202      	movs	r2, #2
 80050bc:	4013      	ands	r3, r2
 80050be:	d0f1      	beq.n	80050a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050c0:	4b85      	ldr	r3, [pc, #532]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c4:	22f8      	movs	r2, #248	@ 0xf8
 80050c6:	4393      	bics	r3, r2
 80050c8:	0019      	movs	r1, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	00da      	lsls	r2, r3, #3
 80050d0:	4b81      	ldr	r3, [pc, #516]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80050d6:	e034      	b.n	8005142 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	3305      	adds	r3, #5
 80050de:	d111      	bne.n	8005104 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80050e0:	4b7d      	ldr	r3, [pc, #500]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050e4:	4b7c      	ldr	r3, [pc, #496]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050e6:	2104      	movs	r1, #4
 80050e8:	438a      	bics	r2, r1
 80050ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80050ec:	4b7a      	ldr	r3, [pc, #488]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f0:	22f8      	movs	r2, #248	@ 0xf8
 80050f2:	4393      	bics	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	00da      	lsls	r2, r3, #3
 80050fc:	4b76      	ldr	r3, [pc, #472]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	635a      	str	r2, [r3, #52]	@ 0x34
 8005102:	e01e      	b.n	8005142 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005104:	4b74      	ldr	r3, [pc, #464]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005108:	4b73      	ldr	r3, [pc, #460]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800510a:	2104      	movs	r1, #4
 800510c:	430a      	orrs	r2, r1
 800510e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005110:	4b71      	ldr	r3, [pc, #452]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005114:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005116:	2101      	movs	r1, #1
 8005118:	438a      	bics	r2, r1
 800511a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511c:	f7fd ffc8 	bl	80030b0 <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005126:	f7fd ffc3 	bl	80030b0 <HAL_GetTick>
 800512a:	0002      	movs	r2, r0
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e111      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005138:	4b67      	ldr	r3, [pc, #412]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800513a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513c:	2202      	movs	r2, #2
 800513e:	4013      	ands	r3, r2
 8005140:	d1f1      	bne.n	8005126 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2220      	movs	r2, #32
 8005148:	4013      	ands	r3, r2
 800514a:	d05c      	beq.n	8005206 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800514c:	4b62      	ldr	r3, [pc, #392]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	220c      	movs	r2, #12
 8005152:	4013      	ands	r3, r2
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d00e      	beq.n	8005176 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005158:	4b5f      	ldr	r3, [pc, #380]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	220c      	movs	r2, #12
 800515e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005160:	2b08      	cmp	r3, #8
 8005162:	d114      	bne.n	800518e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005164:	4b5c      	ldr	r3, [pc, #368]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	23c0      	movs	r3, #192	@ 0xc0
 800516a:	025b      	lsls	r3, r3, #9
 800516c:	401a      	ands	r2, r3
 800516e:	23c0      	movs	r3, #192	@ 0xc0
 8005170:	025b      	lsls	r3, r3, #9
 8005172:	429a      	cmp	r2, r3
 8005174:	d10b      	bne.n	800518e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005176:	4b58      	ldr	r3, [pc, #352]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	4013      	ands	r3, r2
 8005180:	d040      	beq.n	8005204 <HAL_RCC_OscConfig+0x5a8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d03c      	beq.n	8005204 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0e6      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005196:	4b50      	ldr	r3, [pc, #320]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800519a:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800519c:	2180      	movs	r1, #128	@ 0x80
 800519e:	0249      	lsls	r1, r1, #9
 80051a0:	430a      	orrs	r2, r1
 80051a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fd ff84 	bl	80030b0 <HAL_GetTick>
 80051a8:	0003      	movs	r3, r0
 80051aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ae:	f7fd ff7f 	bl	80030b0 <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0cd      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051c0:	4b45      	ldr	r3, [pc, #276]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80051c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c4:	2380      	movs	r3, #128	@ 0x80
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	4013      	ands	r3, r2
 80051ca:	d0f0      	beq.n	80051ae <HAL_RCC_OscConfig+0x552>
 80051cc:	e01b      	b.n	8005206 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80051ce:	4b42      	ldr	r3, [pc, #264]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80051d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d2:	4b41      	ldr	r3, [pc, #260]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80051d4:	4943      	ldr	r1, [pc, #268]	@ (80052e4 <HAL_RCC_OscConfig+0x688>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fd ff69 	bl	80030b0 <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051e4:	f7fd ff64 	bl	80030b0 <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0b2      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80051f6:	4b38      	ldr	r3, [pc, #224]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80051f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	4013      	ands	r3, r2
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x588>
 8005202:	e000      	b.n	8005206 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005204:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d100      	bne.n	8005210 <HAL_RCC_OscConfig+0x5b4>
 800520e:	e0a4      	b.n	800535a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005210:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	220c      	movs	r2, #12
 8005216:	4013      	ands	r3, r2
 8005218:	2b08      	cmp	r3, #8
 800521a:	d100      	bne.n	800521e <HAL_RCC_OscConfig+0x5c2>
 800521c:	e078      	b.n	8005310 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	2b02      	cmp	r3, #2
 8005224:	d14c      	bne.n	80052c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b2c      	ldr	r3, [pc, #176]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b2b      	ldr	r3, [pc, #172]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800522c:	492e      	ldr	r1, [pc, #184]	@ (80052e8 <HAL_RCC_OscConfig+0x68c>)
 800522e:	400a      	ands	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fd ff3d 	bl	80030b0 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fd ff38 	bl	80030b0 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e086      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	4b22      	ldr	r3, [pc, #136]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	049b      	lsls	r3, r3, #18
 8005256:	4013      	ands	r3, r2
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800525a:	4b1f      	ldr	r3, [pc, #124]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	220f      	movs	r2, #15
 8005260:	4393      	bics	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800526a:	430a      	orrs	r2, r1
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800526e:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4a1e      	ldr	r2, [pc, #120]	@ (80052ec <HAL_RCC_OscConfig+0x690>)
 8005274:	4013      	ands	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005280:	431a      	orrs	r2, r3
 8005282:	4b15      	ldr	r3, [pc, #84]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b12      	ldr	r3, [pc, #72]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 800528e:	2180      	movs	r1, #128	@ 0x80
 8005290:	0449      	lsls	r1, r1, #17
 8005292:	430a      	orrs	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fd ff0b 	bl	80030b0 <HAL_GetTick>
 800529a:	0003      	movs	r3, r0
 800529c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fd ff06 	bl	80030b0 <HAL_GetTick>
 80052a4:	0002      	movs	r2, r0
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e054      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b2:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	049b      	lsls	r3, r3, #18
 80052ba:	4013      	ands	r3, r2
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x644>
 80052be:	e04c      	b.n	800535a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c0:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80052c6:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <HAL_RCC_OscConfig+0x68c>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd fef0 	bl	80030b0 <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d4:	e015      	b.n	8005302 <HAL_RCC_OscConfig+0x6a6>
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	40021000 	.word	0x40021000
 80052dc:	00001388 	.word	0x00001388
 80052e0:	efffffff 	.word	0xefffffff
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	feffffff 	.word	0xfeffffff
 80052ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fd fede 	bl	80030b0 <HAL_GetTick>
 80052f4:	0002      	movs	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e02c      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005302:	4b18      	ldr	r3, [pc, #96]	@ (8005364 <HAL_RCC_OscConfig+0x708>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	2380      	movs	r3, #128	@ 0x80
 8005308:	049b      	lsls	r3, r3, #18
 800530a:	4013      	ands	r3, r2
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x694>
 800530e:	e024      	b.n	800535a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e01f      	b.n	800535c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800531c:	4b11      	ldr	r3, [pc, #68]	@ (8005364 <HAL_RCC_OscConfig+0x708>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005322:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <HAL_RCC_OscConfig+0x708>)
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	23c0      	movs	r3, #192	@ 0xc0
 800532c:	025b      	lsls	r3, r3, #9
 800532e:	401a      	ands	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	429a      	cmp	r2, r3
 8005336:	d10e      	bne.n	8005356 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	220f      	movs	r2, #15
 800533c:	401a      	ands	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	23f0      	movs	r3, #240	@ 0xf0
 800534a:	039b      	lsls	r3, r3, #14
 800534c:	401a      	ands	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	0018      	movs	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	b008      	add	sp, #32
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0bf      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b61      	ldr	r3, [pc, #388]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d911      	bls.n	80053ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b5e      	ldr	r3, [pc, #376]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	4393      	bics	r3, r2
 8005392:	0019      	movs	r1, r3
 8005394:	4b5b      	ldr	r3, [pc, #364]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b59      	ldr	r3, [pc, #356]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0a6      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d015      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2204      	movs	r2, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	d006      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053c2:	4b51      	ldr	r3, [pc, #324]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b50      	ldr	r3, [pc, #320]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80053c8:	21e0      	movs	r1, #224	@ 0xe0
 80053ca:	00c9      	lsls	r1, r1, #3
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	22f0      	movs	r2, #240	@ 0xf0
 80053d6:	4393      	bics	r3, r2
 80053d8:	0019      	movs	r1, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b4a      	ldr	r3, [pc, #296]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	4013      	ands	r3, r2
 80053ec:	d04c      	beq.n	8005488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	4013      	ands	r3, r2
 8005400:	d120      	bne.n	8005444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07a      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b3e      	ldr	r3, [pc, #248]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	049b      	lsls	r3, r3, #18
 8005416:	4013      	ands	r3, r2
 8005418:	d114      	bne.n	8005444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06e      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005426:	4b38      	ldr	r3, [pc, #224]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800542a:	2380      	movs	r3, #128	@ 0x80
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	4013      	ands	r3, r2
 8005430:	d108      	bne.n	8005444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e062      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005436:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2202      	movs	r2, #2
 800543c:	4013      	ands	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e05b      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005444:	4b30      	ldr	r3, [pc, #192]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2203      	movs	r2, #3
 800544a:	4393      	bics	r3, r2
 800544c:	0019      	movs	r1, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4b2d      	ldr	r3, [pc, #180]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005458:	f7fd fe2a 	bl	80030b0 <HAL_GetTick>
 800545c:	0003      	movs	r3, r0
 800545e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005460:	e009      	b.n	8005476 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005462:	f7fd fe25 	bl	80030b0 <HAL_GetTick>
 8005466:	0002      	movs	r2, r0
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	4a27      	ldr	r2, [pc, #156]	@ (800550c <HAL_RCC_ClockConfig+0x1a4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e042      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	4b24      	ldr	r3, [pc, #144]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	220c      	movs	r2, #12
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	429a      	cmp	r2, r3
 8005486:	d1ec      	bne.n	8005462 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005488:	4b1e      	ldr	r3, [pc, #120]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2201      	movs	r2, #1
 800548e:	4013      	ands	r3, r2
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d211      	bcs.n	80054ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005496:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2201      	movs	r2, #1
 800549c:	4393      	bics	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	4b18      	ldr	r3, [pc, #96]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a8:	4b16      	ldr	r3, [pc, #88]	@ (8005504 <HAL_RCC_ClockConfig+0x19c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	4013      	ands	r3, r2
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e020      	b.n	80054fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2204      	movs	r2, #4
 80054c0:	4013      	ands	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054c4:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <HAL_RCC_ClockConfig+0x1a8>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054d8:	f000 f820 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054dc:	0001      	movs	r1, r0
 80054de:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <HAL_RCC_ClockConfig+0x1a0>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	220f      	movs	r2, #15
 80054e6:	4013      	ands	r3, r2
 80054e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <HAL_RCC_ClockConfig+0x1ac>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	000a      	movs	r2, r1
 80054ee:	40da      	lsrs	r2, r3
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_ClockConfig+0x1b0>)
 80054f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80054f4:	2003      	movs	r0, #3
 80054f6:	f7fd fd95 	bl	8003024 <HAL_InitTick>
  
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	0018      	movs	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	b004      	add	sp, #16
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40022000 	.word	0x40022000
 8005508:	40021000 	.word	0x40021000
 800550c:	00001388 	.word	0x00001388
 8005510:	fffff8ff 	.word	0xfffff8ff
 8005514:	08009718 	.word	0x08009718
 8005518:	20000138 	.word	0x20000138

0800551c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005536:	4b2d      	ldr	r3, [pc, #180]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	220c      	movs	r2, #12
 8005540:	4013      	ands	r3, r2
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d046      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0xb8>
 8005546:	d848      	bhi.n	80055da <HAL_RCC_GetSysClockFreq+0xbe>
 8005548:	2b04      	cmp	r3, #4
 800554a:	d002      	beq.n	8005552 <HAL_RCC_GetSysClockFreq+0x36>
 800554c:	2b08      	cmp	r3, #8
 800554e:	d003      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0x3c>
 8005550:	e043      	b.n	80055da <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005552:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005554:	613b      	str	r3, [r7, #16]
      break;
 8005556:	e043      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	0c9b      	lsrs	r3, r3, #18
 800555c:	220f      	movs	r2, #15
 800555e:	4013      	ands	r3, r2
 8005560:	4a24      	ldr	r2, [pc, #144]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005566:	4b21      	ldr	r3, [pc, #132]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556a:	220f      	movs	r2, #15
 800556c:	4013      	ands	r3, r2
 800556e:	4a22      	ldr	r2, [pc, #136]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005570:	5cd3      	ldrb	r3, [r2, r3]
 8005572:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	23c0      	movs	r3, #192	@ 0xc0
 8005578:	025b      	lsls	r3, r3, #9
 800557a:	401a      	ands	r2, r3
 800557c:	2380      	movs	r3, #128	@ 0x80
 800557e:	025b      	lsls	r3, r3, #9
 8005580:	429a      	cmp	r2, r3
 8005582:	d109      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	481a      	ldr	r0, [pc, #104]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005588:	f7fa fdd0 	bl	800012c <__udivsi3>
 800558c:	0003      	movs	r3, r0
 800558e:	001a      	movs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4353      	muls	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e01a      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	23c0      	movs	r3, #192	@ 0xc0
 800559c:	025b      	lsls	r3, r3, #9
 800559e:	401a      	ands	r2, r3
 80055a0:	23c0      	movs	r3, #192	@ 0xc0
 80055a2:	025b      	lsls	r3, r3, #9
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d109      	bne.n	80055bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4814      	ldr	r0, [pc, #80]	@ (80055fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80055ac:	f7fa fdbe 	bl	800012c <__udivsi3>
 80055b0:	0003      	movs	r3, r0
 80055b2:	001a      	movs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4353      	muls	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e008      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	480c      	ldr	r0, [pc, #48]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055c0:	f7fa fdb4 	bl	800012c <__udivsi3>
 80055c4:	0003      	movs	r3, r0
 80055c6:	001a      	movs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4353      	muls	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	613b      	str	r3, [r7, #16]
      break;
 80055d2:	e005      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80055d4:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80055d6:	613b      	str	r3, [r7, #16]
      break;
 80055d8:	e002      	b.n	80055e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055da:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055dc:	613b      	str	r3, [r7, #16]
      break;
 80055de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055e0:	693b      	ldr	r3, [r7, #16]
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b006      	add	sp, #24
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	40021000 	.word	0x40021000
 80055f0:	007a1200 	.word	0x007a1200
 80055f4:	08009730 	.word	0x08009730
 80055f8:	08009740 	.word	0x08009740
 80055fc:	02dc6c00 	.word	0x02dc6c00

08005600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005604:	4b02      	ldr	r3, [pc, #8]	@ (8005610 <HAL_RCC_GetHCLKFreq+0x10>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	0018      	movs	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	20000138 	.word	0x20000138

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005618:	f7ff fff2 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 800561c:	0001      	movs	r1, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	2207      	movs	r2, #7
 8005626:	4013      	ands	r3, r2
 8005628:	4a04      	ldr	r2, [pc, #16]	@ (800563c <HAL_RCC_GetPCLK1Freq+0x28>)
 800562a:	5cd3      	ldrb	r3, [r2, r3]
 800562c:	40d9      	lsrs	r1, r3
 800562e:	000b      	movs	r3, r1
}    
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	40021000 	.word	0x40021000
 800563c:	08009728 	.word	0x08009728

08005640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	@ 0x80
 8005656:	025b      	lsls	r3, r3, #9
 8005658:	4013      	ands	r3, r2
 800565a:	d100      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800565c:	e08e      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800565e:	2017      	movs	r0, #23
 8005660:	183b      	adds	r3, r7, r0
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005666:	4b6e      	ldr	r3, [pc, #440]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	2380      	movs	r3, #128	@ 0x80
 800566c:	055b      	lsls	r3, r3, #21
 800566e:	4013      	ands	r3, r2
 8005670:	d110      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005672:	4b6b      	ldr	r3, [pc, #428]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005674:	69da      	ldr	r2, [r3, #28]
 8005676:	4b6a      	ldr	r3, [pc, #424]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005678:	2180      	movs	r1, #128	@ 0x80
 800567a:	0549      	lsls	r1, r1, #21
 800567c:	430a      	orrs	r2, r1
 800567e:	61da      	str	r2, [r3, #28]
 8005680:	4b67      	ldr	r3, [pc, #412]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	2380      	movs	r3, #128	@ 0x80
 8005686:	055b      	lsls	r3, r3, #21
 8005688:	4013      	ands	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568e:	183b      	adds	r3, r7, r0
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b63      	ldr	r3, [pc, #396]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	2380      	movs	r3, #128	@ 0x80
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4013      	ands	r3, r2
 800569e:	d11a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a0:	4b60      	ldr	r3, [pc, #384]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b5f      	ldr	r3, [pc, #380]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80056a6:	2180      	movs	r1, #128	@ 0x80
 80056a8:	0049      	lsls	r1, r1, #1
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ae:	f7fd fcff 	bl	80030b0 <HAL_GetTick>
 80056b2:	0003      	movs	r3, r0
 80056b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fd fcfa 	bl	80030b0 <HAL_GetTick>
 80056bc:	0002      	movs	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	@ 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0a6      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ca:	4b56      	ldr	r3, [pc, #344]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	@ 0x80
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056d6:	4b52      	ldr	r3, [pc, #328]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	23c0      	movs	r3, #192	@ 0xc0
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4013      	ands	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d034      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	23c0      	movs	r3, #192	@ 0xc0
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4013      	ands	r3, r2
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d02c      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f8:	4b49      	ldr	r3, [pc, #292]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005702:	4b47      	ldr	r3, [pc, #284]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	4b46      	ldr	r3, [pc, #280]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005708:	2180      	movs	r1, #128	@ 0x80
 800570a:	0249      	lsls	r1, r1, #9
 800570c:	430a      	orrs	r2, r1
 800570e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005710:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	4b42      	ldr	r3, [pc, #264]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005716:	4945      	ldr	r1, [pc, #276]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005718:	400a      	ands	r2, r1
 800571a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800571c:	4b40      	ldr	r3, [pc, #256]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572a:	f7fd fcc1 	bl	80030b0 <HAL_GetTick>
 800572e:	0003      	movs	r3, r0
 8005730:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005732:	e009      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fd fcbc 	bl	80030b0 <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	4a3c      	ldr	r2, [pc, #240]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e067      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005748:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	2202      	movs	r2, #2
 800574e:	4013      	ands	r3, r2
 8005750:	d0f0      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005752:	4b33      	ldr	r3, [pc, #204]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	4a34      	ldr	r2, [pc, #208]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005758:	4013      	ands	r3, r2
 800575a:	0019      	movs	r1, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	4b2f      	ldr	r3, [pc, #188]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005762:	430a      	orrs	r2, r1
 8005764:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005766:	2317      	movs	r3, #23
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	4b2a      	ldr	r3, [pc, #168]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005776:	492f      	ldr	r1, [pc, #188]	@ (8005834 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005778:	400a      	ands	r2, r1
 800577a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2201      	movs	r2, #1
 8005782:	4013      	ands	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005786:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	2203      	movs	r2, #3
 800578c:	4393      	bics	r3, r2
 800578e:	0019      	movs	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005796:	430a      	orrs	r2, r1
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2202      	movs	r2, #2
 80057a0:	4013      	ands	r3, r2
 80057a2:	d009      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	4a23      	ldr	r2, [pc, #140]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2220      	movs	r2, #32
 80057be:	4013      	ands	r3, r2
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	2210      	movs	r2, #16
 80057c8:	4393      	bics	r3, r2
 80057ca:	0019      	movs	r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	4b13      	ldr	r3, [pc, #76]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057d2:	430a      	orrs	r2, r1
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	4013      	ands	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	2280      	movs	r2, #128	@ 0x80
 80057e8:	4393      	bics	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80057f2:	430a      	orrs	r2, r1
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	@ 0x80
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	4013      	ands	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	2240      	movs	r2, #64	@ 0x40
 8005808:	4393      	bics	r3, r2
 800580a:	0019      	movs	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005812:	430a      	orrs	r2, r1
 8005814:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	0018      	movs	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	b006      	add	sp, #24
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40021000 	.word	0x40021000
 8005824:	40007000 	.word	0x40007000
 8005828:	fffffcff 	.word	0xfffffcff
 800582c:	fffeffff 	.word	0xfffeffff
 8005830:	00001388 	.word	0x00001388
 8005834:	efffffff 	.word	0xefffffff
 8005838:	fffcffff 	.word	0xfffcffff

0800583c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0a8      	b.n	80059a0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	2382      	movs	r3, #130	@ 0x82
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	429a      	cmp	r2, r3
 8005860:	d009      	beq.n	8005876 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	61da      	str	r2, [r3, #28]
 8005868:	e005      	b.n	8005876 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	225d      	movs	r2, #93	@ 0x5d
 8005880:	5c9b      	ldrb	r3, [r3, r2]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	225c      	movs	r2, #92	@ 0x5c
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0018      	movs	r0, r3
 8005894:	f7fc fe6e 	bl	8002574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	225d      	movs	r2, #93	@ 0x5d
 800589c:	2102      	movs	r1, #2
 800589e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2140      	movs	r1, #64	@ 0x40
 80058ac:	438a      	bics	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	23e0      	movs	r3, #224	@ 0xe0
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d902      	bls.n	80058c2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e002      	b.n	80058c8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	015b      	lsls	r3, r3, #5
 80058c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	23f0      	movs	r3, #240	@ 0xf0
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d008      	beq.n	80058e6 <HAL_SPI_Init+0xaa>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	23e0      	movs	r3, #224	@ 0xe0
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	429a      	cmp	r2, r3
 80058de:	d002      	beq.n	80058e6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	2382      	movs	r3, #130	@ 0x82
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6899      	ldr	r1, [r3, #8]
 80058f4:	2384      	movs	r3, #132	@ 0x84
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	400b      	ands	r3, r1
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2102      	movs	r1, #2
 8005902:	400b      	ands	r3, r1
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2101      	movs	r1, #1
 800590c:	400b      	ands	r3, r1
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6999      	ldr	r1, [r3, #24]
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	400b      	ands	r3, r1
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	2138      	movs	r1, #56	@ 0x38
 8005922:	400b      	ands	r3, r1
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	2180      	movs	r1, #128	@ 0x80
 800592c:	400b      	ands	r3, r1
 800592e:	431a      	orrs	r2, r3
 8005930:	0011      	movs	r1, r2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005936:	2380      	movs	r3, #128	@ 0x80
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	401a      	ands	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	2204      	movs	r2, #4
 800594c:	401a      	ands	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	2110      	movs	r1, #16
 8005954:	400b      	ands	r3, r1
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595c:	2108      	movs	r1, #8
 800595e:	400b      	ands	r3, r1
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	23f0      	movs	r3, #240	@ 0xf0
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	400b      	ands	r3, r1
 800596c:	431a      	orrs	r2, r3
 800596e:	0011      	movs	r1, r2
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	2380      	movs	r3, #128	@ 0x80
 8005974:	015b      	lsls	r3, r3, #5
 8005976:	401a      	ands	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4907      	ldr	r1, [pc, #28]	@ (80059a8 <HAL_SPI_Init+0x16c>)
 800598c:	400a      	ands	r2, r1
 800598e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	225d      	movs	r2, #93	@ 0x5d
 800599a:	2101      	movs	r1, #1
 800599c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fffff7ff 	.word	0xfffff7ff

080059ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	1dbb      	adds	r3, r7, #6
 80059ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059bc:	231f      	movs	r3, #31
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	225c      	movs	r2, #92	@ 0x5c
 80059c8:	5c9b      	ldrb	r3, [r3, r2]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_SPI_Transmit+0x26>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e147      	b.n	8005c62 <HAL_SPI_Transmit+0x2b6>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	225c      	movs	r2, #92	@ 0x5c
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059da:	f7fd fb69 	bl	80030b0 <HAL_GetTick>
 80059de:	0003      	movs	r3, r0
 80059e0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80059e2:	2316      	movs	r3, #22
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	1dba      	adds	r2, r7, #6
 80059e8:	8812      	ldrh	r2, [r2, #0]
 80059ea:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	225d      	movs	r2, #93	@ 0x5d
 80059f0:	5c9b      	ldrb	r3, [r3, r2]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d004      	beq.n	8005a02 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80059f8:	231f      	movs	r3, #31
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	2202      	movs	r2, #2
 80059fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a00:	e128      	b.n	8005c54 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_SPI_Transmit+0x64>
 8005a08:	1dbb      	adds	r3, r7, #6
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a10:	231f      	movs	r3, #31
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a18:	e11c      	b.n	8005c54 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	225d      	movs	r2, #93	@ 0x5d
 8005a1e:	2103      	movs	r1, #3
 8005a20:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1dba      	adds	r2, r7, #6
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1dba      	adds	r2, r7, #6
 8005a3a:	8812      	ldrh	r2, [r2, #0]
 8005a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2244      	movs	r2, #68	@ 0x44
 8005a48:	2100      	movs	r1, #0
 8005a4a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2246      	movs	r2, #70	@ 0x46
 8005a50:	2100      	movs	r1, #0
 8005a52:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d110      	bne.n	8005a8e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2140      	movs	r1, #64	@ 0x40
 8005a78:	438a      	bics	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2180      	movs	r1, #128	@ 0x80
 8005a88:	01c9      	lsls	r1, r1, #7
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2240      	movs	r2, #64	@ 0x40
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d007      	beq.n	8005aac <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2140      	movs	r1, #64	@ 0x40
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	23e0      	movs	r3, #224	@ 0xe0
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d952      	bls.n	8005b5e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_SPI_Transmit+0x11e>
 8005ac0:	2316      	movs	r3, #22
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d143      	bne.n	8005b52 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	1c9a      	adds	r2, r3, #2
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aee:	e030      	b.n	8005b52 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2202      	movs	r2, #2
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d112      	bne.n	8005b24 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b22:	e016      	b.n	8005b52 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fd fac4 	bl	80030b0 <HAL_GetTick>
 8005b28:	0002      	movs	r2, r0
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d802      	bhi.n	8005b3a <HAL_SPI_Transmit+0x18e>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Transmit+0x194>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005b40:	231f      	movs	r3, #31
 8005b42:	18fb      	adds	r3, r7, r3
 8005b44:	2203      	movs	r2, #3
 8005b46:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	225d      	movs	r2, #93	@ 0x5d
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005b50:	e080      	b.n	8005c54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1c9      	bne.n	8005af0 <HAL_SPI_Transmit+0x144>
 8005b5c:	e053      	b.n	8005c06 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_SPI_Transmit+0x1c4>
 8005b66:	2316      	movs	r3, #22
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d145      	bne.n	8005bfc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	330c      	adds	r3, #12
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005b96:	e031      	b.n	8005bfc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d113      	bne.n	8005bce <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bcc:	e016      	b.n	8005bfc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bce:	f7fd fa6f 	bl	80030b0 <HAL_GetTick>
 8005bd2:	0002      	movs	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d802      	bhi.n	8005be4 <HAL_SPI_Transmit+0x238>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	d102      	bne.n	8005bea <HAL_SPI_Transmit+0x23e>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d108      	bne.n	8005bfc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005bea:	231f      	movs	r3, #31
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2203      	movs	r2, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	225d      	movs	r2, #93	@ 0x5d
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]
          goto error;
 8005bfa:	e02b      	b.n	8005c54 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1c8      	bne.n	8005b98 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f000 f95d 	bl	8005ecc <SPI_EndRxTxTransaction>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d002      	beq.n	8005c1c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005c42:	231f      	movs	r3, #31
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2201      	movs	r2, #1
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e003      	b.n	8005c54 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	225d      	movs	r2, #93	@ 0x5d
 8005c50:	2101      	movs	r1, #1
 8005c52:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	225c      	movs	r2, #92	@ 0x5c
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c5c:	231f      	movs	r3, #31
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	781b      	ldrb	r3, [r3, #0]
}
 8005c62:	0018      	movs	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b008      	add	sp, #32
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c7c:	f7fd fa18 	bl	80030b0 <HAL_GetTick>
 8005c80:	0002      	movs	r2, r0
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	18d3      	adds	r3, r2, r3
 8005c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7fd fa10 	bl	80030b0 <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c94:	4b3a      	ldr	r3, [pc, #232]	@ (8005d80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	015b      	lsls	r3, r3, #5
 8005c9a:	0d1b      	lsrs	r3, r3, #20
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	4353      	muls	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	e058      	b.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d055      	beq.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005caa:	f7fd fa01 	bl	80030b0 <HAL_GetTick>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d902      	bls.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d142      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	21e0      	movs	r1, #224	@ 0xe0
 8005ccc:	438a      	bics	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	2382      	movs	r3, #130	@ 0x82
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d113      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d005      	beq.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	2380      	movs	r3, #128	@ 0x80
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d107      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2140      	movs	r1, #64	@ 0x40
 8005d00:	438a      	bics	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	019b      	lsls	r3, r3, #6
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d110      	bne.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	491a      	ldr	r1, [pc, #104]	@ (8005d84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2180      	movs	r1, #128	@ 0x80
 8005d2c:	0189      	lsls	r1, r1, #6
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	225d      	movs	r2, #93	@ 0x5d
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	225c      	movs	r2, #92	@ 0x5c
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e017      	b.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	425a      	negs	r2, r3
 8005d66:	4153      	adcs	r3, r2
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d197      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b008      	add	sp, #32
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	20000138 	.word	0x20000138
 8005d84:	ffffdfff 	.word	0xffffdfff

08005d88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d96:	2317      	movs	r3, #23
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d9e:	f7fd f987 	bl	80030b0 <HAL_GetTick>
 8005da2:	0002      	movs	r2, r0
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	18d3      	adds	r3, r2, r3
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005dae:	f7fd f97f 	bl	80030b0 <HAL_GetTick>
 8005db2:	0003      	movs	r3, r0
 8005db4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dbe:	4b41      	ldr	r3, [pc, #260]	@ (8005ec4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	0013      	movs	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	0d1b      	lsrs	r3, r3, #20
 8005dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd0:	4353      	muls	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005dd4:	e068      	b.n	8005ea8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	23c0      	movs	r3, #192	@ 0xc0
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d10a      	bne.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	2117      	movs	r1, #23
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	d055      	beq.n	8005ea8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dfc:	f7fd f958 	bl	80030b0 <HAL_GetTick>
 8005e00:	0002      	movs	r2, r0
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d902      	bls.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d142      	bne.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	21e0      	movs	r1, #224	@ 0xe0
 8005e1e:	438a      	bics	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	2382      	movs	r3, #130	@ 0x82
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d113      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d005      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	2380      	movs	r3, #128	@ 0x80
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2140      	movs	r1, #64	@ 0x40
 8005e52:	438a      	bics	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	019b      	lsls	r3, r3, #6
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d110      	bne.n	8005e84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4916      	ldr	r1, [pc, #88]	@ (8005ec8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005e6e:	400a      	ands	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2180      	movs	r1, #128	@ 0x80
 8005e7e:	0189      	lsls	r1, r1, #6
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	225d      	movs	r2, #93	@ 0x5d
 8005e88:	2101      	movs	r1, #1
 8005e8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	225c      	movs	r2, #92	@ 0x5c
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e010      	b.n	8005eba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d18e      	bne.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b00a      	add	sp, #40	@ 0x28
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			@ (mov r8, r8)
 8005ec4:	20000138 	.word	0x20000138
 8005ec8:	ffffdfff 	.word	0xffffdfff

08005ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	23c0      	movs	r3, #192	@ 0xc0
 8005edc:	0159      	lsls	r1, r3, #5
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f7ff ff4e 	bl	8005d88 <SPI_WaitFifoStateUntilTimeout>
 8005eec:	1e03      	subs	r3, r0, #0
 8005eee:	d007      	beq.n	8005f00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e027      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	0013      	movs	r3, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2180      	movs	r1, #128	@ 0x80
 8005f0e:	f7ff fead 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005f12:	1e03      	subs	r3, r0, #0
 8005f14:	d007      	beq.n	8005f26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e014      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	23c0      	movs	r3, #192	@ 0xc0
 8005f2a:	00d9      	lsls	r1, r3, #3
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	0013      	movs	r3, r2
 8005f34:	2200      	movs	r2, #0
 8005f36:	f7ff ff27 	bl	8005d88 <SPI_WaitFifoStateUntilTimeout>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d007      	beq.n	8005f4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f42:	2220      	movs	r2, #32
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e000      	b.n	8005f50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	0018      	movs	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	b004      	add	sp, #16
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e042      	b.n	8005ff0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	223d      	movs	r2, #61	@ 0x3d
 8005f6e:	5c9b      	ldrb	r3, [r3, r2]
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d107      	bne.n	8005f86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	223c      	movs	r2, #60	@ 0x3c
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7fc fbb3 	bl	80026ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	223d      	movs	r2, #61	@ 0x3d
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	0019      	movs	r1, r3
 8005f98:	0010      	movs	r0, r2
 8005f9a:	f000 fb07 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2246      	movs	r2, #70	@ 0x46
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	223e      	movs	r2, #62	@ 0x3e
 8005faa:	2101      	movs	r1, #1
 8005fac:	5499      	strb	r1, [r3, r2]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	223f      	movs	r2, #63	@ 0x3f
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	5499      	strb	r1, [r3, r2]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2240      	movs	r2, #64	@ 0x40
 8005fba:	2101      	movs	r1, #1
 8005fbc:	5499      	strb	r1, [r3, r2]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2241      	movs	r2, #65	@ 0x41
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2242      	movs	r2, #66	@ 0x42
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2243      	movs	r2, #67	@ 0x43
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2244      	movs	r2, #68	@ 0x44
 8005fda:	2101      	movs	r1, #1
 8005fdc:	5499      	strb	r1, [r3, r2]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2245      	movs	r2, #69	@ 0x45
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	223d      	movs	r2, #61	@ 0x3d
 8005fea:	2101      	movs	r1, #1
 8005fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	223d      	movs	r2, #61	@ 0x3d
 8006004:	5c9b      	ldrb	r3, [r3, r2]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e03b      	b.n	8006088 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	223d      	movs	r2, #61	@ 0x3d
 8006014:	2102      	movs	r1, #2
 8006016:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2101      	movs	r1, #1
 8006024:	430a      	orrs	r2, r1
 8006026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <HAL_TIM_Base_Start_IT+0x98>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00f      	beq.n	8006052 <HAL_TIM_Base_Start_IT+0x5a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	05db      	lsls	r3, r3, #23
 800603a:	429a      	cmp	r2, r3
 800603c:	d009      	beq.n	8006052 <HAL_TIM_Base_Start_IT+0x5a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a14      	ldr	r2, [pc, #80]	@ (8006094 <HAL_TIM_Base_Start_IT+0x9c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <HAL_TIM_Base_Start_IT+0x5a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a12      	ldr	r2, [pc, #72]	@ (8006098 <HAL_TIM_Base_Start_IT+0xa0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2207      	movs	r2, #7
 800605a:	4013      	ands	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b06      	cmp	r3, #6
 8006062:	d010      	beq.n	8006086 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2101      	movs	r1, #1
 8006070:	430a      	orrs	r2, r1
 8006072:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	e007      	b.n	8006086 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2101      	movs	r1, #1
 8006082:	430a      	orrs	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b004      	add	sp, #16
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40000400 	.word	0x40000400
 8006098:	40014000 	.word	0x40014000

0800609c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2101      	movs	r1, #1
 80060b0:	438a      	bics	r2, r1
 80060b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a0d      	ldr	r2, [pc, #52]	@ (80060f0 <HAL_TIM_Base_Stop_IT+0x54>)
 80060bc:	4013      	ands	r3, r2
 80060be:	d10d      	bne.n	80060dc <HAL_TIM_Base_Stop_IT+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4a0b      	ldr	r2, [pc, #44]	@ (80060f4 <HAL_TIM_Base_Stop_IT+0x58>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	d107      	bne.n	80060dc <HAL_TIM_Base_Stop_IT+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2101      	movs	r1, #1
 80060d8:	438a      	bics	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	223d      	movs	r2, #61	@ 0x3d
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	0018      	movs	r0, r3
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	00001111 	.word	0x00001111
 80060f4:	00000444 	.word	0x00000444

080060f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e090      	b.n	800622e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	223d      	movs	r2, #61	@ 0x3d
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	223c      	movs	r2, #60	@ 0x3c
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0018      	movs	r0, r3
 8006124:	f7fc fa72 	bl	800260c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	223d      	movs	r2, #61	@ 0x3d
 800612c:	2102      	movs	r1, #2
 800612e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	493f      	ldr	r1, [pc, #252]	@ (8006238 <HAL_TIM_Encoder_Init+0x140>)
 800613c:	400a      	ands	r2, r1
 800613e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	0019      	movs	r1, r3
 800614a:	0010      	movs	r0, r2
 800614c:	f000 fa2e 	bl	80065ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4a31      	ldr	r2, [pc, #196]	@ (800623c <HAL_TIM_Encoder_Init+0x144>)
 8006176:	4013      	ands	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	4313      	orrs	r3, r2
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4a2c      	ldr	r2, [pc, #176]	@ (8006240 <HAL_TIM_Encoder_Init+0x148>)
 8006190:	4013      	ands	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4a2b      	ldr	r2, [pc, #172]	@ (8006244 <HAL_TIM_Encoder_Init+0x14c>)
 8006198:	4013      	ands	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	4313      	orrs	r3, r2
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	011a      	lsls	r2, r3, #4
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	4313      	orrs	r3, r2
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2222      	movs	r2, #34	@ 0x22
 80061c6:	4393      	bics	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2288      	movs	r2, #136	@ 0x88
 80061ce:	4393      	bics	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	4313      	orrs	r3, r2
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2246      	movs	r2, #70	@ 0x46
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	223e      	movs	r2, #62	@ 0x3e
 8006208:	2101      	movs	r1, #1
 800620a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	223f      	movs	r2, #63	@ 0x3f
 8006210:	2101      	movs	r1, #1
 8006212:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2242      	movs	r2, #66	@ 0x42
 8006218:	2101      	movs	r1, #1
 800621a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2243      	movs	r2, #67	@ 0x43
 8006220:	2101      	movs	r1, #1
 8006222:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	223d      	movs	r2, #61	@ 0x3d
 8006228:	2101      	movs	r1, #1
 800622a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b006      	add	sp, #24
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	ffffbff8 	.word	0xffffbff8
 800623c:	fffffcfc 	.word	0xfffffcfc
 8006240:	fffff3f3 	.word	0xfffff3f3
 8006244:	ffff0f0f 	.word	0xffff0f0f

08006248 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006252:	200f      	movs	r0, #15
 8006254:	183b      	adds	r3, r7, r0
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	213e      	movs	r1, #62	@ 0x3e
 800625a:	5c52      	ldrb	r2, [r2, r1]
 800625c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800625e:	230e      	movs	r3, #14
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	213f      	movs	r1, #63	@ 0x3f
 8006266:	5c52      	ldrb	r2, [r2, r1]
 8006268:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800626a:	240d      	movs	r4, #13
 800626c:	193b      	adds	r3, r7, r4
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	2142      	movs	r1, #66	@ 0x42
 8006272:	5c52      	ldrb	r2, [r2, r1]
 8006274:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006276:	230c      	movs	r3, #12
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	2143      	movs	r1, #67	@ 0x43
 800627e:	5c52      	ldrb	r2, [r2, r1]
 8006280:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d112      	bne.n	80062ae <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006288:	183b      	adds	r3, r7, r0
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d103      	bne.n	8006298 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006290:	193b      	adds	r3, r7, r4
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d001      	beq.n	800629c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e075      	b.n	8006388 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	223e      	movs	r2, #62	@ 0x3e
 80062a0:	2102      	movs	r1, #2
 80062a2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2242      	movs	r2, #66	@ 0x42
 80062a8:	2102      	movs	r1, #2
 80062aa:	5499      	strb	r1, [r3, r2]
 80062ac:	e03d      	b.n	800632a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d114      	bne.n	80062de <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062b4:	230e      	movs	r3, #14
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d104      	bne.n	80062c8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062be:	230c      	movs	r3, #12
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d001      	beq.n	80062cc <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e05d      	b.n	8006388 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	223f      	movs	r2, #63	@ 0x3f
 80062d0:	2102      	movs	r1, #2
 80062d2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2243      	movs	r2, #67	@ 0x43
 80062d8:	2102      	movs	r1, #2
 80062da:	5499      	strb	r1, [r3, r2]
 80062dc:	e025      	b.n	800632a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062de:	230f      	movs	r3, #15
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e8:	230e      	movs	r3, #14
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d109      	bne.n	8006306 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062f2:	230d      	movs	r3, #13
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062fc:	230c      	movs	r3, #12
 80062fe:	18fb      	adds	r3, r7, r3
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d001      	beq.n	800630a <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e03e      	b.n	8006388 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223e      	movs	r2, #62	@ 0x3e
 800630e:	2102      	movs	r1, #2
 8006310:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	223f      	movs	r2, #63	@ 0x3f
 8006316:	2102      	movs	r1, #2
 8006318:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2242      	movs	r2, #66	@ 0x42
 800631e:	2102      	movs	r1, #2
 8006320:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2243      	movs	r2, #67	@ 0x43
 8006326:	2102      	movs	r1, #2
 8006328:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_TIM_Encoder_Start+0xf0>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b04      	cmp	r3, #4
 8006334:	d008      	beq.n	8006348 <HAL_TIM_Encoder_Start+0x100>
 8006336:	e00f      	b.n	8006358 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	2100      	movs	r1, #0
 8006340:	0018      	movs	r0, r3
 8006342:	f000 f9c1 	bl	80066c8 <TIM_CCxChannelCmd>
      break;
 8006346:	e016      	b.n	8006376 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	2104      	movs	r1, #4
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f9b9 	bl	80066c8 <TIM_CCxChannelCmd>
      break;
 8006356:	e00e      	b.n	8006376 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2201      	movs	r2, #1
 800635e:	2100      	movs	r1, #0
 8006360:	0018      	movs	r0, r3
 8006362:	f000 f9b1 	bl	80066c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	2104      	movs	r1, #4
 800636e:	0018      	movs	r0, r3
 8006370:	f000 f9aa 	bl	80066c8 <TIM_CCxChannelCmd>
      break;
 8006374:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2101      	movs	r1, #1
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b005      	add	sp, #20
 800638e:	bd90      	pop	{r4, r7, pc}

08006390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2202      	movs	r2, #2
 80063ac:	4013      	ands	r3, r2
 80063ae:	d021      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2203      	movs	r2, #3
 80063be:	4252      	negs	r2, r2
 80063c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	2203      	movs	r2, #3
 80063d0:	4013      	ands	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 f8d0 	bl	800657c <HAL_TIM_IC_CaptureCallback>
 80063dc:	e007      	b.n	80063ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	0018      	movs	r0, r3
 80063e2:	f000 f8c3 	bl	800656c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 f8cf 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2204      	movs	r2, #4
 80063f8:	4013      	ands	r3, r2
 80063fa:	d022      	beq.n	8006442 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	d01e      	beq.n	8006442 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2205      	movs	r2, #5
 800640a:	4252      	negs	r2, r2
 800640c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	23c0      	movs	r3, #192	@ 0xc0
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4013      	ands	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f000 f8a9 	bl	800657c <HAL_TIM_IC_CaptureCallback>
 800642a:	e007      	b.n	800643c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	0018      	movs	r0, r3
 8006430:	f000 f89c 	bl	800656c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	0018      	movs	r0, r3
 8006438:	f000 f8a8 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2208      	movs	r2, #8
 8006446:	4013      	ands	r3, r2
 8006448:	d021      	beq.n	800648e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2208      	movs	r2, #8
 800644e:	4013      	ands	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2209      	movs	r2, #9
 8006458:	4252      	negs	r2, r2
 800645a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2204      	movs	r2, #4
 8006460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2203      	movs	r2, #3
 800646a:	4013      	ands	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0018      	movs	r0, r3
 8006472:	f000 f883 	bl	800657c <HAL_TIM_IC_CaptureCallback>
 8006476:	e007      	b.n	8006488 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	0018      	movs	r0, r3
 800647c:	f000 f876 	bl	800656c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	0018      	movs	r0, r3
 8006484:	f000 f882 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2210      	movs	r2, #16
 8006492:	4013      	ands	r3, r2
 8006494:	d022      	beq.n	80064dc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2210      	movs	r2, #16
 800649a:	4013      	ands	r3, r2
 800649c:	d01e      	beq.n	80064dc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2211      	movs	r2, #17
 80064a4:	4252      	negs	r2, r2
 80064a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2208      	movs	r2, #8
 80064ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	23c0      	movs	r3, #192	@ 0xc0
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 f85c 	bl	800657c <HAL_TIM_IC_CaptureCallback>
 80064c4:	e007      	b.n	80064d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	0018      	movs	r0, r3
 80064ca:	f000 f84f 	bl	800656c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 f85b 	bl	800658c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2201      	movs	r2, #1
 80064e0:	4013      	ands	r3, r2
 80064e2:	d00c      	beq.n	80064fe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	4013      	ands	r3, r2
 80064ea:	d008      	beq.n	80064fe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2202      	movs	r2, #2
 80064f2:	4252      	negs	r2, r2
 80064f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7fc fa17 	bl	800292c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2280      	movs	r2, #128	@ 0x80
 8006502:	4013      	ands	r3, r2
 8006504:	d00c      	beq.n	8006520 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2280      	movs	r2, #128	@ 0x80
 800650a:	4013      	ands	r3, r2
 800650c:	d008      	beq.n	8006520 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2281      	movs	r2, #129	@ 0x81
 8006514:	4252      	negs	r2, r2
 8006516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 f95e 	bl	80067dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2240      	movs	r2, #64	@ 0x40
 8006524:	4013      	ands	r3, r2
 8006526:	d00c      	beq.n	8006542 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2240      	movs	r2, #64	@ 0x40
 800652c:	4013      	ands	r3, r2
 800652e:	d008      	beq.n	8006542 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2241      	movs	r2, #65	@ 0x41
 8006536:	4252      	negs	r2, r2
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f000 f82d 	bl	800659c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2220      	movs	r2, #32
 8006546:	4013      	ands	r3, r2
 8006548:	d00c      	beq.n	8006564 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	4013      	ands	r3, r2
 8006550:	d008      	beq.n	8006564 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2221      	movs	r2, #33	@ 0x21
 8006558:	4252      	negs	r2, r2
 800655a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0018      	movs	r0, r3
 8006560:	f000 f934 	bl	80067cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006564:	46c0      	nop			@ (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b004      	add	sp, #16
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006574:	46c0      	nop			@ (mov r8, r8)
 8006576:	46bd      	mov	sp, r7
 8006578:	b002      	add	sp, #8
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006584:	46c0      	nop			@ (mov r8, r8)
 8006586:	46bd      	mov	sp, r7
 8006588:	b002      	add	sp, #8
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006594:	46c0      	nop			@ (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a4:	46c0      	nop			@ (mov r8, r8)
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b002      	add	sp, #8
 80065aa:	bd80      	pop	{r7, pc}

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a3b      	ldr	r2, [pc, #236]	@ (80066ac <TIM_Base_SetConfig+0x100>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d008      	beq.n	80065d6 <TIM_Base_SetConfig+0x2a>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	2380      	movs	r3, #128	@ 0x80
 80065c8:	05db      	lsls	r3, r3, #23
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0x2a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a37      	ldr	r2, [pc, #220]	@ (80066b0 <TIM_Base_SetConfig+0x104>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2270      	movs	r2, #112	@ 0x70
 80065da:	4393      	bics	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a30      	ldr	r2, [pc, #192]	@ (80066ac <TIM_Base_SetConfig+0x100>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d018      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	2380      	movs	r3, #128	@ 0x80
 80065f4:	05db      	lsls	r3, r3, #23
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d013      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	@ (80066b0 <TIM_Base_SetConfig+0x104>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	@ (80066b4 <TIM_Base_SetConfig+0x108>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2a      	ldr	r2, [pc, #168]	@ (80066b8 <TIM_Base_SetConfig+0x10c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a29      	ldr	r2, [pc, #164]	@ (80066bc <TIM_Base_SetConfig+0x110>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_Base_SetConfig+0x76>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a28      	ldr	r2, [pc, #160]	@ (80066c0 <TIM_Base_SetConfig+0x114>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4a27      	ldr	r2, [pc, #156]	@ (80066c4 <TIM_Base_SetConfig+0x118>)
 8006626:	4013      	ands	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2280      	movs	r2, #128	@ 0x80
 8006638:	4393      	bics	r3, r2
 800663a:	001a      	movs	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a13      	ldr	r2, [pc, #76]	@ (80066ac <TIM_Base_SetConfig+0x100>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00b      	beq.n	800667a <TIM_Base_SetConfig+0xce>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a14      	ldr	r2, [pc, #80]	@ (80066b8 <TIM_Base_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <TIM_Base_SetConfig+0xce>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a13      	ldr	r2, [pc, #76]	@ (80066bc <TIM_Base_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_Base_SetConfig+0xce>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a12      	ldr	r2, [pc, #72]	@ (80066c0 <TIM_Base_SetConfig+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d103      	bne.n	8006682 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	2201      	movs	r2, #1
 800668e:	4013      	ands	r3, r2
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2201      	movs	r2, #1
 800669a:	4393      	bics	r3, r2
 800669c:	001a      	movs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	611a      	str	r2, [r3, #16]
  }
}
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b004      	add	sp, #16
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40002000 	.word	0x40002000
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800
 80066c4:	fffffcff 	.word	0xfffffcff

080066c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	221f      	movs	r2, #31
 80066d8:	4013      	ands	r3, r2
 80066da:	2201      	movs	r2, #1
 80066dc:	409a      	lsls	r2, r3
 80066de:	0013      	movs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	43d2      	mvns	r2, r2
 80066ea:	401a      	ands	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	211f      	movs	r1, #31
 80066f8:	400b      	ands	r3, r1
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4099      	lsls	r1, r3
 80066fe:	000b      	movs	r3, r1
 8006700:	431a      	orrs	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
}
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	46bd      	mov	sp, r7
 800670a:	b006      	add	sp, #24
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	223c      	movs	r2, #60	@ 0x3c
 800671e:	5c9b      	ldrb	r3, [r3, r2]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e047      	b.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	223c      	movs	r2, #60	@ 0x3c
 800672c:	2101      	movs	r1, #1
 800672e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	223d      	movs	r2, #61	@ 0x3d
 8006734:	2102      	movs	r1, #2
 8006736:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2270      	movs	r2, #112	@ 0x70
 800674c:	4393      	bics	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a16      	ldr	r2, [pc, #88]	@ (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00f      	beq.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	05db      	lsls	r3, r3, #23
 8006774:	429a      	cmp	r2, r3
 8006776:	d009      	beq.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a11      	ldr	r2, [pc, #68]	@ (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d004      	beq.n	800678c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a10      	ldr	r2, [pc, #64]	@ (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d10c      	bne.n	80067a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2280      	movs	r2, #128	@ 0x80
 8006790:	4393      	bics	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	223d      	movs	r2, #61	@ 0x3d
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	223c      	movs	r2, #60	@ 0x3c
 80067b2:	2100      	movs	r1, #0
 80067b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	0018      	movs	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b004      	add	sp, #16
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40014000 	.word	0x40014000

080067cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d4:	46c0      	nop			@ (mov r8, r8)
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e4:	46c0      	nop			@ (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b002      	add	sp, #8
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e044      	b.n	8006888 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2278      	movs	r2, #120	@ 0x78
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7fb ffad 	bl	8002770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	@ 0x24
 800681a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2101      	movs	r1, #1
 8006828:	438a      	bics	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	0018      	movs	r0, r3
 8006838:	f000 fa54 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	0018      	movs	r0, r3
 8006840:	f000 f8c8 	bl	80069d4 <UART_SetConfig>
 8006844:	0003      	movs	r3, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e01c      	b.n	8006888 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	490d      	ldr	r1, [pc, #52]	@ (8006890 <HAL_UART_Init+0xa4>)
 800685a:	400a      	ands	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	212a      	movs	r1, #42	@ 0x2a
 800686a:	438a      	bics	r2, r1
 800686c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	0018      	movs	r0, r3
 8006882:	f000 fae3 	bl	8006e4c <UART_CheckIdleState>
 8006886:	0003      	movs	r3, r0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	ffffb7ff 	.word	0xffffb7ff

08006894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08a      	sub	sp, #40	@ 0x28
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d000      	beq.n	80068ae <HAL_UART_Transmit+0x1a>
 80068ac:	e08c      	b.n	80069c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_UART_Transmit+0x28>
 80068b4:	1dbb      	adds	r3, r7, #6
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e084      	b.n	80069ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	2380      	movs	r3, #128	@ 0x80
 80068c6:	015b      	lsls	r3, r3, #5
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d109      	bne.n	80068e0 <HAL_UART_Transmit+0x4c>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2201      	movs	r2, #1
 80068d8:	4013      	ands	r3, r2
 80068da:	d001      	beq.n	80068e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e074      	b.n	80069ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2284      	movs	r2, #132	@ 0x84
 80068e4:	2100      	movs	r1, #0
 80068e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2221      	movs	r2, #33	@ 0x21
 80068ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ee:	f7fc fbdf 	bl	80030b0 <HAL_GetTick>
 80068f2:	0003      	movs	r3, r0
 80068f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1dba      	adds	r2, r7, #6
 80068fa:	2150      	movs	r1, #80	@ 0x50
 80068fc:	8812      	ldrh	r2, [r2, #0]
 80068fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1dba      	adds	r2, r7, #6
 8006904:	2152      	movs	r1, #82	@ 0x52
 8006906:	8812      	ldrh	r2, [r2, #0]
 8006908:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	015b      	lsls	r3, r3, #5
 8006912:	429a      	cmp	r2, r3
 8006914:	d108      	bne.n	8006928 <HAL_UART_Transmit+0x94>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e003      	b.n	8006930 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006930:	e02f      	b.n	8006992 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	0013      	movs	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	2180      	movs	r1, #128	@ 0x80
 8006940:	f000 fb2c 	bl	8006f9c <UART_WaitOnFlagUntilTimeout>
 8006944:	1e03      	subs	r3, r0, #0
 8006946:	d004      	beq.n	8006952 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e03b      	b.n	80069ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10b      	bne.n	8006970 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	05d2      	lsls	r2, r2, #23
 8006962:	0dd2      	lsrs	r2, r2, #23
 8006964:	b292      	uxth	r2, r2
 8006966:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	3302      	adds	r3, #2
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e007      	b.n	8006980 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2252      	movs	r2, #82	@ 0x52
 8006984:	5a9b      	ldrh	r3, [r3, r2]
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b299      	uxth	r1, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2252      	movs	r2, #82	@ 0x52
 8006990:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2252      	movs	r2, #82	@ 0x52
 8006996:	5a9b      	ldrh	r3, [r3, r2]
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1c9      	bne.n	8006932 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	0013      	movs	r3, r2
 80069a8:	2200      	movs	r2, #0
 80069aa:	2140      	movs	r1, #64	@ 0x40
 80069ac:	f000 faf6 	bl	8006f9c <UART_WaitOnFlagUntilTimeout>
 80069b0:	1e03      	subs	r3, r0, #0
 80069b2:	d004      	beq.n	80069be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e005      	b.n	80069ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	0018      	movs	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	b008      	add	sp, #32
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069dc:	231e      	movs	r3, #30
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4aaf      	ldr	r2, [pc, #700]	@ (8006cc0 <UART_SetConfig+0x2ec>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	0019      	movs	r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4aaa      	ldr	r2, [pc, #680]	@ (8006cc4 <UART_SetConfig+0x2f0>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4aa1      	ldr	r2, [pc, #644]	@ (8006cc8 <UART_SetConfig+0x2f4>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	0019      	movs	r1, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a9d      	ldr	r2, [pc, #628]	@ (8006ccc <UART_SetConfig+0x2f8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d127      	bne.n	8006aaa <UART_SetConfig+0xd6>
 8006a5a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd0 <UART_SetConfig+0x2fc>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	2203      	movs	r2, #3
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d00d      	beq.n	8006a82 <UART_SetConfig+0xae>
 8006a66:	d81b      	bhi.n	8006aa0 <UART_SetConfig+0xcc>
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d014      	beq.n	8006a96 <UART_SetConfig+0xc2>
 8006a6c:	d818      	bhi.n	8006aa0 <UART_SetConfig+0xcc>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <UART_SetConfig+0xa4>
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d00a      	beq.n	8006a8c <UART_SetConfig+0xb8>
 8006a76:	e013      	b.n	8006aa0 <UART_SetConfig+0xcc>
 8006a78:	231f      	movs	r3, #31
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e065      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006a82:	231f      	movs	r3, #31
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e060      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006a8c:	231f      	movs	r3, #31
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	2204      	movs	r2, #4
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e05b      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006a96:	231f      	movs	r3, #31
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	e056      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006aa0:	231f      	movs	r3, #31
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e051      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a89      	ldr	r2, [pc, #548]	@ (8006cd4 <UART_SetConfig+0x300>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d134      	bne.n	8006b1e <UART_SetConfig+0x14a>
 8006ab4:	4b86      	ldr	r3, [pc, #536]	@ (8006cd0 <UART_SetConfig+0x2fc>)
 8006ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ab8:	23c0      	movs	r3, #192	@ 0xc0
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	4013      	ands	r3, r2
 8006abe:	22c0      	movs	r2, #192	@ 0xc0
 8006ac0:	0292      	lsls	r2, r2, #10
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d017      	beq.n	8006af6 <UART_SetConfig+0x122>
 8006ac6:	22c0      	movs	r2, #192	@ 0xc0
 8006ac8:	0292      	lsls	r2, r2, #10
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d822      	bhi.n	8006b14 <UART_SetConfig+0x140>
 8006ace:	2280      	movs	r2, #128	@ 0x80
 8006ad0:	0292      	lsls	r2, r2, #10
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d019      	beq.n	8006b0a <UART_SetConfig+0x136>
 8006ad6:	2280      	movs	r2, #128	@ 0x80
 8006ad8:	0292      	lsls	r2, r2, #10
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d81a      	bhi.n	8006b14 <UART_SetConfig+0x140>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <UART_SetConfig+0x118>
 8006ae2:	2280      	movs	r2, #128	@ 0x80
 8006ae4:	0252      	lsls	r2, r2, #9
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00a      	beq.n	8006b00 <UART_SetConfig+0x12c>
 8006aea:	e013      	b.n	8006b14 <UART_SetConfig+0x140>
 8006aec:	231f      	movs	r3, #31
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	e02b      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006af6:	231f      	movs	r3, #31
 8006af8:	18fb      	adds	r3, r7, r3
 8006afa:	2202      	movs	r2, #2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e026      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b00:	231f      	movs	r3, #31
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	2204      	movs	r2, #4
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	e021      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b0a:	231f      	movs	r3, #31
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	e01c      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b14:	231f      	movs	r3, #31
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	2210      	movs	r2, #16
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e017      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6d      	ldr	r2, [pc, #436]	@ (8006cd8 <UART_SetConfig+0x304>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d104      	bne.n	8006b32 <UART_SetConfig+0x15e>
 8006b28:	231f      	movs	r3, #31
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e00d      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a69      	ldr	r2, [pc, #420]	@ (8006cdc <UART_SetConfig+0x308>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d104      	bne.n	8006b46 <UART_SetConfig+0x172>
 8006b3c:	231f      	movs	r3, #31
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
 8006b44:	e003      	b.n	8006b4e <UART_SetConfig+0x17a>
 8006b46:	231f      	movs	r3, #31
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69da      	ldr	r2, [r3, #28]
 8006b52:	2380      	movs	r3, #128	@ 0x80
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d15c      	bne.n	8006c14 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8006b5a:	231f      	movs	r3, #31
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d015      	beq.n	8006b90 <UART_SetConfig+0x1bc>
 8006b64:	dc18      	bgt.n	8006b98 <UART_SetConfig+0x1c4>
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d00d      	beq.n	8006b86 <UART_SetConfig+0x1b2>
 8006b6a:	dc15      	bgt.n	8006b98 <UART_SetConfig+0x1c4>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <UART_SetConfig+0x1a2>
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d005      	beq.n	8006b80 <UART_SetConfig+0x1ac>
 8006b74:	e010      	b.n	8006b98 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b76:	f7fe fd4d 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006b7a:	0003      	movs	r3, r0
 8006b7c:	61bb      	str	r3, [r7, #24]
        break;
 8006b7e:	e012      	b.n	8006ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b57      	ldr	r3, [pc, #348]	@ (8006ce0 <UART_SetConfig+0x30c>)
 8006b82:	61bb      	str	r3, [r7, #24]
        break;
 8006b84:	e00f      	b.n	8006ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fe fcc9 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8006b8a:	0003      	movs	r3, r0
 8006b8c:	61bb      	str	r3, [r7, #24]
        break;
 8006b8e:	e00a      	b.n	8006ba6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	61bb      	str	r3, [r7, #24]
        break;
 8006b96:	e006      	b.n	8006ba6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b9c:	231e      	movs	r3, #30
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
        break;
 8006ba4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d100      	bne.n	8006bae <UART_SetConfig+0x1da>
 8006bac:	e07a      	b.n	8006ca4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	18d2      	adds	r2, r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	0010      	movs	r0, r2
 8006bc2:	f7f9 fab3 	bl	800012c <__udivsi3>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d91c      	bls.n	8006c0a <UART_SetConfig+0x236>
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	025b      	lsls	r3, r3, #9
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d217      	bcs.n	8006c0a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	200e      	movs	r0, #14
 8006be0:	183b      	adds	r3, r7, r0
 8006be2:	210f      	movs	r1, #15
 8006be4:	438a      	bics	r2, r1
 8006be6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2207      	movs	r2, #7
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	b299      	uxth	r1, r3
 8006bf4:	183b      	adds	r3, r7, r0
 8006bf6:	183a      	adds	r2, r7, r0
 8006bf8:	8812      	ldrh	r2, [r2, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	183a      	adds	r2, r7, r0
 8006c04:	8812      	ldrh	r2, [r2, #0]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e04c      	b.n	8006ca4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c0a:	231e      	movs	r3, #30
 8006c0c:	18fb      	adds	r3, r7, r3
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e047      	b.n	8006ca4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c14:	231f      	movs	r3, #31
 8006c16:	18fb      	adds	r3, r7, r3
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b08      	cmp	r3, #8
 8006c1c:	d015      	beq.n	8006c4a <UART_SetConfig+0x276>
 8006c1e:	dc18      	bgt.n	8006c52 <UART_SetConfig+0x27e>
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d00d      	beq.n	8006c40 <UART_SetConfig+0x26c>
 8006c24:	dc15      	bgt.n	8006c52 <UART_SetConfig+0x27e>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <UART_SetConfig+0x25c>
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d005      	beq.n	8006c3a <UART_SetConfig+0x266>
 8006c2e:	e010      	b.n	8006c52 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c30:	f7fe fcf0 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006c34:	0003      	movs	r3, r0
 8006c36:	61bb      	str	r3, [r7, #24]
        break;
 8006c38:	e012      	b.n	8006c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c3a:	4b29      	ldr	r3, [pc, #164]	@ (8006ce0 <UART_SetConfig+0x30c>)
 8006c3c:	61bb      	str	r3, [r7, #24]
        break;
 8006c3e:	e00f      	b.n	8006c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c40:	f7fe fc6c 	bl	800551c <HAL_RCC_GetSysClockFreq>
 8006c44:	0003      	movs	r3, r0
 8006c46:	61bb      	str	r3, [r7, #24]
        break;
 8006c48:	e00a      	b.n	8006c60 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	61bb      	str	r3, [r7, #24]
        break;
 8006c50:	e006      	b.n	8006c60 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c56:	231e      	movs	r3, #30
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
        break;
 8006c5e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01e      	beq.n	8006ca4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085a      	lsrs	r2, r3, #1
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	18d2      	adds	r2, r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	0019      	movs	r1, r3
 8006c76:	0010      	movs	r0, r2
 8006c78:	f7f9 fa58 	bl	800012c <__udivsi3>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d90a      	bls.n	8006c9c <UART_SetConfig+0x2c8>
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	025b      	lsls	r3, r3, #9
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d205      	bcs.n	8006c9c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e003      	b.n	8006ca4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	231e      	movs	r3, #30
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006cb0:	231e      	movs	r3, #30
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	781b      	ldrb	r3, [r3, #0]
}
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b008      	add	sp, #32
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	46c0      	nop			@ (mov r8, r8)
 8006cc0:	efff69f3 	.word	0xefff69f3
 8006cc4:	ffffcfff 	.word	0xffffcfff
 8006cc8:	fffff4ff 	.word	0xfffff4ff
 8006ccc:	40013800 	.word	0x40013800
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40004400 	.word	0x40004400
 8006cd8:	40004800 	.word	0x40004800
 8006cdc:	40004c00 	.word	0x40004c00
 8006ce0:	007a1200 	.word	0x007a1200

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8006e28 <UART_AdvFeatureConfig+0x144>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	0019      	movs	r1, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	2201      	movs	r2, #1
 8006d14:	4013      	ands	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4a43      	ldr	r2, [pc, #268]	@ (8006e2c <UART_AdvFeatureConfig+0x148>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	0019      	movs	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	2202      	movs	r2, #2
 8006d36:	4013      	ands	r3, r2
 8006d38:	d00b      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a3b      	ldr	r2, [pc, #236]	@ (8006e30 <UART_AdvFeatureConfig+0x14c>)
 8006d42:	4013      	ands	r3, r2
 8006d44:	0019      	movs	r1, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2204      	movs	r2, #4
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	4a34      	ldr	r2, [pc, #208]	@ (8006e34 <UART_AdvFeatureConfig+0x150>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	0019      	movs	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	2210      	movs	r2, #16
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <UART_AdvFeatureConfig+0x154>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	0019      	movs	r1, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d00b      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	4a25      	ldr	r2, [pc, #148]	@ (8006e3c <UART_AdvFeatureConfig+0x158>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	0019      	movs	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	2240      	movs	r2, #64	@ 0x40
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d01d      	beq.n	8006dfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e40 <UART_AdvFeatureConfig+0x15c>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	0019      	movs	r1, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dde:	2380      	movs	r3, #128	@ 0x80
 8006de0:	035b      	lsls	r3, r3, #13
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d10b      	bne.n	8006dfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4a15      	ldr	r2, [pc, #84]	@ (8006e44 <UART_AdvFeatureConfig+0x160>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	0019      	movs	r1, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	2280      	movs	r2, #128	@ 0x80
 8006e04:	4013      	ands	r3, r2
 8006e06:	d00b      	beq.n	8006e20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e48 <UART_AdvFeatureConfig+0x164>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	0019      	movs	r1, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }
}
 8006e20:	46c0      	nop			@ (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b002      	add	sp, #8
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	ffff7fff 	.word	0xffff7fff
 8006e2c:	fffdffff 	.word	0xfffdffff
 8006e30:	fffeffff 	.word	0xfffeffff
 8006e34:	fffbffff 	.word	0xfffbffff
 8006e38:	ffffefff 	.word	0xffffefff
 8006e3c:	ffffdfff 	.word	0xffffdfff
 8006e40:	ffefffff 	.word	0xffefffff
 8006e44:	ff9fffff 	.word	0xff9fffff
 8006e48:	fff7ffff 	.word	0xfff7ffff

08006e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b092      	sub	sp, #72	@ 0x48
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2284      	movs	r2, #132	@ 0x84
 8006e58:	2100      	movs	r1, #0
 8006e5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e5c:	f7fc f928 	bl	80030b0 <HAL_GetTick>
 8006e60:	0003      	movs	r3, r0
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d12c      	bne.n	8006ecc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	2280      	movs	r2, #128	@ 0x80
 8006e76:	0391      	lsls	r1, r2, #14
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4a46      	ldr	r2, [pc, #280]	@ (8006f94 <UART_CheckIdleState+0x148>)
 8006e7c:	9200      	str	r2, [sp, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f000 f88c 	bl	8006f9c <UART_WaitOnFlagUntilTimeout>
 8006e84:	1e03      	subs	r3, r0, #0
 8006e86:	d021      	beq.n	8006ecc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e88:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e92:	2301      	movs	r3, #1
 8006e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	f383 8810 	msr	PRIMASK, r3
}
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2180      	movs	r1, #128	@ 0x80
 8006eaa:	438a      	bics	r2, r1
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb4:	f383 8810 	msr	PRIMASK, r3
}
 8006eb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2278      	movs	r2, #120	@ 0x78
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e05f      	b.n	8006f8c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d146      	bne.n	8006f68 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006edc:	2280      	movs	r2, #128	@ 0x80
 8006ede:	03d1      	lsls	r1, r2, #15
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8006f94 <UART_CheckIdleState+0x148>)
 8006ee4:	9200      	str	r2, [sp, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f000 f858 	bl	8006f9c <UART_WaitOnFlagUntilTimeout>
 8006eec:	1e03      	subs	r3, r0, #0
 8006eee:	d03b      	beq.n	8006f68 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efa:	2301      	movs	r3, #1
 8006efc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f383 8810 	msr	PRIMASK, r3
}
 8006f04:	46c0      	nop			@ (mov r8, r8)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4921      	ldr	r1, [pc, #132]	@ (8006f98 <UART_CheckIdleState+0x14c>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f383 8810 	msr	PRIMASK, r3
}
 8006f20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f22:	f3ef 8310 	mrs	r3, PRIMASK
 8006f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f28:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f383 8810 	msr	PRIMASK, r3
}
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2101      	movs	r1, #1
 8006f44:	438a      	bics	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	f383 8810 	msr	PRIMASK, r3
}
 8006f52:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2280      	movs	r2, #128	@ 0x80
 8006f58:	2120      	movs	r1, #32
 8006f5a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2278      	movs	r2, #120	@ 0x78
 8006f60:	2100      	movs	r1, #0
 8006f62:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e011      	b.n	8006f8c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2280      	movs	r2, #128	@ 0x80
 8006f72:	2120      	movs	r1, #32
 8006f74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2278      	movs	r2, #120	@ 0x78
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b010      	add	sp, #64	@ 0x40
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	01ffffff 	.word	0x01ffffff
 8006f98:	fffffedf 	.word	0xfffffedf

08006f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	1dfb      	adds	r3, r7, #7
 8006faa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fac:	e051      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	d04e      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb4:	f7fc f87c 	bl	80030b0 <HAL_GetTick>
 8006fb8:	0002      	movs	r2, r0
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d302      	bcc.n	8006fca <UART_WaitOnFlagUntilTimeout+0x2e>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e051      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d03b      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b80      	cmp	r3, #128	@ 0x80
 8006fde:	d038      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d035      	beq.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	2208      	movs	r2, #8
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d111      	bne.n	8007018 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	0018      	movs	r0, r3
 8007000:	f000 f83c 	bl	800707c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2284      	movs	r2, #132	@ 0x84
 8007008:	2108      	movs	r1, #8
 800700a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2278      	movs	r2, #120	@ 0x78
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e02c      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	401a      	ands	r2, r3
 8007024:	2380      	movs	r3, #128	@ 0x80
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	429a      	cmp	r2, r3
 800702a:	d112      	bne.n	8007052 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2280      	movs	r2, #128	@ 0x80
 8007032:	0112      	lsls	r2, r2, #4
 8007034:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	0018      	movs	r0, r3
 800703a:	f000 f81f 	bl	800707c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2284      	movs	r2, #132	@ 0x84
 8007042:	2120      	movs	r1, #32
 8007044:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2278      	movs	r2, #120	@ 0x78
 800704a:	2100      	movs	r1, #0
 800704c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e00f      	b.n	8007072 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	425a      	negs	r2, r3
 8007062:	4153      	adcs	r3, r2
 8007064:	b2db      	uxtb	r3, r3
 8007066:	001a      	movs	r2, r3
 8007068:	1dfb      	adds	r3, r7, #7
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d09e      	beq.n	8006fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	0018      	movs	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	b004      	add	sp, #16
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	@ 0x38
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007084:	f3ef 8310 	mrs	r3, PRIMASK
 8007088:	617b      	str	r3, [r7, #20]
  return(result);
 800708a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
 800708e:	2301      	movs	r3, #1
 8007090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	f383 8810 	msr	PRIMASK, r3
}
 8007098:	46c0      	nop			@ (mov r8, r8)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4926      	ldr	r1, [pc, #152]	@ (8007140 <UART_EndRxTransfer+0xc4>)
 80070a6:	400a      	ands	r2, r1
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f383 8810 	msr	PRIMASK, r3
}
 80070b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b6:	f3ef 8310 	mrs	r3, PRIMASK
 80070ba:	623b      	str	r3, [r7, #32]
  return(result);
 80070bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30
 80070c0:	2301      	movs	r3, #1
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	f383 8810 	msr	PRIMASK, r3
}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2101      	movs	r1, #1
 80070d8:	438a      	bics	r2, r1
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	f383 8810 	msr	PRIMASK, r3
}
 80070e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d118      	bne.n	8007122 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f0:	f3ef 8310 	mrs	r3, PRIMASK
 80070f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80070f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070fa:	2301      	movs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f383 8810 	msr	PRIMASK, r3
}
 8007104:	46c0      	nop			@ (mov r8, r8)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2110      	movs	r1, #16
 8007112:	438a      	bics	r2, r1
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2280      	movs	r2, #128	@ 0x80
 8007126:	2120      	movs	r1, #32
 8007128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007136:	46c0      	nop			@ (mov r8, r8)
 8007138:	46bd      	mov	sp, r7
 800713a:	b00e      	add	sp, #56	@ 0x38
 800713c:	bd80      	pop	{r7, pc}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	fffffedf 	.word	0xfffffedf

08007144 <sniprintf>:
 8007144:	b40c      	push	{r2, r3}
 8007146:	b530      	push	{r4, r5, lr}
 8007148:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <sniprintf+0x64>)
 800714a:	000c      	movs	r4, r1
 800714c:	681d      	ldr	r5, [r3, #0]
 800714e:	b09d      	sub	sp, #116	@ 0x74
 8007150:	2900      	cmp	r1, #0
 8007152:	da08      	bge.n	8007166 <sniprintf+0x22>
 8007154:	238b      	movs	r3, #139	@ 0x8b
 8007156:	2001      	movs	r0, #1
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	4240      	negs	r0, r0
 800715c:	b01d      	add	sp, #116	@ 0x74
 800715e:	bc30      	pop	{r4, r5}
 8007160:	bc08      	pop	{r3}
 8007162:	b002      	add	sp, #8
 8007164:	4718      	bx	r3
 8007166:	2382      	movs	r3, #130	@ 0x82
 8007168:	466a      	mov	r2, sp
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	8293      	strh	r3, [r2, #20]
 800716e:	2300      	movs	r3, #0
 8007170:	9002      	str	r0, [sp, #8]
 8007172:	9006      	str	r0, [sp, #24]
 8007174:	4299      	cmp	r1, r3
 8007176:	d000      	beq.n	800717a <sniprintf+0x36>
 8007178:	1e4b      	subs	r3, r1, #1
 800717a:	9304      	str	r3, [sp, #16]
 800717c:	9307      	str	r3, [sp, #28]
 800717e:	2301      	movs	r3, #1
 8007180:	466a      	mov	r2, sp
 8007182:	425b      	negs	r3, r3
 8007184:	82d3      	strh	r3, [r2, #22]
 8007186:	0028      	movs	r0, r5
 8007188:	ab21      	add	r3, sp, #132	@ 0x84
 800718a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800718c:	a902      	add	r1, sp, #8
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	f000 f9b4 	bl	80074fc <_svfiprintf_r>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	da01      	bge.n	800719c <sniprintf+0x58>
 8007198:	238b      	movs	r3, #139	@ 0x8b
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	2c00      	cmp	r4, #0
 800719e:	d0dd      	beq.n	800715c <sniprintf+0x18>
 80071a0:	2200      	movs	r2, #0
 80071a2:	9b02      	ldr	r3, [sp, #8]
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e7d9      	b.n	800715c <sniprintf+0x18>
 80071a8:	2000014c 	.word	0x2000014c

080071ac <memset>:
 80071ac:	0003      	movs	r3, r0
 80071ae:	1882      	adds	r2, r0, r2
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d100      	bne.n	80071b6 <memset+0xa>
 80071b4:	4770      	bx	lr
 80071b6:	7019      	strb	r1, [r3, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	e7f9      	b.n	80071b0 <memset+0x4>

080071bc <strcat>:
 80071bc:	0002      	movs	r2, r0
 80071be:	b510      	push	{r4, lr}
 80071c0:	7813      	ldrb	r3, [r2, #0]
 80071c2:	0014      	movs	r4, r2
 80071c4:	3201      	adds	r2, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1fa      	bne.n	80071c0 <strcat+0x4>
 80071ca:	5cca      	ldrb	r2, [r1, r3]
 80071cc:	54e2      	strb	r2, [r4, r3]
 80071ce:	3301      	adds	r3, #1
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	d1fa      	bne.n	80071ca <strcat+0xe>
 80071d4:	bd10      	pop	{r4, pc}
	...

080071d8 <__errno>:
 80071d8:	4b01      	ldr	r3, [pc, #4]	@ (80071e0 <__errno+0x8>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	4770      	bx	lr
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	2000014c 	.word	0x2000014c

080071e4 <__libc_init_array>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	2600      	movs	r6, #0
 80071e8:	4c0c      	ldr	r4, [pc, #48]	@ (800721c <__libc_init_array+0x38>)
 80071ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007220 <__libc_init_array+0x3c>)
 80071ec:	1b64      	subs	r4, r4, r5
 80071ee:	10a4      	asrs	r4, r4, #2
 80071f0:	42a6      	cmp	r6, r4
 80071f2:	d109      	bne.n	8007208 <__libc_init_array+0x24>
 80071f4:	2600      	movs	r6, #0
 80071f6:	f000 fc65 	bl	8007ac4 <_init>
 80071fa:	4c0a      	ldr	r4, [pc, #40]	@ (8007224 <__libc_init_array+0x40>)
 80071fc:	4d0a      	ldr	r5, [pc, #40]	@ (8007228 <__libc_init_array+0x44>)
 80071fe:	1b64      	subs	r4, r4, r5
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	42a6      	cmp	r6, r4
 8007204:	d105      	bne.n	8007212 <__libc_init_array+0x2e>
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	00b3      	lsls	r3, r6, #2
 800720a:	58eb      	ldr	r3, [r5, r3]
 800720c:	4798      	blx	r3
 800720e:	3601      	adds	r6, #1
 8007210:	e7ee      	b.n	80071f0 <__libc_init_array+0xc>
 8007212:	00b3      	lsls	r3, r6, #2
 8007214:	58eb      	ldr	r3, [r5, r3]
 8007216:	4798      	blx	r3
 8007218:	3601      	adds	r6, #1
 800721a:	e7f2      	b.n	8007202 <__libc_init_array+0x1e>
 800721c:	08009784 	.word	0x08009784
 8007220:	08009784 	.word	0x08009784
 8007224:	08009788 	.word	0x08009788
 8007228:	08009784 	.word	0x08009784

0800722c <__retarget_lock_acquire_recursive>:
 800722c:	4770      	bx	lr

0800722e <__retarget_lock_release_recursive>:
 800722e:	4770      	bx	lr

08007230 <memcpy>:
 8007230:	2300      	movs	r3, #0
 8007232:	b510      	push	{r4, lr}
 8007234:	429a      	cmp	r2, r3
 8007236:	d100      	bne.n	800723a <memcpy+0xa>
 8007238:	bd10      	pop	{r4, pc}
 800723a:	5ccc      	ldrb	r4, [r1, r3]
 800723c:	54c4      	strb	r4, [r0, r3]
 800723e:	3301      	adds	r3, #1
 8007240:	e7f8      	b.n	8007234 <memcpy+0x4>
	...

08007244 <_free_r>:
 8007244:	b570      	push	{r4, r5, r6, lr}
 8007246:	0005      	movs	r5, r0
 8007248:	1e0c      	subs	r4, r1, #0
 800724a:	d010      	beq.n	800726e <_free_r+0x2a>
 800724c:	3c04      	subs	r4, #4
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	da00      	bge.n	8007256 <_free_r+0x12>
 8007254:	18e4      	adds	r4, r4, r3
 8007256:	0028      	movs	r0, r5
 8007258:	f000 f8e0 	bl	800741c <__malloc_lock>
 800725c:	4a1d      	ldr	r2, [pc, #116]	@ (80072d4 <_free_r+0x90>)
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d105      	bne.n	8007270 <_free_r+0x2c>
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6014      	str	r4, [r2, #0]
 8007268:	0028      	movs	r0, r5
 800726a:	f000 f8df 	bl	800742c <__malloc_unlock>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	42a3      	cmp	r3, r4
 8007272:	d908      	bls.n	8007286 <_free_r+0x42>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	d1f3      	bne.n	8007264 <_free_r+0x20>
 800727c:	6819      	ldr	r1, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	1809      	adds	r1, r1, r0
 8007282:	6021      	str	r1, [r4, #0]
 8007284:	e7ee      	b.n	8007264 <_free_r+0x20>
 8007286:	001a      	movs	r2, r3
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <_free_r+0x4e>
 800728e:	42a3      	cmp	r3, r4
 8007290:	d9f9      	bls.n	8007286 <_free_r+0x42>
 8007292:	6811      	ldr	r1, [r2, #0]
 8007294:	1850      	adds	r0, r2, r1
 8007296:	42a0      	cmp	r0, r4
 8007298:	d10b      	bne.n	80072b2 <_free_r+0x6e>
 800729a:	6820      	ldr	r0, [r4, #0]
 800729c:	1809      	adds	r1, r1, r0
 800729e:	1850      	adds	r0, r2, r1
 80072a0:	6011      	str	r1, [r2, #0]
 80072a2:	4283      	cmp	r3, r0
 80072a4:	d1e0      	bne.n	8007268 <_free_r+0x24>
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	1841      	adds	r1, r0, r1
 80072ac:	6011      	str	r1, [r2, #0]
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	e7da      	b.n	8007268 <_free_r+0x24>
 80072b2:	42a0      	cmp	r0, r4
 80072b4:	d902      	bls.n	80072bc <_free_r+0x78>
 80072b6:	230c      	movs	r3, #12
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	e7d5      	b.n	8007268 <_free_r+0x24>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	1821      	adds	r1, r4, r0
 80072c0:	428b      	cmp	r3, r1
 80072c2:	d103      	bne.n	80072cc <_free_r+0x88>
 80072c4:	6819      	ldr	r1, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	1809      	adds	r1, r1, r0
 80072ca:	6021      	str	r1, [r4, #0]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	6054      	str	r4, [r2, #4]
 80072d0:	e7ca      	b.n	8007268 <_free_r+0x24>
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	20000a84 	.word	0x20000a84

080072d8 <sbrk_aligned>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4e0f      	ldr	r6, [pc, #60]	@ (8007318 <sbrk_aligned+0x40>)
 80072dc:	000d      	movs	r5, r1
 80072de:	6831      	ldr	r1, [r6, #0]
 80072e0:	0004      	movs	r4, r0
 80072e2:	2900      	cmp	r1, #0
 80072e4:	d102      	bne.n	80072ec <sbrk_aligned+0x14>
 80072e6:	f000 fb99 	bl	8007a1c <_sbrk_r>
 80072ea:	6030      	str	r0, [r6, #0]
 80072ec:	0029      	movs	r1, r5
 80072ee:	0020      	movs	r0, r4
 80072f0:	f000 fb94 	bl	8007a1c <_sbrk_r>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d103      	bne.n	8007300 <sbrk_aligned+0x28>
 80072f8:	2501      	movs	r5, #1
 80072fa:	426d      	negs	r5, r5
 80072fc:	0028      	movs	r0, r5
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	2303      	movs	r3, #3
 8007302:	1cc5      	adds	r5, r0, #3
 8007304:	439d      	bics	r5, r3
 8007306:	42a8      	cmp	r0, r5
 8007308:	d0f8      	beq.n	80072fc <sbrk_aligned+0x24>
 800730a:	1a29      	subs	r1, r5, r0
 800730c:	0020      	movs	r0, r4
 800730e:	f000 fb85 	bl	8007a1c <_sbrk_r>
 8007312:	3001      	adds	r0, #1
 8007314:	d1f2      	bne.n	80072fc <sbrk_aligned+0x24>
 8007316:	e7ef      	b.n	80072f8 <sbrk_aligned+0x20>
 8007318:	20000a80 	.word	0x20000a80

0800731c <_malloc_r>:
 800731c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800731e:	2203      	movs	r2, #3
 8007320:	1ccb      	adds	r3, r1, #3
 8007322:	4393      	bics	r3, r2
 8007324:	3308      	adds	r3, #8
 8007326:	0005      	movs	r5, r0
 8007328:	001f      	movs	r7, r3
 800732a:	2b0c      	cmp	r3, #12
 800732c:	d234      	bcs.n	8007398 <_malloc_r+0x7c>
 800732e:	270c      	movs	r7, #12
 8007330:	42b9      	cmp	r1, r7
 8007332:	d833      	bhi.n	800739c <_malloc_r+0x80>
 8007334:	0028      	movs	r0, r5
 8007336:	f000 f871 	bl	800741c <__malloc_lock>
 800733a:	4e37      	ldr	r6, [pc, #220]	@ (8007418 <_malloc_r+0xfc>)
 800733c:	6833      	ldr	r3, [r6, #0]
 800733e:	001c      	movs	r4, r3
 8007340:	2c00      	cmp	r4, #0
 8007342:	d12f      	bne.n	80073a4 <_malloc_r+0x88>
 8007344:	0039      	movs	r1, r7
 8007346:	0028      	movs	r0, r5
 8007348:	f7ff ffc6 	bl	80072d8 <sbrk_aligned>
 800734c:	0004      	movs	r4, r0
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d15f      	bne.n	8007412 <_malloc_r+0xf6>
 8007352:	6834      	ldr	r4, [r6, #0]
 8007354:	9400      	str	r4, [sp, #0]
 8007356:	9b00      	ldr	r3, [sp, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d14a      	bne.n	80073f2 <_malloc_r+0xd6>
 800735c:	2c00      	cmp	r4, #0
 800735e:	d052      	beq.n	8007406 <_malloc_r+0xea>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	0028      	movs	r0, r5
 8007364:	18e3      	adds	r3, r4, r3
 8007366:	9900      	ldr	r1, [sp, #0]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	f000 fb57 	bl	8007a1c <_sbrk_r>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	4283      	cmp	r3, r0
 8007372:	d148      	bne.n	8007406 <_malloc_r+0xea>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	0028      	movs	r0, r5
 8007378:	1aff      	subs	r7, r7, r3
 800737a:	0039      	movs	r1, r7
 800737c:	f7ff ffac 	bl	80072d8 <sbrk_aligned>
 8007380:	3001      	adds	r0, #1
 8007382:	d040      	beq.n	8007406 <_malloc_r+0xea>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	19db      	adds	r3, r3, r7
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	6833      	ldr	r3, [r6, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	2a00      	cmp	r2, #0
 8007390:	d133      	bne.n	80073fa <_malloc_r+0xde>
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	e019      	b.n	80073cc <_malloc_r+0xb0>
 8007398:	2b00      	cmp	r3, #0
 800739a:	dac9      	bge.n	8007330 <_malloc_r+0x14>
 800739c:	230c      	movs	r3, #12
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	2000      	movs	r0, #0
 80073a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073a4:	6821      	ldr	r1, [r4, #0]
 80073a6:	1bc9      	subs	r1, r1, r7
 80073a8:	d420      	bmi.n	80073ec <_malloc_r+0xd0>
 80073aa:	290b      	cmp	r1, #11
 80073ac:	d90a      	bls.n	80073c4 <_malloc_r+0xa8>
 80073ae:	19e2      	adds	r2, r4, r7
 80073b0:	6027      	str	r7, [r4, #0]
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	d104      	bne.n	80073c0 <_malloc_r+0xa4>
 80073b6:	6032      	str	r2, [r6, #0]
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	6011      	str	r1, [r2, #0]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	e005      	b.n	80073cc <_malloc_r+0xb0>
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e7f9      	b.n	80073b8 <_malloc_r+0x9c>
 80073c4:	6862      	ldr	r2, [r4, #4]
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	d10e      	bne.n	80073e8 <_malloc_r+0xcc>
 80073ca:	6032      	str	r2, [r6, #0]
 80073cc:	0028      	movs	r0, r5
 80073ce:	f000 f82d 	bl	800742c <__malloc_unlock>
 80073d2:	0020      	movs	r0, r4
 80073d4:	2207      	movs	r2, #7
 80073d6:	300b      	adds	r0, #11
 80073d8:	1d23      	adds	r3, r4, #4
 80073da:	4390      	bics	r0, r2
 80073dc:	1ac2      	subs	r2, r0, r3
 80073de:	4298      	cmp	r0, r3
 80073e0:	d0df      	beq.n	80073a2 <_malloc_r+0x86>
 80073e2:	1a1b      	subs	r3, r3, r0
 80073e4:	50a3      	str	r3, [r4, r2]
 80073e6:	e7dc      	b.n	80073a2 <_malloc_r+0x86>
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	e7ef      	b.n	80073cc <_malloc_r+0xb0>
 80073ec:	0023      	movs	r3, r4
 80073ee:	6864      	ldr	r4, [r4, #4]
 80073f0:	e7a6      	b.n	8007340 <_malloc_r+0x24>
 80073f2:	9c00      	ldr	r4, [sp, #0]
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	e7ad      	b.n	8007356 <_malloc_r+0x3a>
 80073fa:	001a      	movs	r2, r3
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	42a3      	cmp	r3, r4
 8007400:	d1fb      	bne.n	80073fa <_malloc_r+0xde>
 8007402:	2300      	movs	r3, #0
 8007404:	e7da      	b.n	80073bc <_malloc_r+0xa0>
 8007406:	230c      	movs	r3, #12
 8007408:	0028      	movs	r0, r5
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	f000 f80e 	bl	800742c <__malloc_unlock>
 8007410:	e7c6      	b.n	80073a0 <_malloc_r+0x84>
 8007412:	6007      	str	r7, [r0, #0]
 8007414:	e7da      	b.n	80073cc <_malloc_r+0xb0>
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	20000a84 	.word	0x20000a84

0800741c <__malloc_lock>:
 800741c:	b510      	push	{r4, lr}
 800741e:	4802      	ldr	r0, [pc, #8]	@ (8007428 <__malloc_lock+0xc>)
 8007420:	f7ff ff04 	bl	800722c <__retarget_lock_acquire_recursive>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	20000a7c 	.word	0x20000a7c

0800742c <__malloc_unlock>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4802      	ldr	r0, [pc, #8]	@ (8007438 <__malloc_unlock+0xc>)
 8007430:	f7ff fefd 	bl	800722e <__retarget_lock_release_recursive>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	46c0      	nop			@ (mov r8, r8)
 8007438:	20000a7c 	.word	0x20000a7c

0800743c <__ssputs_r>:
 800743c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743e:	688e      	ldr	r6, [r1, #8]
 8007440:	b085      	sub	sp, #20
 8007442:	001f      	movs	r7, r3
 8007444:	000c      	movs	r4, r1
 8007446:	680b      	ldr	r3, [r1, #0]
 8007448:	9002      	str	r0, [sp, #8]
 800744a:	9203      	str	r2, [sp, #12]
 800744c:	42be      	cmp	r6, r7
 800744e:	d830      	bhi.n	80074b2 <__ssputs_r+0x76>
 8007450:	210c      	movs	r1, #12
 8007452:	5e62      	ldrsh	r2, [r4, r1]
 8007454:	2190      	movs	r1, #144	@ 0x90
 8007456:	00c9      	lsls	r1, r1, #3
 8007458:	420a      	tst	r2, r1
 800745a:	d028      	beq.n	80074ae <__ssputs_r+0x72>
 800745c:	2003      	movs	r0, #3
 800745e:	6921      	ldr	r1, [r4, #16]
 8007460:	1a5b      	subs	r3, r3, r1
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	6963      	ldr	r3, [r4, #20]
 8007466:	4343      	muls	r3, r0
 8007468:	9801      	ldr	r0, [sp, #4]
 800746a:	0fdd      	lsrs	r5, r3, #31
 800746c:	18ed      	adds	r5, r5, r3
 800746e:	1c7b      	adds	r3, r7, #1
 8007470:	181b      	adds	r3, r3, r0
 8007472:	106d      	asrs	r5, r5, #1
 8007474:	42ab      	cmp	r3, r5
 8007476:	d900      	bls.n	800747a <__ssputs_r+0x3e>
 8007478:	001d      	movs	r5, r3
 800747a:	0552      	lsls	r2, r2, #21
 800747c:	d528      	bpl.n	80074d0 <__ssputs_r+0x94>
 800747e:	0029      	movs	r1, r5
 8007480:	9802      	ldr	r0, [sp, #8]
 8007482:	f7ff ff4b 	bl	800731c <_malloc_r>
 8007486:	1e06      	subs	r6, r0, #0
 8007488:	d02c      	beq.n	80074e4 <__ssputs_r+0xa8>
 800748a:	9a01      	ldr	r2, [sp, #4]
 800748c:	6921      	ldr	r1, [r4, #16]
 800748e:	f7ff fecf 	bl	8007230 <memcpy>
 8007492:	89a2      	ldrh	r2, [r4, #12]
 8007494:	4b18      	ldr	r3, [pc, #96]	@ (80074f8 <__ssputs_r+0xbc>)
 8007496:	401a      	ands	r2, r3
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	4313      	orrs	r3, r2
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	6126      	str	r6, [r4, #16]
 80074a2:	18f6      	adds	r6, r6, r3
 80074a4:	6026      	str	r6, [r4, #0]
 80074a6:	003e      	movs	r6, r7
 80074a8:	6165      	str	r5, [r4, #20]
 80074aa:	1aed      	subs	r5, r5, r3
 80074ac:	60a5      	str	r5, [r4, #8]
 80074ae:	42be      	cmp	r6, r7
 80074b0:	d900      	bls.n	80074b4 <__ssputs_r+0x78>
 80074b2:	003e      	movs	r6, r7
 80074b4:	0032      	movs	r2, r6
 80074b6:	9903      	ldr	r1, [sp, #12]
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	f000 fa9b 	bl	80079f4 <memmove>
 80074be:	2000      	movs	r0, #0
 80074c0:	68a3      	ldr	r3, [r4, #8]
 80074c2:	1b9b      	subs	r3, r3, r6
 80074c4:	60a3      	str	r3, [r4, #8]
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	199b      	adds	r3, r3, r6
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	b005      	add	sp, #20
 80074ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d0:	002a      	movs	r2, r5
 80074d2:	9802      	ldr	r0, [sp, #8]
 80074d4:	f000 fabf 	bl	8007a56 <_realloc_r>
 80074d8:	1e06      	subs	r6, r0, #0
 80074da:	d1e0      	bne.n	800749e <__ssputs_r+0x62>
 80074dc:	6921      	ldr	r1, [r4, #16]
 80074de:	9802      	ldr	r0, [sp, #8]
 80074e0:	f7ff feb0 	bl	8007244 <_free_r>
 80074e4:	230c      	movs	r3, #12
 80074e6:	2001      	movs	r0, #1
 80074e8:	9a02      	ldr	r2, [sp, #8]
 80074ea:	4240      	negs	r0, r0
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	89a2      	ldrh	r2, [r4, #12]
 80074f0:	3334      	adds	r3, #52	@ 0x34
 80074f2:	4313      	orrs	r3, r2
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	e7e9      	b.n	80074cc <__ssputs_r+0x90>
 80074f8:	fffffb7f 	.word	0xfffffb7f

080074fc <_svfiprintf_r>:
 80074fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fe:	b0a1      	sub	sp, #132	@ 0x84
 8007500:	9003      	str	r0, [sp, #12]
 8007502:	001d      	movs	r5, r3
 8007504:	898b      	ldrh	r3, [r1, #12]
 8007506:	000f      	movs	r7, r1
 8007508:	0016      	movs	r6, r2
 800750a:	061b      	lsls	r3, r3, #24
 800750c:	d511      	bpl.n	8007532 <_svfiprintf_r+0x36>
 800750e:	690b      	ldr	r3, [r1, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10e      	bne.n	8007532 <_svfiprintf_r+0x36>
 8007514:	2140      	movs	r1, #64	@ 0x40
 8007516:	f7ff ff01 	bl	800731c <_malloc_r>
 800751a:	6038      	str	r0, [r7, #0]
 800751c:	6138      	str	r0, [r7, #16]
 800751e:	2800      	cmp	r0, #0
 8007520:	d105      	bne.n	800752e <_svfiprintf_r+0x32>
 8007522:	230c      	movs	r3, #12
 8007524:	9a03      	ldr	r2, [sp, #12]
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	2001      	movs	r0, #1
 800752a:	4240      	negs	r0, r0
 800752c:	e0cf      	b.n	80076ce <_svfiprintf_r+0x1d2>
 800752e:	2340      	movs	r3, #64	@ 0x40
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	2300      	movs	r3, #0
 8007534:	ac08      	add	r4, sp, #32
 8007536:	6163      	str	r3, [r4, #20]
 8007538:	3320      	adds	r3, #32
 800753a:	7663      	strb	r3, [r4, #25]
 800753c:	3310      	adds	r3, #16
 800753e:	76a3      	strb	r3, [r4, #26]
 8007540:	9507      	str	r5, [sp, #28]
 8007542:	0035      	movs	r5, r6
 8007544:	782b      	ldrb	r3, [r5, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <_svfiprintf_r+0x52>
 800754a:	2b25      	cmp	r3, #37	@ 0x25
 800754c:	d148      	bne.n	80075e0 <_svfiprintf_r+0xe4>
 800754e:	1bab      	subs	r3, r5, r6
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	42b5      	cmp	r5, r6
 8007554:	d00b      	beq.n	800756e <_svfiprintf_r+0x72>
 8007556:	0032      	movs	r2, r6
 8007558:	0039      	movs	r1, r7
 800755a:	9803      	ldr	r0, [sp, #12]
 800755c:	f7ff ff6e 	bl	800743c <__ssputs_r>
 8007560:	3001      	adds	r0, #1
 8007562:	d100      	bne.n	8007566 <_svfiprintf_r+0x6a>
 8007564:	e0ae      	b.n	80076c4 <_svfiprintf_r+0x1c8>
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	9a05      	ldr	r2, [sp, #20]
 800756a:	189b      	adds	r3, r3, r2
 800756c:	6163      	str	r3, [r4, #20]
 800756e:	782b      	ldrb	r3, [r5, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d100      	bne.n	8007576 <_svfiprintf_r+0x7a>
 8007574:	e0a6      	b.n	80076c4 <_svfiprintf_r+0x1c8>
 8007576:	2201      	movs	r2, #1
 8007578:	2300      	movs	r3, #0
 800757a:	4252      	negs	r2, r2
 800757c:	6062      	str	r2, [r4, #4]
 800757e:	a904      	add	r1, sp, #16
 8007580:	3254      	adds	r2, #84	@ 0x54
 8007582:	1852      	adds	r2, r2, r1
 8007584:	1c6e      	adds	r6, r5, #1
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	60e3      	str	r3, [r4, #12]
 800758a:	60a3      	str	r3, [r4, #8]
 800758c:	7013      	strb	r3, [r2, #0]
 800758e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007590:	4b54      	ldr	r3, [pc, #336]	@ (80076e4 <_svfiprintf_r+0x1e8>)
 8007592:	2205      	movs	r2, #5
 8007594:	0018      	movs	r0, r3
 8007596:	7831      	ldrb	r1, [r6, #0]
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	f000 fa51 	bl	8007a40 <memchr>
 800759e:	1c75      	adds	r5, r6, #1
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d11f      	bne.n	80075e4 <_svfiprintf_r+0xe8>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	06d3      	lsls	r3, r2, #27
 80075a8:	d504      	bpl.n	80075b4 <_svfiprintf_r+0xb8>
 80075aa:	2353      	movs	r3, #83	@ 0x53
 80075ac:	a904      	add	r1, sp, #16
 80075ae:	185b      	adds	r3, r3, r1
 80075b0:	2120      	movs	r1, #32
 80075b2:	7019      	strb	r1, [r3, #0]
 80075b4:	0713      	lsls	r3, r2, #28
 80075b6:	d504      	bpl.n	80075c2 <_svfiprintf_r+0xc6>
 80075b8:	2353      	movs	r3, #83	@ 0x53
 80075ba:	a904      	add	r1, sp, #16
 80075bc:	185b      	adds	r3, r3, r1
 80075be:	212b      	movs	r1, #43	@ 0x2b
 80075c0:	7019      	strb	r1, [r3, #0]
 80075c2:	7833      	ldrb	r3, [r6, #0]
 80075c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075c6:	d016      	beq.n	80075f6 <_svfiprintf_r+0xfa>
 80075c8:	0035      	movs	r5, r6
 80075ca:	2100      	movs	r1, #0
 80075cc:	200a      	movs	r0, #10
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	782a      	ldrb	r2, [r5, #0]
 80075d2:	1c6e      	adds	r6, r5, #1
 80075d4:	3a30      	subs	r2, #48	@ 0x30
 80075d6:	2a09      	cmp	r2, #9
 80075d8:	d950      	bls.n	800767c <_svfiprintf_r+0x180>
 80075da:	2900      	cmp	r1, #0
 80075dc:	d111      	bne.n	8007602 <_svfiprintf_r+0x106>
 80075de:	e017      	b.n	8007610 <_svfiprintf_r+0x114>
 80075e0:	3501      	adds	r5, #1
 80075e2:	e7af      	b.n	8007544 <_svfiprintf_r+0x48>
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	1ac0      	subs	r0, r0, r3
 80075ea:	2301      	movs	r3, #1
 80075ec:	4083      	lsls	r3, r0
 80075ee:	4313      	orrs	r3, r2
 80075f0:	002e      	movs	r6, r5
 80075f2:	6023      	str	r3, [r4, #0]
 80075f4:	e7cc      	b.n	8007590 <_svfiprintf_r+0x94>
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9107      	str	r1, [sp, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	db01      	blt.n	8007606 <_svfiprintf_r+0x10a>
 8007602:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007604:	e004      	b.n	8007610 <_svfiprintf_r+0x114>
 8007606:	425b      	negs	r3, r3
 8007608:	60e3      	str	r3, [r4, #12]
 800760a:	2302      	movs	r3, #2
 800760c:	4313      	orrs	r3, r2
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	782b      	ldrb	r3, [r5, #0]
 8007612:	2b2e      	cmp	r3, #46	@ 0x2e
 8007614:	d10c      	bne.n	8007630 <_svfiprintf_r+0x134>
 8007616:	786b      	ldrb	r3, [r5, #1]
 8007618:	2b2a      	cmp	r3, #42	@ 0x2a
 800761a:	d134      	bne.n	8007686 <_svfiprintf_r+0x18a>
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	3502      	adds	r5, #2
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	9207      	str	r2, [sp, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	da01      	bge.n	800762e <_svfiprintf_r+0x132>
 800762a:	2301      	movs	r3, #1
 800762c:	425b      	negs	r3, r3
 800762e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007630:	4e2d      	ldr	r6, [pc, #180]	@ (80076e8 <_svfiprintf_r+0x1ec>)
 8007632:	2203      	movs	r2, #3
 8007634:	0030      	movs	r0, r6
 8007636:	7829      	ldrb	r1, [r5, #0]
 8007638:	f000 fa02 	bl	8007a40 <memchr>
 800763c:	2800      	cmp	r0, #0
 800763e:	d006      	beq.n	800764e <_svfiprintf_r+0x152>
 8007640:	2340      	movs	r3, #64	@ 0x40
 8007642:	1b80      	subs	r0, r0, r6
 8007644:	4083      	lsls	r3, r0
 8007646:	6822      	ldr	r2, [r4, #0]
 8007648:	3501      	adds	r5, #1
 800764a:	4313      	orrs	r3, r2
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	7829      	ldrb	r1, [r5, #0]
 8007650:	2206      	movs	r2, #6
 8007652:	4826      	ldr	r0, [pc, #152]	@ (80076ec <_svfiprintf_r+0x1f0>)
 8007654:	1c6e      	adds	r6, r5, #1
 8007656:	7621      	strb	r1, [r4, #24]
 8007658:	f000 f9f2 	bl	8007a40 <memchr>
 800765c:	2800      	cmp	r0, #0
 800765e:	d038      	beq.n	80076d2 <_svfiprintf_r+0x1d6>
 8007660:	4b23      	ldr	r3, [pc, #140]	@ (80076f0 <_svfiprintf_r+0x1f4>)
 8007662:	2b00      	cmp	r3, #0
 8007664:	d122      	bne.n	80076ac <_svfiprintf_r+0x1b0>
 8007666:	2207      	movs	r2, #7
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	3307      	adds	r3, #7
 800766c:	4393      	bics	r3, r2
 800766e:	3308      	adds	r3, #8
 8007670:	9307      	str	r3, [sp, #28]
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	9a04      	ldr	r2, [sp, #16]
 8007676:	189b      	adds	r3, r3, r2
 8007678:	6163      	str	r3, [r4, #20]
 800767a:	e762      	b.n	8007542 <_svfiprintf_r+0x46>
 800767c:	4343      	muls	r3, r0
 800767e:	0035      	movs	r5, r6
 8007680:	2101      	movs	r1, #1
 8007682:	189b      	adds	r3, r3, r2
 8007684:	e7a4      	b.n	80075d0 <_svfiprintf_r+0xd4>
 8007686:	2300      	movs	r3, #0
 8007688:	200a      	movs	r0, #10
 800768a:	0019      	movs	r1, r3
 800768c:	3501      	adds	r5, #1
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	782a      	ldrb	r2, [r5, #0]
 8007692:	1c6e      	adds	r6, r5, #1
 8007694:	3a30      	subs	r2, #48	@ 0x30
 8007696:	2a09      	cmp	r2, #9
 8007698:	d903      	bls.n	80076a2 <_svfiprintf_r+0x1a6>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0c8      	beq.n	8007630 <_svfiprintf_r+0x134>
 800769e:	9109      	str	r1, [sp, #36]	@ 0x24
 80076a0:	e7c6      	b.n	8007630 <_svfiprintf_r+0x134>
 80076a2:	4341      	muls	r1, r0
 80076a4:	0035      	movs	r5, r6
 80076a6:	2301      	movs	r3, #1
 80076a8:	1889      	adds	r1, r1, r2
 80076aa:	e7f1      	b.n	8007690 <_svfiprintf_r+0x194>
 80076ac:	aa07      	add	r2, sp, #28
 80076ae:	9200      	str	r2, [sp, #0]
 80076b0:	0021      	movs	r1, r4
 80076b2:	003a      	movs	r2, r7
 80076b4:	4b0f      	ldr	r3, [pc, #60]	@ (80076f4 <_svfiprintf_r+0x1f8>)
 80076b6:	9803      	ldr	r0, [sp, #12]
 80076b8:	e000      	b.n	80076bc <_svfiprintf_r+0x1c0>
 80076ba:	bf00      	nop
 80076bc:	9004      	str	r0, [sp, #16]
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	3301      	adds	r3, #1
 80076c2:	d1d6      	bne.n	8007672 <_svfiprintf_r+0x176>
 80076c4:	89bb      	ldrh	r3, [r7, #12]
 80076c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80076c8:	065b      	lsls	r3, r3, #25
 80076ca:	d500      	bpl.n	80076ce <_svfiprintf_r+0x1d2>
 80076cc:	e72c      	b.n	8007528 <_svfiprintf_r+0x2c>
 80076ce:	b021      	add	sp, #132	@ 0x84
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d2:	aa07      	add	r2, sp, #28
 80076d4:	9200      	str	r2, [sp, #0]
 80076d6:	0021      	movs	r1, r4
 80076d8:	003a      	movs	r2, r7
 80076da:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <_svfiprintf_r+0x1f8>)
 80076dc:	9803      	ldr	r0, [sp, #12]
 80076de:	f000 f87b 	bl	80077d8 <_printf_i>
 80076e2:	e7eb      	b.n	80076bc <_svfiprintf_r+0x1c0>
 80076e4:	08009750 	.word	0x08009750
 80076e8:	08009756 	.word	0x08009756
 80076ec:	0800975a 	.word	0x0800975a
 80076f0:	00000000 	.word	0x00000000
 80076f4:	0800743d 	.word	0x0800743d

080076f8 <_printf_common>:
 80076f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076fa:	0016      	movs	r6, r2
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	688a      	ldr	r2, [r1, #8]
 8007700:	690b      	ldr	r3, [r1, #16]
 8007702:	000c      	movs	r4, r1
 8007704:	9000      	str	r0, [sp, #0]
 8007706:	4293      	cmp	r3, r2
 8007708:	da00      	bge.n	800770c <_printf_common+0x14>
 800770a:	0013      	movs	r3, r2
 800770c:	0022      	movs	r2, r4
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	3243      	adds	r2, #67	@ 0x43
 8007712:	7812      	ldrb	r2, [r2, #0]
 8007714:	2a00      	cmp	r2, #0
 8007716:	d001      	beq.n	800771c <_printf_common+0x24>
 8007718:	3301      	adds	r3, #1
 800771a:	6033      	str	r3, [r6, #0]
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	069b      	lsls	r3, r3, #26
 8007720:	d502      	bpl.n	8007728 <_printf_common+0x30>
 8007722:	6833      	ldr	r3, [r6, #0]
 8007724:	3302      	adds	r3, #2
 8007726:	6033      	str	r3, [r6, #0]
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	2306      	movs	r3, #6
 800772c:	0015      	movs	r5, r2
 800772e:	401d      	ands	r5, r3
 8007730:	421a      	tst	r2, r3
 8007732:	d027      	beq.n	8007784 <_printf_common+0x8c>
 8007734:	0023      	movs	r3, r4
 8007736:	3343      	adds	r3, #67	@ 0x43
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	1e5a      	subs	r2, r3, #1
 800773c:	4193      	sbcs	r3, r2
 800773e:	6822      	ldr	r2, [r4, #0]
 8007740:	0692      	lsls	r2, r2, #26
 8007742:	d430      	bmi.n	80077a6 <_printf_common+0xae>
 8007744:	0022      	movs	r2, r4
 8007746:	9901      	ldr	r1, [sp, #4]
 8007748:	9800      	ldr	r0, [sp, #0]
 800774a:	9d08      	ldr	r5, [sp, #32]
 800774c:	3243      	adds	r2, #67	@ 0x43
 800774e:	47a8      	blx	r5
 8007750:	3001      	adds	r0, #1
 8007752:	d025      	beq.n	80077a0 <_printf_common+0xa8>
 8007754:	2206      	movs	r2, #6
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	2500      	movs	r5, #0
 800775a:	4013      	ands	r3, r2
 800775c:	2b04      	cmp	r3, #4
 800775e:	d105      	bne.n	800776c <_printf_common+0x74>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	68e5      	ldr	r5, [r4, #12]
 8007764:	1aed      	subs	r5, r5, r3
 8007766:	43eb      	mvns	r3, r5
 8007768:	17db      	asrs	r3, r3, #31
 800776a:	401d      	ands	r5, r3
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	6922      	ldr	r2, [r4, #16]
 8007770:	4293      	cmp	r3, r2
 8007772:	dd01      	ble.n	8007778 <_printf_common+0x80>
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	18ed      	adds	r5, r5, r3
 8007778:	2600      	movs	r6, #0
 800777a:	42b5      	cmp	r5, r6
 800777c:	d120      	bne.n	80077c0 <_printf_common+0xc8>
 800777e:	2000      	movs	r0, #0
 8007780:	e010      	b.n	80077a4 <_printf_common+0xac>
 8007782:	3501      	adds	r5, #1
 8007784:	68e3      	ldr	r3, [r4, #12]
 8007786:	6832      	ldr	r2, [r6, #0]
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	42ab      	cmp	r3, r5
 800778c:	ddd2      	ble.n	8007734 <_printf_common+0x3c>
 800778e:	0022      	movs	r2, r4
 8007790:	2301      	movs	r3, #1
 8007792:	9901      	ldr	r1, [sp, #4]
 8007794:	9800      	ldr	r0, [sp, #0]
 8007796:	9f08      	ldr	r7, [sp, #32]
 8007798:	3219      	adds	r2, #25
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d1f0      	bne.n	8007782 <_printf_common+0x8a>
 80077a0:	2001      	movs	r0, #1
 80077a2:	4240      	negs	r0, r0
 80077a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077a6:	2030      	movs	r0, #48	@ 0x30
 80077a8:	18e1      	adds	r1, r4, r3
 80077aa:	3143      	adds	r1, #67	@ 0x43
 80077ac:	7008      	strb	r0, [r1, #0]
 80077ae:	0021      	movs	r1, r4
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	3145      	adds	r1, #69	@ 0x45
 80077b4:	7809      	ldrb	r1, [r1, #0]
 80077b6:	18a2      	adds	r2, r4, r2
 80077b8:	3243      	adds	r2, #67	@ 0x43
 80077ba:	3302      	adds	r3, #2
 80077bc:	7011      	strb	r1, [r2, #0]
 80077be:	e7c1      	b.n	8007744 <_printf_common+0x4c>
 80077c0:	0022      	movs	r2, r4
 80077c2:	2301      	movs	r3, #1
 80077c4:	9901      	ldr	r1, [sp, #4]
 80077c6:	9800      	ldr	r0, [sp, #0]
 80077c8:	9f08      	ldr	r7, [sp, #32]
 80077ca:	321a      	adds	r2, #26
 80077cc:	47b8      	blx	r7
 80077ce:	3001      	adds	r0, #1
 80077d0:	d0e6      	beq.n	80077a0 <_printf_common+0xa8>
 80077d2:	3601      	adds	r6, #1
 80077d4:	e7d1      	b.n	800777a <_printf_common+0x82>
	...

080077d8 <_printf_i>:
 80077d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077da:	b08b      	sub	sp, #44	@ 0x2c
 80077dc:	9206      	str	r2, [sp, #24]
 80077de:	000a      	movs	r2, r1
 80077e0:	3243      	adds	r2, #67	@ 0x43
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	9005      	str	r0, [sp, #20]
 80077e6:	9203      	str	r2, [sp, #12]
 80077e8:	7e0a      	ldrb	r2, [r1, #24]
 80077ea:	000c      	movs	r4, r1
 80077ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80077ee:	2a78      	cmp	r2, #120	@ 0x78
 80077f0:	d809      	bhi.n	8007806 <_printf_i+0x2e>
 80077f2:	2a62      	cmp	r2, #98	@ 0x62
 80077f4:	d80b      	bhi.n	800780e <_printf_i+0x36>
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d100      	bne.n	80077fc <_printf_i+0x24>
 80077fa:	e0bc      	b.n	8007976 <_printf_i+0x19e>
 80077fc:	497b      	ldr	r1, [pc, #492]	@ (80079ec <_printf_i+0x214>)
 80077fe:	9104      	str	r1, [sp, #16]
 8007800:	2a58      	cmp	r2, #88	@ 0x58
 8007802:	d100      	bne.n	8007806 <_printf_i+0x2e>
 8007804:	e090      	b.n	8007928 <_printf_i+0x150>
 8007806:	0025      	movs	r5, r4
 8007808:	3542      	adds	r5, #66	@ 0x42
 800780a:	702a      	strb	r2, [r5, #0]
 800780c:	e022      	b.n	8007854 <_printf_i+0x7c>
 800780e:	0010      	movs	r0, r2
 8007810:	3863      	subs	r0, #99	@ 0x63
 8007812:	2815      	cmp	r0, #21
 8007814:	d8f7      	bhi.n	8007806 <_printf_i+0x2e>
 8007816:	f7f8 fc7f 	bl	8000118 <__gnu_thumb1_case_shi>
 800781a:	0016      	.short	0x0016
 800781c:	fff6001f 	.word	0xfff6001f
 8007820:	fff6fff6 	.word	0xfff6fff6
 8007824:	001ffff6 	.word	0x001ffff6
 8007828:	fff6fff6 	.word	0xfff6fff6
 800782c:	fff6fff6 	.word	0xfff6fff6
 8007830:	003600a1 	.word	0x003600a1
 8007834:	fff60080 	.word	0xfff60080
 8007838:	00b2fff6 	.word	0x00b2fff6
 800783c:	0036fff6 	.word	0x0036fff6
 8007840:	fff6fff6 	.word	0xfff6fff6
 8007844:	0084      	.short	0x0084
 8007846:	0025      	movs	r5, r4
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	3542      	adds	r5, #66	@ 0x42
 800784c:	1d11      	adds	r1, r2, #4
 800784e:	6019      	str	r1, [r3, #0]
 8007850:	6813      	ldr	r3, [r2, #0]
 8007852:	702b      	strb	r3, [r5, #0]
 8007854:	2301      	movs	r3, #1
 8007856:	e0a0      	b.n	800799a <_printf_i+0x1c2>
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	6809      	ldr	r1, [r1, #0]
 800785c:	1d02      	adds	r2, r0, #4
 800785e:	060d      	lsls	r5, r1, #24
 8007860:	d50b      	bpl.n	800787a <_printf_i+0xa2>
 8007862:	6806      	ldr	r6, [r0, #0]
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	2e00      	cmp	r6, #0
 8007868:	da03      	bge.n	8007872 <_printf_i+0x9a>
 800786a:	232d      	movs	r3, #45	@ 0x2d
 800786c:	9a03      	ldr	r2, [sp, #12]
 800786e:	4276      	negs	r6, r6
 8007870:	7013      	strb	r3, [r2, #0]
 8007872:	4b5e      	ldr	r3, [pc, #376]	@ (80079ec <_printf_i+0x214>)
 8007874:	270a      	movs	r7, #10
 8007876:	9304      	str	r3, [sp, #16]
 8007878:	e018      	b.n	80078ac <_printf_i+0xd4>
 800787a:	6806      	ldr	r6, [r0, #0]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	0649      	lsls	r1, r1, #25
 8007880:	d5f1      	bpl.n	8007866 <_printf_i+0x8e>
 8007882:	b236      	sxth	r6, r6
 8007884:	e7ef      	b.n	8007866 <_printf_i+0x8e>
 8007886:	6808      	ldr	r0, [r1, #0]
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	c940      	ldmia	r1!, {r6}
 800788c:	0605      	lsls	r5, r0, #24
 800788e:	d402      	bmi.n	8007896 <_printf_i+0xbe>
 8007890:	0640      	lsls	r0, r0, #25
 8007892:	d500      	bpl.n	8007896 <_printf_i+0xbe>
 8007894:	b2b6      	uxth	r6, r6
 8007896:	6019      	str	r1, [r3, #0]
 8007898:	4b54      	ldr	r3, [pc, #336]	@ (80079ec <_printf_i+0x214>)
 800789a:	270a      	movs	r7, #10
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	2a6f      	cmp	r2, #111	@ 0x6f
 80078a0:	d100      	bne.n	80078a4 <_printf_i+0xcc>
 80078a2:	3f02      	subs	r7, #2
 80078a4:	0023      	movs	r3, r4
 80078a6:	2200      	movs	r2, #0
 80078a8:	3343      	adds	r3, #67	@ 0x43
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	db03      	blt.n	80078bc <_printf_i+0xe4>
 80078b4:	2104      	movs	r1, #4
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	438a      	bics	r2, r1
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	2e00      	cmp	r6, #0
 80078be:	d102      	bne.n	80078c6 <_printf_i+0xee>
 80078c0:	9d03      	ldr	r5, [sp, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <_printf_i+0x108>
 80078c6:	9d03      	ldr	r5, [sp, #12]
 80078c8:	0030      	movs	r0, r6
 80078ca:	0039      	movs	r1, r7
 80078cc:	f7f8 fcb4 	bl	8000238 <__aeabi_uidivmod>
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	3d01      	subs	r5, #1
 80078d4:	5c5b      	ldrb	r3, [r3, r1]
 80078d6:	702b      	strb	r3, [r5, #0]
 80078d8:	0033      	movs	r3, r6
 80078da:	0006      	movs	r6, r0
 80078dc:	429f      	cmp	r7, r3
 80078de:	d9f3      	bls.n	80078c8 <_printf_i+0xf0>
 80078e0:	2f08      	cmp	r7, #8
 80078e2:	d109      	bne.n	80078f8 <_printf_i+0x120>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	07db      	lsls	r3, r3, #31
 80078e8:	d506      	bpl.n	80078f8 <_printf_i+0x120>
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	6923      	ldr	r3, [r4, #16]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	dc02      	bgt.n	80078f8 <_printf_i+0x120>
 80078f2:	2330      	movs	r3, #48	@ 0x30
 80078f4:	3d01      	subs	r5, #1
 80078f6:	702b      	strb	r3, [r5, #0]
 80078f8:	9b03      	ldr	r3, [sp, #12]
 80078fa:	1b5b      	subs	r3, r3, r5
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	9b07      	ldr	r3, [sp, #28]
 8007900:	0021      	movs	r1, r4
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	9805      	ldr	r0, [sp, #20]
 8007906:	9b06      	ldr	r3, [sp, #24]
 8007908:	aa09      	add	r2, sp, #36	@ 0x24
 800790a:	f7ff fef5 	bl	80076f8 <_printf_common>
 800790e:	3001      	adds	r0, #1
 8007910:	d148      	bne.n	80079a4 <_printf_i+0x1cc>
 8007912:	2001      	movs	r0, #1
 8007914:	4240      	negs	r0, r0
 8007916:	b00b      	add	sp, #44	@ 0x2c
 8007918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800791a:	2220      	movs	r2, #32
 800791c:	6809      	ldr	r1, [r1, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	2278      	movs	r2, #120	@ 0x78
 8007924:	4932      	ldr	r1, [pc, #200]	@ (80079f0 <_printf_i+0x218>)
 8007926:	9104      	str	r1, [sp, #16]
 8007928:	0021      	movs	r1, r4
 800792a:	3145      	adds	r1, #69	@ 0x45
 800792c:	700a      	strb	r2, [r1, #0]
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	c940      	ldmia	r1!, {r6}
 8007934:	0610      	lsls	r0, r2, #24
 8007936:	d402      	bmi.n	800793e <_printf_i+0x166>
 8007938:	0650      	lsls	r0, r2, #25
 800793a:	d500      	bpl.n	800793e <_printf_i+0x166>
 800793c:	b2b6      	uxth	r6, r6
 800793e:	6019      	str	r1, [r3, #0]
 8007940:	07d3      	lsls	r3, r2, #31
 8007942:	d502      	bpl.n	800794a <_printf_i+0x172>
 8007944:	2320      	movs	r3, #32
 8007946:	4313      	orrs	r3, r2
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	2e00      	cmp	r6, #0
 800794c:	d001      	beq.n	8007952 <_printf_i+0x17a>
 800794e:	2710      	movs	r7, #16
 8007950:	e7a8      	b.n	80078a4 <_printf_i+0xcc>
 8007952:	2220      	movs	r2, #32
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	4393      	bics	r3, r2
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	e7f8      	b.n	800794e <_printf_i+0x176>
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	680d      	ldr	r5, [r1, #0]
 8007960:	1d10      	adds	r0, r2, #4
 8007962:	6949      	ldr	r1, [r1, #20]
 8007964:	6018      	str	r0, [r3, #0]
 8007966:	6813      	ldr	r3, [r2, #0]
 8007968:	062e      	lsls	r6, r5, #24
 800796a:	d501      	bpl.n	8007970 <_printf_i+0x198>
 800796c:	6019      	str	r1, [r3, #0]
 800796e:	e002      	b.n	8007976 <_printf_i+0x19e>
 8007970:	066d      	lsls	r5, r5, #25
 8007972:	d5fb      	bpl.n	800796c <_printf_i+0x194>
 8007974:	8019      	strh	r1, [r3, #0]
 8007976:	2300      	movs	r3, #0
 8007978:	9d03      	ldr	r5, [sp, #12]
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	e7bf      	b.n	80078fe <_printf_i+0x126>
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	1d11      	adds	r1, r2, #4
 8007982:	6019      	str	r1, [r3, #0]
 8007984:	6815      	ldr	r5, [r2, #0]
 8007986:	2100      	movs	r1, #0
 8007988:	0028      	movs	r0, r5
 800798a:	6862      	ldr	r2, [r4, #4]
 800798c:	f000 f858 	bl	8007a40 <memchr>
 8007990:	2800      	cmp	r0, #0
 8007992:	d001      	beq.n	8007998 <_printf_i+0x1c0>
 8007994:	1b40      	subs	r0, r0, r5
 8007996:	6060      	str	r0, [r4, #4]
 8007998:	6863      	ldr	r3, [r4, #4]
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	2300      	movs	r3, #0
 800799e:	9a03      	ldr	r2, [sp, #12]
 80079a0:	7013      	strb	r3, [r2, #0]
 80079a2:	e7ac      	b.n	80078fe <_printf_i+0x126>
 80079a4:	002a      	movs	r2, r5
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	9906      	ldr	r1, [sp, #24]
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	9d07      	ldr	r5, [sp, #28]
 80079ae:	47a8      	blx	r5
 80079b0:	3001      	adds	r0, #1
 80079b2:	d0ae      	beq.n	8007912 <_printf_i+0x13a>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	079b      	lsls	r3, r3, #30
 80079b8:	d415      	bmi.n	80079e6 <_printf_i+0x20e>
 80079ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079bc:	68e0      	ldr	r0, [r4, #12]
 80079be:	4298      	cmp	r0, r3
 80079c0:	daa9      	bge.n	8007916 <_printf_i+0x13e>
 80079c2:	0018      	movs	r0, r3
 80079c4:	e7a7      	b.n	8007916 <_printf_i+0x13e>
 80079c6:	0022      	movs	r2, r4
 80079c8:	2301      	movs	r3, #1
 80079ca:	9906      	ldr	r1, [sp, #24]
 80079cc:	9805      	ldr	r0, [sp, #20]
 80079ce:	9e07      	ldr	r6, [sp, #28]
 80079d0:	3219      	adds	r2, #25
 80079d2:	47b0      	blx	r6
 80079d4:	3001      	adds	r0, #1
 80079d6:	d09c      	beq.n	8007912 <_printf_i+0x13a>
 80079d8:	3501      	adds	r5, #1
 80079da:	68e3      	ldr	r3, [r4, #12]
 80079dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	dcf0      	bgt.n	80079c6 <_printf_i+0x1ee>
 80079e4:	e7e9      	b.n	80079ba <_printf_i+0x1e2>
 80079e6:	2500      	movs	r5, #0
 80079e8:	e7f7      	b.n	80079da <_printf_i+0x202>
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	08009761 	.word	0x08009761
 80079f0:	08009772 	.word	0x08009772

080079f4 <memmove>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	4288      	cmp	r0, r1
 80079f8:	d806      	bhi.n	8007a08 <memmove+0x14>
 80079fa:	2300      	movs	r3, #0
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d008      	beq.n	8007a12 <memmove+0x1e>
 8007a00:	5ccc      	ldrb	r4, [r1, r3]
 8007a02:	54c4      	strb	r4, [r0, r3]
 8007a04:	3301      	adds	r3, #1
 8007a06:	e7f9      	b.n	80079fc <memmove+0x8>
 8007a08:	188b      	adds	r3, r1, r2
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	d2f5      	bcs.n	80079fa <memmove+0x6>
 8007a0e:	3a01      	subs	r2, #1
 8007a10:	d200      	bcs.n	8007a14 <memmove+0x20>
 8007a12:	bd10      	pop	{r4, pc}
 8007a14:	5c8b      	ldrb	r3, [r1, r2]
 8007a16:	5483      	strb	r3, [r0, r2]
 8007a18:	e7f9      	b.n	8007a0e <memmove+0x1a>
	...

08007a1c <_sbrk_r>:
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	4d06      	ldr	r5, [pc, #24]	@ (8007a3c <_sbrk_r+0x20>)
 8007a22:	0004      	movs	r4, r0
 8007a24:	0008      	movs	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7fa ff36 	bl	8002898 <_sbrk>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d103      	bne.n	8007a38 <_sbrk_r+0x1c>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d000      	beq.n	8007a38 <_sbrk_r+0x1c>
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	bd70      	pop	{r4, r5, r6, pc}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	20000a78 	.word	0x20000a78

08007a40 <memchr>:
 8007a40:	b2c9      	uxtb	r1, r1
 8007a42:	1882      	adds	r2, r0, r2
 8007a44:	4290      	cmp	r0, r2
 8007a46:	d101      	bne.n	8007a4c <memchr+0xc>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	4770      	bx	lr
 8007a4c:	7803      	ldrb	r3, [r0, #0]
 8007a4e:	428b      	cmp	r3, r1
 8007a50:	d0fb      	beq.n	8007a4a <memchr+0xa>
 8007a52:	3001      	adds	r0, #1
 8007a54:	e7f6      	b.n	8007a44 <memchr+0x4>

08007a56 <_realloc_r>:
 8007a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a58:	0006      	movs	r6, r0
 8007a5a:	000c      	movs	r4, r1
 8007a5c:	0015      	movs	r5, r2
 8007a5e:	2900      	cmp	r1, #0
 8007a60:	d105      	bne.n	8007a6e <_realloc_r+0x18>
 8007a62:	0011      	movs	r1, r2
 8007a64:	f7ff fc5a 	bl	800731c <_malloc_r>
 8007a68:	0004      	movs	r4, r0
 8007a6a:	0020      	movs	r0, r4
 8007a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d103      	bne.n	8007a7a <_realloc_r+0x24>
 8007a72:	f7ff fbe7 	bl	8007244 <_free_r>
 8007a76:	2400      	movs	r4, #0
 8007a78:	e7f7      	b.n	8007a6a <_realloc_r+0x14>
 8007a7a:	f000 f81b 	bl	8007ab4 <_malloc_usable_size_r>
 8007a7e:	0007      	movs	r7, r0
 8007a80:	4285      	cmp	r5, r0
 8007a82:	d802      	bhi.n	8007a8a <_realloc_r+0x34>
 8007a84:	0843      	lsrs	r3, r0, #1
 8007a86:	42ab      	cmp	r3, r5
 8007a88:	d3ef      	bcc.n	8007a6a <_realloc_r+0x14>
 8007a8a:	0029      	movs	r1, r5
 8007a8c:	0030      	movs	r0, r6
 8007a8e:	f7ff fc45 	bl	800731c <_malloc_r>
 8007a92:	9001      	str	r0, [sp, #4]
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d0ee      	beq.n	8007a76 <_realloc_r+0x20>
 8007a98:	002a      	movs	r2, r5
 8007a9a:	42bd      	cmp	r5, r7
 8007a9c:	d900      	bls.n	8007aa0 <_realloc_r+0x4a>
 8007a9e:	003a      	movs	r2, r7
 8007aa0:	0021      	movs	r1, r4
 8007aa2:	9801      	ldr	r0, [sp, #4]
 8007aa4:	f7ff fbc4 	bl	8007230 <memcpy>
 8007aa8:	0021      	movs	r1, r4
 8007aaa:	0030      	movs	r0, r6
 8007aac:	f7ff fbca 	bl	8007244 <_free_r>
 8007ab0:	9c01      	ldr	r4, [sp, #4]
 8007ab2:	e7da      	b.n	8007a6a <_realloc_r+0x14>

08007ab4 <_malloc_usable_size_r>:
 8007ab4:	1f0b      	subs	r3, r1, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	1f18      	subs	r0, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da01      	bge.n	8007ac2 <_malloc_usable_size_r+0xe>
 8007abe:	580b      	ldr	r3, [r1, r0]
 8007ac0:	18c0      	adds	r0, r0, r3
 8007ac2:	4770      	bx	lr

08007ac4 <_init>:
 8007ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aca:	bc08      	pop	{r3}
 8007acc:	469e      	mov	lr, r3
 8007ace:	4770      	bx	lr

08007ad0 <_fini>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	46c0      	nop			@ (mov r8, r8)
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr
